//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift')
var Thrift = thrift.Thrift
var Q = thrift.Q

var fb303_ttypes = require('./fb303_types')


var FacebookService = require('./FacebookService')
var FacebookServiceClient = FacebookService.Client
var FacebookServiceProcessor = FacebookService.Processor
var ttypes = require('./hive_metastore_types')
//HELPER FUNCTIONS AND STRUCTURES

var ThriftHiveMetastore_getMetaConf_args = function(args) {
  this.key = null
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key
    }
  }
}
ThriftHiveMetastore_getMetaConf_args.prototype = {}
ThriftHiveMetastore_getMetaConf_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_getMetaConf_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_getMetaConf_args')
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1)
    output.writeString(this.key)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_getMetaConf_result = function(args) {
  this.success = null
  this.o1 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_getMetaConf_result.prototype = {}
ThriftHiveMetastore_getMetaConf_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_getMetaConf_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_getMetaConf_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0)
    output.writeString(this.success)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_setMetaConf_args = function(args) {
  this.key = null
  this.value = null
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value
    }
  }
}
ThriftHiveMetastore_setMetaConf_args.prototype = {}
ThriftHiveMetastore_setMetaConf_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.value = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_setMetaConf_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_setMetaConf_args')
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1)
    output.writeString(this.key)
    output.writeFieldEnd()
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2)
    output.writeString(this.value)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_setMetaConf_result = function(args) {
  this.o1 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_setMetaConf_result.prototype = {}
ThriftHiveMetastore_setMetaConf_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_setMetaConf_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_setMetaConf_result')
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_create_database_args = function(args) {
  this.database = null
  if (args) {
    if (args.database !== undefined && args.database !== null) {
      this.database = new ttypes.Database(args.database)
    }
  }
}
ThriftHiveMetastore_create_database_args.prototype = {}
ThriftHiveMetastore_create_database_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.database = new ttypes.Database()
          this.database.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_create_database_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_database_args')
  if (this.database !== null && this.database !== undefined) {
    output.writeFieldBegin('database', Thrift.Type.STRUCT, 1)
    this.database.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_create_database_result = function(args) {
  this.o1 = null
  this.o2 = null
  this.o3 = null
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args
    return
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
  }
}
ThriftHiveMetastore_create_database_result.prototype = {}
ThriftHiveMetastore_create_database_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.AlreadyExistsException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.InvalidObjectException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.MetaException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_create_database_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_database_result')
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_database_args = function(args) {
  this.name = null
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name
    }
  }
}
ThriftHiveMetastore_get_database_args.prototype = {}
ThriftHiveMetastore_get_database_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_database_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_database_args')
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1)
    output.writeString(this.name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_database_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Database(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_get_database_result.prototype = {}
ThriftHiveMetastore_get_database_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.Database()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_database_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_database_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_database_args = function(args) {
  this.name = null
  this.deleteData = null
  this.cascade = null
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name
    }
    if (args.deleteData !== undefined && args.deleteData !== null) {
      this.deleteData = args.deleteData
    }
    if (args.cascade !== undefined && args.cascade !== null) {
      this.cascade = args.cascade
    }
  }
}
ThriftHiveMetastore_drop_database_args.prototype = {}
ThriftHiveMetastore_drop_database_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.deleteData = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.cascade = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_database_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_database_args')
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1)
    output.writeString(this.name)
    output.writeFieldEnd()
  }
  if (this.deleteData !== null && this.deleteData !== undefined) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 2)
    output.writeBool(this.deleteData)
    output.writeFieldEnd()
  }
  if (this.cascade !== null && this.cascade !== undefined) {
    output.writeFieldBegin('cascade', Thrift.Type.BOOL, 3)
    output.writeBool(this.cascade)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_database_result = function(args) {
  this.o1 = null
  this.o2 = null
  this.o3 = null
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.InvalidOperationException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args
    return
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
  }
}
ThriftHiveMetastore_drop_database_result.prototype = {}
ThriftHiveMetastore_drop_database_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.InvalidOperationException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.MetaException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_database_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_database_result')
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_databases_args = function(args) {
  this.pattern = null
  if (args) {
    if (args.pattern !== undefined && args.pattern !== null) {
      this.pattern = args.pattern
    }
  }
}
ThriftHiveMetastore_get_databases_args.prototype = {}
ThriftHiveMetastore_get_databases_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.pattern = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_databases_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_databases_args')
  if (this.pattern !== null && this.pattern !== undefined) {
    output.writeFieldBegin('pattern', Thrift.Type.STRING, 1)
    output.writeString(this.pattern)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_databases_result = function(args) {
  this.success = null
  this.o1 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null])
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_get_databases_result.prototype = {}
ThriftHiveMetastore_get_databases_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size642 = 0
          var _rtmp3646
          this.success = []
          var _etype645 = 0
          _rtmp3646 = input.readListBegin()
          _etype645 = _rtmp3646.etype
          _size642 = _rtmp3646.size
          for (var _i647 = 0; _i647 < _size642; ++_i647)
          {
            var elem648 = null
            elem648 = input.readString()
            this.success.push(elem648)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_databases_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_databases_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRING, this.success.length)
    for (var iter649 in this.success)
    {
      if (this.success.hasOwnProperty(iter649))
      {
        iter649 = this.success[iter649]
        output.writeString(iter649)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_all_databases_args = function(args) {
}
ThriftHiveMetastore_get_all_databases_args.prototype = {}
ThriftHiveMetastore_get_all_databases_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    input.skip(ftype)
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_all_databases_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_all_databases_args')
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_all_databases_result = function(args) {
  this.success = null
  this.o1 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null])
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_get_all_databases_result.prototype = {}
ThriftHiveMetastore_get_all_databases_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size650 = 0
          var _rtmp3654
          this.success = []
          var _etype653 = 0
          _rtmp3654 = input.readListBegin()
          _etype653 = _rtmp3654.etype
          _size650 = _rtmp3654.size
          for (var _i655 = 0; _i655 < _size650; ++_i655)
          {
            var elem656 = null
            elem656 = input.readString()
            this.success.push(elem656)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_all_databases_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_all_databases_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRING, this.success.length)
    for (var iter657 in this.success)
    {
      if (this.success.hasOwnProperty(iter657))
      {
        iter657 = this.success[iter657]
        output.writeString(iter657)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_alter_database_args = function(args) {
  this.dbname = null
  this.db = null
  if (args) {
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname
    }
    if (args.db !== undefined && args.db !== null) {
      this.db = new ttypes.Database(args.db)
    }
  }
}
ThriftHiveMetastore_alter_database_args.prototype = {}
ThriftHiveMetastore_alter_database_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.dbname = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.db = new ttypes.Database()
          this.db.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_alter_database_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_database_args')
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1)
    output.writeString(this.dbname)
    output.writeFieldEnd()
  }
  if (this.db !== null && this.db !== undefined) {
    output.writeFieldBegin('db', Thrift.Type.STRUCT, 2)
    this.db.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_alter_database_result = function(args) {
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_alter_database_result.prototype = {}
ThriftHiveMetastore_alter_database_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.NoSuchObjectException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_alter_database_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_database_result')
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_type_args = function(args) {
  this.name = null
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name
    }
  }
}
ThriftHiveMetastore_get_type_args.prototype = {}
ThriftHiveMetastore_get_type_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_type_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_type_args')
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1)
    output.writeString(this.name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_type_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Type(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_get_type_result.prototype = {}
ThriftHiveMetastore_get_type_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.Type()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.NoSuchObjectException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_type_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_type_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_create_type_args = function(args) {
  this.type = null
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = new ttypes.Type(args.type)
    }
  }
}
ThriftHiveMetastore_create_type_args.prototype = {}
ThriftHiveMetastore_create_type_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.type = new ttypes.Type()
          this.type.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_create_type_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_type_args')
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRUCT, 1)
    this.type.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_create_type_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
  }
}
ThriftHiveMetastore_create_type_result.prototype = {}
ThriftHiveMetastore_create_type_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.AlreadyExistsException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.InvalidObjectException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.MetaException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_create_type_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_type_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_type_args = function(args) {
  this.type = null
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type
    }
  }
}
ThriftHiveMetastore_drop_type_args.prototype = {}
ThriftHiveMetastore_drop_type_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.type = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_type_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_type_args')
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 1)
    output.writeString(this.type)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_type_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_drop_type_result.prototype = {}
ThriftHiveMetastore_drop_type_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.NoSuchObjectException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_type_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_type_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_type_all_args = function(args) {
  this.name = null
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name
    }
  }
}
ThriftHiveMetastore_get_type_all_args.prototype = {}
ThriftHiveMetastore_get_type_all_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_type_all_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_type_all_args')
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1)
    output.writeString(this.name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_type_all_result = function(args) {
  this.success = null
  this.o2 = null
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [ttypes.Type])
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_get_type_all_result.prototype = {}
ThriftHiveMetastore_get_type_all_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size658 = 0
          var _rtmp3662
          this.success = {}
          var _ktype659 = 0
          var _vtype660 = 0
          _rtmp3662 = input.readMapBegin()
          _ktype659 = _rtmp3662.ktype
          _vtype660 = _rtmp3662.vtype
          _size658 = _rtmp3662.size
          for (var _i663 = 0; _i663 < _size658; ++_i663)
          {
            var key664 = null
            var val665 = null
            key664 = input.readString()
            val665 = new ttypes.Type()
            val665.read(input)
            this.success[key664] = val665
          }
          input.readMapEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_type_all_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_type_all_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0)
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success))
    for (var kiter666 in this.success)
    {
      if (this.success.hasOwnProperty(kiter666))
      {
        var viter667 = this.success[kiter666]
        output.writeString(kiter666)
        viter667.write(output)
      }
    }
    output.writeMapEnd()
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 1)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_fields_args = function(args) {
  this.db_name = null
  this.table_name = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name
    }
  }
}
ThriftHiveMetastore_get_fields_args.prototype = {}
ThriftHiveMetastore_get_fields_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.table_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_fields_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_fields_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2)
    output.writeString(this.table_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_fields_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.UnknownTableException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.UnknownDBException) {
    this.o3 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.FieldSchema])
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
  }
}
ThriftHiveMetastore_get_fields_result.prototype = {}
ThriftHiveMetastore_get_fields_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size668 = 0
          var _rtmp3672
          this.success = []
          var _etype671 = 0
          _rtmp3672 = input.readListBegin()
          _etype671 = _rtmp3672.etype
          _size668 = _rtmp3672.size
          for (var _i673 = 0; _i673 < _size668; ++_i673)
          {
            var elem674 = null
            elem674 = new ttypes.FieldSchema()
            elem674.read(input)
            this.success.push(elem674)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.UnknownTableException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.UnknownDBException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_fields_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_fields_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
    for (var iter675 in this.success)
    {
      if (this.success.hasOwnProperty(iter675))
      {
        iter675 = this.success[iter675]
        iter675.write(output)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_fields_with_environment_context_args = function(args) {
  this.db_name = null
  this.table_name = null
  this.environment_context = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name
    }
    if (args.environment_context !== undefined && args.environment_context !== null) {
      this.environment_context = new ttypes.EnvironmentContext(args.environment_context)
    }
  }
}
ThriftHiveMetastore_get_fields_with_environment_context_args.prototype = {}
ThriftHiveMetastore_get_fields_with_environment_context_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.table_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.environment_context = new ttypes.EnvironmentContext()
          this.environment_context.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_fields_with_environment_context_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_fields_with_environment_context_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2)
    output.writeString(this.table_name)
    output.writeFieldEnd()
  }
  if (this.environment_context !== null && this.environment_context !== undefined) {
    output.writeFieldBegin('environment_context', Thrift.Type.STRUCT, 3)
    this.environment_context.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_fields_with_environment_context_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.UnknownTableException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.UnknownDBException) {
    this.o3 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.FieldSchema])
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
  }
}
ThriftHiveMetastore_get_fields_with_environment_context_result.prototype = {}
ThriftHiveMetastore_get_fields_with_environment_context_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size676 = 0
          var _rtmp3680
          this.success = []
          var _etype679 = 0
          _rtmp3680 = input.readListBegin()
          _etype679 = _rtmp3680.etype
          _size676 = _rtmp3680.size
          for (var _i681 = 0; _i681 < _size676; ++_i681)
          {
            var elem682 = null
            elem682 = new ttypes.FieldSchema()
            elem682.read(input)
            this.success.push(elem682)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.UnknownTableException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.UnknownDBException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_fields_with_environment_context_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_fields_with_environment_context_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
    for (var iter683 in this.success)
    {
      if (this.success.hasOwnProperty(iter683))
      {
        iter683 = this.success[iter683]
        iter683.write(output)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_schema_args = function(args) {
  this.db_name = null
  this.table_name = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name
    }
  }
}
ThriftHiveMetastore_get_schema_args.prototype = {}
ThriftHiveMetastore_get_schema_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.table_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_schema_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_schema_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2)
    output.writeString(this.table_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_schema_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.UnknownTableException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.UnknownDBException) {
    this.o3 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.FieldSchema])
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
  }
}
ThriftHiveMetastore_get_schema_result.prototype = {}
ThriftHiveMetastore_get_schema_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size684 = 0
          var _rtmp3688
          this.success = []
          var _etype687 = 0
          _rtmp3688 = input.readListBegin()
          _etype687 = _rtmp3688.etype
          _size684 = _rtmp3688.size
          for (var _i689 = 0; _i689 < _size684; ++_i689)
          {
            var elem690 = null
            elem690 = new ttypes.FieldSchema()
            elem690.read(input)
            this.success.push(elem690)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.UnknownTableException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.UnknownDBException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_schema_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_schema_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
    for (var iter691 in this.success)
    {
      if (this.success.hasOwnProperty(iter691))
      {
        iter691 = this.success[iter691]
        iter691.write(output)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_schema_with_environment_context_args = function(args) {
  this.db_name = null
  this.table_name = null
  this.environment_context = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name
    }
    if (args.environment_context !== undefined && args.environment_context !== null) {
      this.environment_context = new ttypes.EnvironmentContext(args.environment_context)
    }
  }
}
ThriftHiveMetastore_get_schema_with_environment_context_args.prototype = {}
ThriftHiveMetastore_get_schema_with_environment_context_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.table_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.environment_context = new ttypes.EnvironmentContext()
          this.environment_context.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_schema_with_environment_context_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_schema_with_environment_context_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2)
    output.writeString(this.table_name)
    output.writeFieldEnd()
  }
  if (this.environment_context !== null && this.environment_context !== undefined) {
    output.writeFieldBegin('environment_context', Thrift.Type.STRUCT, 3)
    this.environment_context.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_schema_with_environment_context_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.UnknownTableException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.UnknownDBException) {
    this.o3 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.FieldSchema])
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
  }
}
ThriftHiveMetastore_get_schema_with_environment_context_result.prototype = {}
ThriftHiveMetastore_get_schema_with_environment_context_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size692 = 0
          var _rtmp3696
          this.success = []
          var _etype695 = 0
          _rtmp3696 = input.readListBegin()
          _etype695 = _rtmp3696.etype
          _size692 = _rtmp3696.size
          for (var _i697 = 0; _i697 < _size692; ++_i697)
          {
            var elem698 = null
            elem698 = new ttypes.FieldSchema()
            elem698.read(input)
            this.success.push(elem698)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.UnknownTableException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.UnknownDBException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_schema_with_environment_context_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_schema_with_environment_context_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
    for (var iter699 in this.success)
    {
      if (this.success.hasOwnProperty(iter699))
      {
        iter699 = this.success[iter699]
        iter699.write(output)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_create_table_args = function(args) {
  this.tbl = null
  if (args) {
    if (args.tbl !== undefined && args.tbl !== null) {
      this.tbl = new ttypes.Table(args.tbl)
    }
  }
}
ThriftHiveMetastore_create_table_args.prototype = {}
ThriftHiveMetastore_create_table_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.tbl = new ttypes.Table()
          this.tbl.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_create_table_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_table_args')
  if (this.tbl !== null && this.tbl !== undefined) {
    output.writeFieldBegin('tbl', Thrift.Type.STRUCT, 1)
    this.tbl.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_create_table_result = function(args) {
  this.o1 = null
  this.o2 = null
  this.o3 = null
  this.o4 = null
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args
    return
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o4 = args
    return
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
    if (args.o4 !== undefined && args.o4 !== null) {
      this.o4 = args.o4
    }
  }
}
ThriftHiveMetastore_create_table_result.prototype = {}
ThriftHiveMetastore_create_table_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.AlreadyExistsException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.InvalidObjectException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.MetaException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.o4 = new ttypes.NoSuchObjectException()
          this.o4.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_create_table_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_table_result')
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4)
    this.o4.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_create_table_with_environment_context_args = function(args) {
  this.tbl = null
  this.environment_context = null
  if (args) {
    if (args.tbl !== undefined && args.tbl !== null) {
      this.tbl = new ttypes.Table(args.tbl)
    }
    if (args.environment_context !== undefined && args.environment_context !== null) {
      this.environment_context = new ttypes.EnvironmentContext(args.environment_context)
    }
  }
}
ThriftHiveMetastore_create_table_with_environment_context_args.prototype = {}
ThriftHiveMetastore_create_table_with_environment_context_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.tbl = new ttypes.Table()
          this.tbl.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.environment_context = new ttypes.EnvironmentContext()
          this.environment_context.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_create_table_with_environment_context_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_table_with_environment_context_args')
  if (this.tbl !== null && this.tbl !== undefined) {
    output.writeFieldBegin('tbl', Thrift.Type.STRUCT, 1)
    this.tbl.write(output)
    output.writeFieldEnd()
  }
  if (this.environment_context !== null && this.environment_context !== undefined) {
    output.writeFieldBegin('environment_context', Thrift.Type.STRUCT, 2)
    this.environment_context.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_create_table_with_environment_context_result = function(args) {
  this.o1 = null
  this.o2 = null
  this.o3 = null
  this.o4 = null
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args
    return
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o4 = args
    return
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
    if (args.o4 !== undefined && args.o4 !== null) {
      this.o4 = args.o4
    }
  }
}
ThriftHiveMetastore_create_table_with_environment_context_result.prototype = {}
ThriftHiveMetastore_create_table_with_environment_context_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.AlreadyExistsException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.InvalidObjectException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.MetaException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.o4 = new ttypes.NoSuchObjectException()
          this.o4.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_create_table_with_environment_context_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_table_with_environment_context_result')
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4)
    this.o4.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_create_table_with_constraints_args = function(args) {
  this.tbl = null
  this.primaryKeys = null
  this.foreignKeys = null
  if (args) {
    if (args.tbl !== undefined && args.tbl !== null) {
      this.tbl = new ttypes.Table(args.tbl)
    }
    if (args.primaryKeys !== undefined && args.primaryKeys !== null) {
      this.primaryKeys = Thrift.copyList(args.primaryKeys, [ttypes.SQLPrimaryKey])
    }
    if (args.foreignKeys !== undefined && args.foreignKeys !== null) {
      this.foreignKeys = Thrift.copyList(args.foreignKeys, [ttypes.SQLForeignKey])
    }
  }
}
ThriftHiveMetastore_create_table_with_constraints_args.prototype = {}
ThriftHiveMetastore_create_table_with_constraints_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.tbl = new ttypes.Table()
          this.tbl.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size700 = 0
          var _rtmp3704
          this.primaryKeys = []
          var _etype703 = 0
          _rtmp3704 = input.readListBegin()
          _etype703 = _rtmp3704.etype
          _size700 = _rtmp3704.size
          for (var _i705 = 0; _i705 < _size700; ++_i705)
          {
            var elem706 = null
            elem706 = new ttypes.SQLPrimaryKey()
            elem706.read(input)
            this.primaryKeys.push(elem706)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.LIST) {
          var _size707 = 0
          var _rtmp3711
          this.foreignKeys = []
          var _etype710 = 0
          _rtmp3711 = input.readListBegin()
          _etype710 = _rtmp3711.etype
          _size707 = _rtmp3711.size
          for (var _i712 = 0; _i712 < _size707; ++_i712)
          {
            var elem713 = null
            elem713 = new ttypes.SQLForeignKey()
            elem713.read(input)
            this.foreignKeys.push(elem713)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_create_table_with_constraints_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_table_with_constraints_args')
  if (this.tbl !== null && this.tbl !== undefined) {
    output.writeFieldBegin('tbl', Thrift.Type.STRUCT, 1)
    this.tbl.write(output)
    output.writeFieldEnd()
  }
  if (this.primaryKeys !== null && this.primaryKeys !== undefined) {
    output.writeFieldBegin('primaryKeys', Thrift.Type.LIST, 2)
    output.writeListBegin(Thrift.Type.STRUCT, this.primaryKeys.length)
    for (var iter714 in this.primaryKeys)
    {
      if (this.primaryKeys.hasOwnProperty(iter714))
      {
        iter714 = this.primaryKeys[iter714]
        iter714.write(output)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.foreignKeys !== null && this.foreignKeys !== undefined) {
    output.writeFieldBegin('foreignKeys', Thrift.Type.LIST, 3)
    output.writeListBegin(Thrift.Type.STRUCT, this.foreignKeys.length)
    for (var iter715 in this.foreignKeys)
    {
      if (this.foreignKeys.hasOwnProperty(iter715))
      {
        iter715 = this.foreignKeys[iter715]
        iter715.write(output)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_create_table_with_constraints_result = function(args) {
  this.o1 = null
  this.o2 = null
  this.o3 = null
  this.o4 = null
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args
    return
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o4 = args
    return
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
    if (args.o4 !== undefined && args.o4 !== null) {
      this.o4 = args.o4
    }
  }
}
ThriftHiveMetastore_create_table_with_constraints_result.prototype = {}
ThriftHiveMetastore_create_table_with_constraints_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.AlreadyExistsException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.InvalidObjectException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.MetaException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.o4 = new ttypes.NoSuchObjectException()
          this.o4.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_create_table_with_constraints_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_table_with_constraints_result')
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4)
    this.o4.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_constraint_args = function(args) {
  this.req = null
  if (args) {
    if (args.req !== undefined && args.req !== null) {
      this.req = new ttypes.DropConstraintRequest(args.req)
    }
  }
}
ThriftHiveMetastore_drop_constraint_args.prototype = {}
ThriftHiveMetastore_drop_constraint_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.req = new ttypes.DropConstraintRequest()
          this.req.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_constraint_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_constraint_args')
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1)
    this.req.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_constraint_result = function(args) {
  this.o1 = null
  this.o3 = null
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args
    return
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
  }
}
ThriftHiveMetastore_drop_constraint_result.prototype = {}
ThriftHiveMetastore_drop_constraint_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.MetaException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_constraint_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_constraint_result')
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 2)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_add_primary_key_args = function(args) {
  this.req = null
  if (args) {
    if (args.req !== undefined && args.req !== null) {
      this.req = new ttypes.AddPrimaryKeyRequest(args.req)
    }
  }
}
ThriftHiveMetastore_add_primary_key_args.prototype = {}
ThriftHiveMetastore_add_primary_key_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.req = new ttypes.AddPrimaryKeyRequest()
          this.req.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_add_primary_key_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_primary_key_args')
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1)
    this.req.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_add_primary_key_result = function(args) {
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_add_primary_key_result.prototype = {}
ThriftHiveMetastore_add_primary_key_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_add_primary_key_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_primary_key_result')
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_add_foreign_key_args = function(args) {
  this.req = null
  if (args) {
    if (args.req !== undefined && args.req !== null) {
      this.req = new ttypes.AddForeignKeyRequest(args.req)
    }
  }
}
ThriftHiveMetastore_add_foreign_key_args.prototype = {}
ThriftHiveMetastore_add_foreign_key_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.req = new ttypes.AddForeignKeyRequest()
          this.req.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_add_foreign_key_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_foreign_key_args')
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1)
    this.req.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_add_foreign_key_result = function(args) {
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_add_foreign_key_result.prototype = {}
ThriftHiveMetastore_add_foreign_key_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_add_foreign_key_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_foreign_key_result')
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_table_args = function(args) {
  this.dbname = null
  this.name = null
  this.deleteData = null
  if (args) {
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name
    }
    if (args.deleteData !== undefined && args.deleteData !== null) {
      this.deleteData = args.deleteData
    }
  }
}
ThriftHiveMetastore_drop_table_args.prototype = {}
ThriftHiveMetastore_drop_table_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.dbname = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.deleteData = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_table_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_table_args')
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1)
    output.writeString(this.dbname)
    output.writeFieldEnd()
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2)
    output.writeString(this.name)
    output.writeFieldEnd()
  }
  if (this.deleteData !== null && this.deleteData !== undefined) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 3)
    output.writeBool(this.deleteData)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_table_result = function(args) {
  this.o1 = null
  this.o3 = null
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args
    return
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
  }
}
ThriftHiveMetastore_drop_table_result.prototype = {}
ThriftHiveMetastore_drop_table_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.MetaException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_table_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_table_result')
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 2)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_table_with_environment_context_args = function(args) {
  this.dbname = null
  this.name = null
  this.deleteData = null
  this.environment_context = null
  if (args) {
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name
    }
    if (args.deleteData !== undefined && args.deleteData !== null) {
      this.deleteData = args.deleteData
    }
    if (args.environment_context !== undefined && args.environment_context !== null) {
      this.environment_context = new ttypes.EnvironmentContext(args.environment_context)
    }
  }
}
ThriftHiveMetastore_drop_table_with_environment_context_args.prototype = {}
ThriftHiveMetastore_drop_table_with_environment_context_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.dbname = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.deleteData = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.environment_context = new ttypes.EnvironmentContext()
          this.environment_context.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_table_with_environment_context_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_table_with_environment_context_args')
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1)
    output.writeString(this.dbname)
    output.writeFieldEnd()
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2)
    output.writeString(this.name)
    output.writeFieldEnd()
  }
  if (this.deleteData !== null && this.deleteData !== undefined) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 3)
    output.writeBool(this.deleteData)
    output.writeFieldEnd()
  }
  if (this.environment_context !== null && this.environment_context !== undefined) {
    output.writeFieldBegin('environment_context', Thrift.Type.STRUCT, 4)
    this.environment_context.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_table_with_environment_context_result = function(args) {
  this.o1 = null
  this.o3 = null
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args
    return
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
  }
}
ThriftHiveMetastore_drop_table_with_environment_context_result.prototype = {}
ThriftHiveMetastore_drop_table_with_environment_context_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.MetaException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_table_with_environment_context_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_table_with_environment_context_result')
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 2)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_tables_args = function(args) {
  this.db_name = null
  this.pattern = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.pattern !== undefined && args.pattern !== null) {
      this.pattern = args.pattern
    }
  }
}
ThriftHiveMetastore_get_tables_args.prototype = {}
ThriftHiveMetastore_get_tables_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.pattern = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_tables_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_tables_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.pattern !== null && this.pattern !== undefined) {
    output.writeFieldBegin('pattern', Thrift.Type.STRING, 2)
    output.writeString(this.pattern)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_tables_result = function(args) {
  this.success = null
  this.o1 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null])
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_get_tables_result.prototype = {}
ThriftHiveMetastore_get_tables_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size716 = 0
          var _rtmp3720
          this.success = []
          var _etype719 = 0
          _rtmp3720 = input.readListBegin()
          _etype719 = _rtmp3720.etype
          _size716 = _rtmp3720.size
          for (var _i721 = 0; _i721 < _size716; ++_i721)
          {
            var elem722 = null
            elem722 = input.readString()
            this.success.push(elem722)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_tables_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_tables_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRING, this.success.length)
    for (var iter723 in this.success)
    {
      if (this.success.hasOwnProperty(iter723))
      {
        iter723 = this.success[iter723]
        output.writeString(iter723)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_table_meta_args = function(args) {
  this.db_patterns = null
  this.tbl_patterns = null
  this.tbl_types = null
  if (args) {
    if (args.db_patterns !== undefined && args.db_patterns !== null) {
      this.db_patterns = args.db_patterns
    }
    if (args.tbl_patterns !== undefined && args.tbl_patterns !== null) {
      this.tbl_patterns = args.tbl_patterns
    }
    if (args.tbl_types !== undefined && args.tbl_types !== null) {
      this.tbl_types = Thrift.copyList(args.tbl_types, [null])
    }
  }
}
ThriftHiveMetastore_get_table_meta_args.prototype = {}
ThriftHiveMetastore_get_table_meta_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_patterns = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_patterns = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.LIST) {
          var _size724 = 0
          var _rtmp3728
          this.tbl_types = []
          var _etype727 = 0
          _rtmp3728 = input.readListBegin()
          _etype727 = _rtmp3728.etype
          _size724 = _rtmp3728.size
          for (var _i729 = 0; _i729 < _size724; ++_i729)
          {
            var elem730 = null
            elem730 = input.readString()
            this.tbl_types.push(elem730)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_table_meta_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_table_meta_args')
  if (this.db_patterns !== null && this.db_patterns !== undefined) {
    output.writeFieldBegin('db_patterns', Thrift.Type.STRING, 1)
    output.writeString(this.db_patterns)
    output.writeFieldEnd()
  }
  if (this.tbl_patterns !== null && this.tbl_patterns !== undefined) {
    output.writeFieldBegin('tbl_patterns', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_patterns)
    output.writeFieldEnd()
  }
  if (this.tbl_types !== null && this.tbl_types !== undefined) {
    output.writeFieldBegin('tbl_types', Thrift.Type.LIST, 3)
    output.writeListBegin(Thrift.Type.STRING, this.tbl_types.length)
    for (var iter731 in this.tbl_types)
    {
      if (this.tbl_types.hasOwnProperty(iter731))
      {
        iter731 = this.tbl_types[iter731]
        output.writeString(iter731)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_table_meta_result = function(args) {
  this.success = null
  this.o1 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TableMeta])
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_get_table_meta_result.prototype = {}
ThriftHiveMetastore_get_table_meta_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size732 = 0
          var _rtmp3736
          this.success = []
          var _etype735 = 0
          _rtmp3736 = input.readListBegin()
          _etype735 = _rtmp3736.etype
          _size732 = _rtmp3736.size
          for (var _i737 = 0; _i737 < _size732; ++_i737)
          {
            var elem738 = null
            elem738 = new ttypes.TableMeta()
            elem738.read(input)
            this.success.push(elem738)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_table_meta_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_table_meta_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
    for (var iter739 in this.success)
    {
      if (this.success.hasOwnProperty(iter739))
      {
        iter739 = this.success[iter739]
        iter739.write(output)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_all_tables_args = function(args) {
  this.db_name = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
  }
}
ThriftHiveMetastore_get_all_tables_args.prototype = {}
ThriftHiveMetastore_get_all_tables_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_all_tables_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_all_tables_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_all_tables_result = function(args) {
  this.success = null
  this.o1 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null])
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_get_all_tables_result.prototype = {}
ThriftHiveMetastore_get_all_tables_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size740 = 0
          var _rtmp3744
          this.success = []
          var _etype743 = 0
          _rtmp3744 = input.readListBegin()
          _etype743 = _rtmp3744.etype
          _size740 = _rtmp3744.size
          for (var _i745 = 0; _i745 < _size740; ++_i745)
          {
            var elem746 = null
            elem746 = input.readString()
            this.success.push(elem746)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_all_tables_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_all_tables_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRING, this.success.length)
    for (var iter747 in this.success)
    {
      if (this.success.hasOwnProperty(iter747))
      {
        iter747 = this.success[iter747]
        output.writeString(iter747)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_table_args = function(args) {
  this.dbname = null
  this.tbl_name = null
  if (args) {
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
  }
}
ThriftHiveMetastore_get_table_args.prototype = {}
ThriftHiveMetastore_get_table_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.dbname = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_table_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_table_args')
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1)
    output.writeString(this.dbname)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_table_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Table(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_get_table_result.prototype = {}
ThriftHiveMetastore_get_table_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.Table()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.NoSuchObjectException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_table_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_table_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_table_objects_by_name_args = function(args) {
  this.dbname = null
  this.tbl_names = null
  if (args) {
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname
    }
    if (args.tbl_names !== undefined && args.tbl_names !== null) {
      this.tbl_names = Thrift.copyList(args.tbl_names, [null])
    }
  }
}
ThriftHiveMetastore_get_table_objects_by_name_args.prototype = {}
ThriftHiveMetastore_get_table_objects_by_name_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.dbname = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size748 = 0
          var _rtmp3752
          this.tbl_names = []
          var _etype751 = 0
          _rtmp3752 = input.readListBegin()
          _etype751 = _rtmp3752.etype
          _size748 = _rtmp3752.size
          for (var _i753 = 0; _i753 < _size748; ++_i753)
          {
            var elem754 = null
            elem754 = input.readString()
            this.tbl_names.push(elem754)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_table_objects_by_name_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_table_objects_by_name_args')
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1)
    output.writeString(this.dbname)
    output.writeFieldEnd()
  }
  if (this.tbl_names !== null && this.tbl_names !== undefined) {
    output.writeFieldBegin('tbl_names', Thrift.Type.LIST, 2)
    output.writeListBegin(Thrift.Type.STRING, this.tbl_names.length)
    for (var iter755 in this.tbl_names)
    {
      if (this.tbl_names.hasOwnProperty(iter755))
      {
        iter755 = this.tbl_names[iter755]
        output.writeString(iter755)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_table_objects_by_name_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.InvalidOperationException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.UnknownDBException) {
    this.o3 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Table])
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
  }
}
ThriftHiveMetastore_get_table_objects_by_name_result.prototype = {}
ThriftHiveMetastore_get_table_objects_by_name_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size756 = 0
          var _rtmp3760
          this.success = []
          var _etype759 = 0
          _rtmp3760 = input.readListBegin()
          _etype759 = _rtmp3760.etype
          _size756 = _rtmp3760.size
          for (var _i761 = 0; _i761 < _size756; ++_i761)
          {
            var elem762 = null
            elem762 = new ttypes.Table()
            elem762.read(input)
            this.success.push(elem762)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.InvalidOperationException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.UnknownDBException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_table_objects_by_name_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_table_objects_by_name_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
    for (var iter763 in this.success)
    {
      if (this.success.hasOwnProperty(iter763))
      {
        iter763 = this.success[iter763]
        iter763.write(output)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_table_names_by_filter_args = function(args) {
  this.dbname = null
  this.filter = null
  this.max_tables = -1
  if (args) {
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = args.filter
    }
    if (args.max_tables !== undefined && args.max_tables !== null) {
      this.max_tables = args.max_tables
    }
  }
}
ThriftHiveMetastore_get_table_names_by_filter_args.prototype = {}
ThriftHiveMetastore_get_table_names_by_filter_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.dbname = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.filter = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.I16) {
          this.max_tables = input.readI16()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_table_names_by_filter_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_table_names_by_filter_args')
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1)
    output.writeString(this.dbname)
    output.writeFieldEnd()
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRING, 2)
    output.writeString(this.filter)
    output.writeFieldEnd()
  }
  if (this.max_tables !== null && this.max_tables !== undefined) {
    output.writeFieldBegin('max_tables', Thrift.Type.I16, 3)
    output.writeI16(this.max_tables)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_table_names_by_filter_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.InvalidOperationException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.UnknownDBException) {
    this.o3 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null])
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
  }
}
ThriftHiveMetastore_get_table_names_by_filter_result.prototype = {}
ThriftHiveMetastore_get_table_names_by_filter_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size764 = 0
          var _rtmp3768
          this.success = []
          var _etype767 = 0
          _rtmp3768 = input.readListBegin()
          _etype767 = _rtmp3768.etype
          _size764 = _rtmp3768.size
          for (var _i769 = 0; _i769 < _size764; ++_i769)
          {
            var elem770 = null
            elem770 = input.readString()
            this.success.push(elem770)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.InvalidOperationException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.UnknownDBException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_table_names_by_filter_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_table_names_by_filter_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRING, this.success.length)
    for (var iter771 in this.success)
    {
      if (this.success.hasOwnProperty(iter771))
      {
        iter771 = this.success[iter771]
        output.writeString(iter771)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_alter_table_args = function(args) {
  this.dbname = null
  this.tbl_name = null
  this.new_tbl = null
  if (args) {
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.new_tbl !== undefined && args.new_tbl !== null) {
      this.new_tbl = new ttypes.Table(args.new_tbl)
    }
  }
}
ThriftHiveMetastore_alter_table_args.prototype = {}
ThriftHiveMetastore_alter_table_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.dbname = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.new_tbl = new ttypes.Table()
          this.new_tbl.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_alter_table_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_table_args')
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1)
    output.writeString(this.dbname)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.new_tbl !== null && this.new_tbl !== undefined) {
    output.writeFieldBegin('new_tbl', Thrift.Type.STRUCT, 3)
    this.new_tbl.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_alter_table_result = function(args) {
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.InvalidOperationException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_alter_table_result.prototype = {}
ThriftHiveMetastore_alter_table_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.InvalidOperationException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_alter_table_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_table_result')
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_alter_table_with_environment_context_args = function(args) {
  this.dbname = null
  this.tbl_name = null
  this.new_tbl = null
  this.environment_context = null
  if (args) {
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.new_tbl !== undefined && args.new_tbl !== null) {
      this.new_tbl = new ttypes.Table(args.new_tbl)
    }
    if (args.environment_context !== undefined && args.environment_context !== null) {
      this.environment_context = new ttypes.EnvironmentContext(args.environment_context)
    }
  }
}
ThriftHiveMetastore_alter_table_with_environment_context_args.prototype = {}
ThriftHiveMetastore_alter_table_with_environment_context_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.dbname = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.new_tbl = new ttypes.Table()
          this.new_tbl.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.environment_context = new ttypes.EnvironmentContext()
          this.environment_context.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_alter_table_with_environment_context_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_table_with_environment_context_args')
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1)
    output.writeString(this.dbname)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.new_tbl !== null && this.new_tbl !== undefined) {
    output.writeFieldBegin('new_tbl', Thrift.Type.STRUCT, 3)
    this.new_tbl.write(output)
    output.writeFieldEnd()
  }
  if (this.environment_context !== null && this.environment_context !== undefined) {
    output.writeFieldBegin('environment_context', Thrift.Type.STRUCT, 4)
    this.environment_context.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_alter_table_with_environment_context_result = function(args) {
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.InvalidOperationException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_alter_table_with_environment_context_result.prototype = {}
ThriftHiveMetastore_alter_table_with_environment_context_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.InvalidOperationException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_alter_table_with_environment_context_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_table_with_environment_context_result')
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_alter_table_with_cascade_args = function(args) {
  this.dbname = null
  this.tbl_name = null
  this.new_tbl = null
  this.cascade = null
  if (args) {
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.new_tbl !== undefined && args.new_tbl !== null) {
      this.new_tbl = new ttypes.Table(args.new_tbl)
    }
    if (args.cascade !== undefined && args.cascade !== null) {
      this.cascade = args.cascade
    }
  }
}
ThriftHiveMetastore_alter_table_with_cascade_args.prototype = {}
ThriftHiveMetastore_alter_table_with_cascade_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.dbname = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.new_tbl = new ttypes.Table()
          this.new_tbl.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.cascade = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_alter_table_with_cascade_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_table_with_cascade_args')
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1)
    output.writeString(this.dbname)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.new_tbl !== null && this.new_tbl !== undefined) {
    output.writeFieldBegin('new_tbl', Thrift.Type.STRUCT, 3)
    this.new_tbl.write(output)
    output.writeFieldEnd()
  }
  if (this.cascade !== null && this.cascade !== undefined) {
    output.writeFieldBegin('cascade', Thrift.Type.BOOL, 4)
    output.writeBool(this.cascade)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_alter_table_with_cascade_result = function(args) {
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.InvalidOperationException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_alter_table_with_cascade_result.prototype = {}
ThriftHiveMetastore_alter_table_with_cascade_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.InvalidOperationException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_alter_table_with_cascade_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_table_with_cascade_result')
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_add_partition_args = function(args) {
  this.new_part = null
  if (args) {
    if (args.new_part !== undefined && args.new_part !== null) {
      this.new_part = new ttypes.Partition(args.new_part)
    }
  }
}
ThriftHiveMetastore_add_partition_args.prototype = {}
ThriftHiveMetastore_add_partition_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.new_part = new ttypes.Partition()
          this.new_part.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_add_partition_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_partition_args')
  if (this.new_part !== null && this.new_part !== undefined) {
    output.writeFieldBegin('new_part', Thrift.Type.STRUCT, 1)
    this.new_part.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_add_partition_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
  if (args instanceof ttypes.InvalidObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Partition(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
  }
}
ThriftHiveMetastore_add_partition_result.prototype = {}
ThriftHiveMetastore_add_partition_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.Partition()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.InvalidObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.AlreadyExistsException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.MetaException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_add_partition_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_partition_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_add_partition_with_environment_context_args = function(args) {
  this.new_part = null
  this.environment_context = null
  if (args) {
    if (args.new_part !== undefined && args.new_part !== null) {
      this.new_part = new ttypes.Partition(args.new_part)
    }
    if (args.environment_context !== undefined && args.environment_context !== null) {
      this.environment_context = new ttypes.EnvironmentContext(args.environment_context)
    }
  }
}
ThriftHiveMetastore_add_partition_with_environment_context_args.prototype = {}
ThriftHiveMetastore_add_partition_with_environment_context_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.new_part = new ttypes.Partition()
          this.new_part.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.environment_context = new ttypes.EnvironmentContext()
          this.environment_context.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_add_partition_with_environment_context_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_partition_with_environment_context_args')
  if (this.new_part !== null && this.new_part !== undefined) {
    output.writeFieldBegin('new_part', Thrift.Type.STRUCT, 1)
    this.new_part.write(output)
    output.writeFieldEnd()
  }
  if (this.environment_context !== null && this.environment_context !== undefined) {
    output.writeFieldBegin('environment_context', Thrift.Type.STRUCT, 2)
    this.environment_context.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_add_partition_with_environment_context_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
  if (args instanceof ttypes.InvalidObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Partition(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
  }
}
ThriftHiveMetastore_add_partition_with_environment_context_result.prototype = {}
ThriftHiveMetastore_add_partition_with_environment_context_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.Partition()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.InvalidObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.AlreadyExistsException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.MetaException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_add_partition_with_environment_context_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_partition_with_environment_context_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_add_partitions_args = function(args) {
  this.new_parts = null
  if (args) {
    if (args.new_parts !== undefined && args.new_parts !== null) {
      this.new_parts = Thrift.copyList(args.new_parts, [ttypes.Partition])
    }
  }
}
ThriftHiveMetastore_add_partitions_args.prototype = {}
ThriftHiveMetastore_add_partitions_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size772 = 0
          var _rtmp3776
          this.new_parts = []
          var _etype775 = 0
          _rtmp3776 = input.readListBegin()
          _etype775 = _rtmp3776.etype
          _size772 = _rtmp3776.size
          for (var _i777 = 0; _i777 < _size772; ++_i777)
          {
            var elem778 = null
            elem778 = new ttypes.Partition()
            elem778.read(input)
            this.new_parts.push(elem778)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_add_partitions_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_partitions_args')
  if (this.new_parts !== null && this.new_parts !== undefined) {
    output.writeFieldBegin('new_parts', Thrift.Type.LIST, 1)
    output.writeListBegin(Thrift.Type.STRUCT, this.new_parts.length)
    for (var iter779 in this.new_parts)
    {
      if (this.new_parts.hasOwnProperty(iter779))
      {
        iter779 = this.new_parts[iter779]
        iter779.write(output)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_add_partitions_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
  if (args instanceof ttypes.InvalidObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
  }
}
ThriftHiveMetastore_add_partitions_result.prototype = {}
ThriftHiveMetastore_add_partitions_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.I32) {
          this.success = input.readI32()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.InvalidObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.AlreadyExistsException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.MetaException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_add_partitions_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_partitions_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0)
    output.writeI32(this.success)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_add_partitions_pspec_args = function(args) {
  this.new_parts = null
  if (args) {
    if (args.new_parts !== undefined && args.new_parts !== null) {
      this.new_parts = Thrift.copyList(args.new_parts, [ttypes.PartitionSpec])
    }
  }
}
ThriftHiveMetastore_add_partitions_pspec_args.prototype = {}
ThriftHiveMetastore_add_partitions_pspec_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size780 = 0
          var _rtmp3784
          this.new_parts = []
          var _etype783 = 0
          _rtmp3784 = input.readListBegin()
          _etype783 = _rtmp3784.etype
          _size780 = _rtmp3784.size
          for (var _i785 = 0; _i785 < _size780; ++_i785)
          {
            var elem786 = null
            elem786 = new ttypes.PartitionSpec()
            elem786.read(input)
            this.new_parts.push(elem786)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_add_partitions_pspec_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_partitions_pspec_args')
  if (this.new_parts !== null && this.new_parts !== undefined) {
    output.writeFieldBegin('new_parts', Thrift.Type.LIST, 1)
    output.writeListBegin(Thrift.Type.STRUCT, this.new_parts.length)
    for (var iter787 in this.new_parts)
    {
      if (this.new_parts.hasOwnProperty(iter787))
      {
        iter787 = this.new_parts[iter787]
        iter787.write(output)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_add_partitions_pspec_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
  if (args instanceof ttypes.InvalidObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
  }
}
ThriftHiveMetastore_add_partitions_pspec_result.prototype = {}
ThriftHiveMetastore_add_partitions_pspec_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.I32) {
          this.success = input.readI32()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.InvalidObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.AlreadyExistsException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.MetaException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_add_partitions_pspec_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_partitions_pspec_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0)
    output.writeI32(this.success)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_append_partition_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.part_vals = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.part_vals !== undefined && args.part_vals !== null) {
      this.part_vals = Thrift.copyList(args.part_vals, [null])
    }
  }
}
ThriftHiveMetastore_append_partition_args.prototype = {}
ThriftHiveMetastore_append_partition_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.LIST) {
          var _size788 = 0
          var _rtmp3792
          this.part_vals = []
          var _etype791 = 0
          _rtmp3792 = input.readListBegin()
          _etype791 = _rtmp3792.etype
          _size788 = _rtmp3792.size
          for (var _i793 = 0; _i793 < _size788; ++_i793)
          {
            var elem794 = null
            elem794 = input.readString()
            this.part_vals.push(elem794)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_append_partition_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_append_partition_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3)
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length)
    for (var iter795 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter795))
      {
        iter795 = this.part_vals[iter795]
        output.writeString(iter795)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_append_partition_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
  if (args instanceof ttypes.InvalidObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Partition(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
  }
}
ThriftHiveMetastore_append_partition_result.prototype = {}
ThriftHiveMetastore_append_partition_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.Partition()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.InvalidObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.AlreadyExistsException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.MetaException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_append_partition_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_append_partition_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_add_partitions_req_args = function(args) {
  this.request = null
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.AddPartitionsRequest(args.request)
    }
  }
}
ThriftHiveMetastore_add_partitions_req_args.prototype = {}
ThriftHiveMetastore_add_partitions_req_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.request = new ttypes.AddPartitionsRequest()
          this.request.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_add_partitions_req_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_partitions_req_args')
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1)
    this.request.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_add_partitions_req_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
  if (args instanceof ttypes.InvalidObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AddPartitionsResult(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
  }
}
ThriftHiveMetastore_add_partitions_req_result.prototype = {}
ThriftHiveMetastore_add_partitions_req_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.AddPartitionsResult()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.InvalidObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.AlreadyExistsException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.MetaException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_add_partitions_req_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_partitions_req_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_append_partition_with_environment_context_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.part_vals = null
  this.environment_context = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.part_vals !== undefined && args.part_vals !== null) {
      this.part_vals = Thrift.copyList(args.part_vals, [null])
    }
    if (args.environment_context !== undefined && args.environment_context !== null) {
      this.environment_context = new ttypes.EnvironmentContext(args.environment_context)
    }
  }
}
ThriftHiveMetastore_append_partition_with_environment_context_args.prototype = {}
ThriftHiveMetastore_append_partition_with_environment_context_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.LIST) {
          var _size796 = 0
          var _rtmp3800
          this.part_vals = []
          var _etype799 = 0
          _rtmp3800 = input.readListBegin()
          _etype799 = _rtmp3800.etype
          _size796 = _rtmp3800.size
          for (var _i801 = 0; _i801 < _size796; ++_i801)
          {
            var elem802 = null
            elem802 = input.readString()
            this.part_vals.push(elem802)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.environment_context = new ttypes.EnvironmentContext()
          this.environment_context.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_append_partition_with_environment_context_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_append_partition_with_environment_context_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3)
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length)
    for (var iter803 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter803))
      {
        iter803 = this.part_vals[iter803]
        output.writeString(iter803)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.environment_context !== null && this.environment_context !== undefined) {
    output.writeFieldBegin('environment_context', Thrift.Type.STRUCT, 4)
    this.environment_context.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_append_partition_with_environment_context_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
  if (args instanceof ttypes.InvalidObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Partition(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
  }
}
ThriftHiveMetastore_append_partition_with_environment_context_result.prototype = {}
ThriftHiveMetastore_append_partition_with_environment_context_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.Partition()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.InvalidObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.AlreadyExistsException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.MetaException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_append_partition_with_environment_context_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_append_partition_with_environment_context_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_append_partition_by_name_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.part_name = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.part_name !== undefined && args.part_name !== null) {
      this.part_name = args.part_name
    }
  }
}
ThriftHiveMetastore_append_partition_by_name_args.prototype = {}
ThriftHiveMetastore_append_partition_by_name_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRING) {
          this.part_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_append_partition_by_name_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_append_partition_by_name_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.part_name !== null && this.part_name !== undefined) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 3)
    output.writeString(this.part_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_append_partition_by_name_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
  if (args instanceof ttypes.InvalidObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Partition(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
  }
}
ThriftHiveMetastore_append_partition_by_name_result.prototype = {}
ThriftHiveMetastore_append_partition_by_name_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.Partition()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.InvalidObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.AlreadyExistsException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.MetaException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_append_partition_by_name_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_append_partition_by_name_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_append_partition_by_name_with_environment_context_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.part_name = null
  this.environment_context = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.part_name !== undefined && args.part_name !== null) {
      this.part_name = args.part_name
    }
    if (args.environment_context !== undefined && args.environment_context !== null) {
      this.environment_context = new ttypes.EnvironmentContext(args.environment_context)
    }
  }
}
ThriftHiveMetastore_append_partition_by_name_with_environment_context_args.prototype = {}
ThriftHiveMetastore_append_partition_by_name_with_environment_context_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRING) {
          this.part_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.environment_context = new ttypes.EnvironmentContext()
          this.environment_context.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_append_partition_by_name_with_environment_context_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_append_partition_by_name_with_environment_context_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.part_name !== null && this.part_name !== undefined) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 3)
    output.writeString(this.part_name)
    output.writeFieldEnd()
  }
  if (this.environment_context !== null && this.environment_context !== undefined) {
    output.writeFieldBegin('environment_context', Thrift.Type.STRUCT, 4)
    this.environment_context.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_append_partition_by_name_with_environment_context_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
  if (args instanceof ttypes.InvalidObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Partition(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
  }
}
ThriftHiveMetastore_append_partition_by_name_with_environment_context_result.prototype = {}
ThriftHiveMetastore_append_partition_by_name_with_environment_context_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.Partition()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.InvalidObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.AlreadyExistsException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.MetaException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_append_partition_by_name_with_environment_context_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_append_partition_by_name_with_environment_context_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_partition_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.part_vals = null
  this.deleteData = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.part_vals !== undefined && args.part_vals !== null) {
      this.part_vals = Thrift.copyList(args.part_vals, [null])
    }
    if (args.deleteData !== undefined && args.deleteData !== null) {
      this.deleteData = args.deleteData
    }
  }
}
ThriftHiveMetastore_drop_partition_args.prototype = {}
ThriftHiveMetastore_drop_partition_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.LIST) {
          var _size804 = 0
          var _rtmp3808
          this.part_vals = []
          var _etype807 = 0
          _rtmp3808 = input.readListBegin()
          _etype807 = _rtmp3808.etype
          _size804 = _rtmp3808.size
          for (var _i809 = 0; _i809 < _size804; ++_i809)
          {
            var elem810 = null
            elem810 = input.readString()
            this.part_vals.push(elem810)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.deleteData = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_partition_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_partition_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3)
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length)
    for (var iter811 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter811))
      {
        iter811 = this.part_vals[iter811]
        output.writeString(iter811)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.deleteData !== null && this.deleteData !== undefined) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 4)
    output.writeBool(this.deleteData)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_partition_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_drop_partition_result.prototype = {}
ThriftHiveMetastore_drop_partition_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_partition_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_partition_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_partition_with_environment_context_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.part_vals = null
  this.deleteData = null
  this.environment_context = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.part_vals !== undefined && args.part_vals !== null) {
      this.part_vals = Thrift.copyList(args.part_vals, [null])
    }
    if (args.deleteData !== undefined && args.deleteData !== null) {
      this.deleteData = args.deleteData
    }
    if (args.environment_context !== undefined && args.environment_context !== null) {
      this.environment_context = new ttypes.EnvironmentContext(args.environment_context)
    }
  }
}
ThriftHiveMetastore_drop_partition_with_environment_context_args.prototype = {}
ThriftHiveMetastore_drop_partition_with_environment_context_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.LIST) {
          var _size812 = 0
          var _rtmp3816
          this.part_vals = []
          var _etype815 = 0
          _rtmp3816 = input.readListBegin()
          _etype815 = _rtmp3816.etype
          _size812 = _rtmp3816.size
          for (var _i817 = 0; _i817 < _size812; ++_i817)
          {
            var elem818 = null
            elem818 = input.readString()
            this.part_vals.push(elem818)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.deleteData = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.environment_context = new ttypes.EnvironmentContext()
          this.environment_context.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_partition_with_environment_context_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_partition_with_environment_context_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3)
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length)
    for (var iter819 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter819))
      {
        iter819 = this.part_vals[iter819]
        output.writeString(iter819)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.deleteData !== null && this.deleteData !== undefined) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 4)
    output.writeBool(this.deleteData)
    output.writeFieldEnd()
  }
  if (this.environment_context !== null && this.environment_context !== undefined) {
    output.writeFieldBegin('environment_context', Thrift.Type.STRUCT, 5)
    this.environment_context.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_partition_with_environment_context_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_drop_partition_with_environment_context_result.prototype = {}
ThriftHiveMetastore_drop_partition_with_environment_context_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_partition_with_environment_context_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_partition_with_environment_context_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_partition_by_name_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.part_name = null
  this.deleteData = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.part_name !== undefined && args.part_name !== null) {
      this.part_name = args.part_name
    }
    if (args.deleteData !== undefined && args.deleteData !== null) {
      this.deleteData = args.deleteData
    }
  }
}
ThriftHiveMetastore_drop_partition_by_name_args.prototype = {}
ThriftHiveMetastore_drop_partition_by_name_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRING) {
          this.part_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.deleteData = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_partition_by_name_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_partition_by_name_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.part_name !== null && this.part_name !== undefined) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 3)
    output.writeString(this.part_name)
    output.writeFieldEnd()
  }
  if (this.deleteData !== null && this.deleteData !== undefined) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 4)
    output.writeBool(this.deleteData)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_partition_by_name_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_drop_partition_by_name_result.prototype = {}
ThriftHiveMetastore_drop_partition_by_name_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_partition_by_name_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_partition_by_name_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_partition_by_name_with_environment_context_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.part_name = null
  this.deleteData = null
  this.environment_context = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.part_name !== undefined && args.part_name !== null) {
      this.part_name = args.part_name
    }
    if (args.deleteData !== undefined && args.deleteData !== null) {
      this.deleteData = args.deleteData
    }
    if (args.environment_context !== undefined && args.environment_context !== null) {
      this.environment_context = new ttypes.EnvironmentContext(args.environment_context)
    }
  }
}
ThriftHiveMetastore_drop_partition_by_name_with_environment_context_args.prototype = {}
ThriftHiveMetastore_drop_partition_by_name_with_environment_context_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRING) {
          this.part_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.deleteData = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.environment_context = new ttypes.EnvironmentContext()
          this.environment_context.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_partition_by_name_with_environment_context_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_partition_by_name_with_environment_context_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.part_name !== null && this.part_name !== undefined) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 3)
    output.writeString(this.part_name)
    output.writeFieldEnd()
  }
  if (this.deleteData !== null && this.deleteData !== undefined) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 4)
    output.writeBool(this.deleteData)
    output.writeFieldEnd()
  }
  if (this.environment_context !== null && this.environment_context !== undefined) {
    output.writeFieldBegin('environment_context', Thrift.Type.STRUCT, 5)
    this.environment_context.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_partition_by_name_with_environment_context_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_drop_partition_by_name_with_environment_context_result.prototype = {}
ThriftHiveMetastore_drop_partition_by_name_with_environment_context_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_partition_by_name_with_environment_context_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_partition_by_name_with_environment_context_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_partitions_req_args = function(args) {
  this.req = null
  if (args) {
    if (args.req !== undefined && args.req !== null) {
      this.req = new ttypes.DropPartitionsRequest(args.req)
    }
  }
}
ThriftHiveMetastore_drop_partitions_req_args.prototype = {}
ThriftHiveMetastore_drop_partitions_req_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.req = new ttypes.DropPartitionsRequest()
          this.req.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_partitions_req_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_partitions_req_args')
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1)
    this.req.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_partitions_req_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.DropPartitionsResult(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_drop_partitions_req_result.prototype = {}
ThriftHiveMetastore_drop_partitions_req_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.DropPartitionsResult()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_partitions_req_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_partitions_req_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partition_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.part_vals = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.part_vals !== undefined && args.part_vals !== null) {
      this.part_vals = Thrift.copyList(args.part_vals, [null])
    }
  }
}
ThriftHiveMetastore_get_partition_args.prototype = {}
ThriftHiveMetastore_get_partition_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.LIST) {
          var _size820 = 0
          var _rtmp3824
          this.part_vals = []
          var _etype823 = 0
          _rtmp3824 = input.readListBegin()
          _etype823 = _rtmp3824.etype
          _size820 = _rtmp3824.size
          for (var _i825 = 0; _i825 < _size820; ++_i825)
          {
            var elem826 = null
            elem826 = input.readString()
            this.part_vals.push(elem826)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partition_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3)
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length)
    for (var iter827 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter827))
      {
        iter827 = this.part_vals[iter827]
        output.writeString(iter827)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partition_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Partition(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_get_partition_result.prototype = {}
ThriftHiveMetastore_get_partition_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.Partition()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.NoSuchObjectException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partition_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_exchange_partition_args = function(args) {
  this.partitionSpecs = null
  this.source_db = null
  this.source_table_name = null
  this.dest_db = null
  this.dest_table_name = null
  if (args) {
    if (args.partitionSpecs !== undefined && args.partitionSpecs !== null) {
      this.partitionSpecs = Thrift.copyMap(args.partitionSpecs, [null])
    }
    if (args.source_db !== undefined && args.source_db !== null) {
      this.source_db = args.source_db
    }
    if (args.source_table_name !== undefined && args.source_table_name !== null) {
      this.source_table_name = args.source_table_name
    }
    if (args.dest_db !== undefined && args.dest_db !== null) {
      this.dest_db = args.dest_db
    }
    if (args.dest_table_name !== undefined && args.dest_table_name !== null) {
      this.dest_table_name = args.dest_table_name
    }
  }
}
ThriftHiveMetastore_exchange_partition_args.prototype = {}
ThriftHiveMetastore_exchange_partition_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.MAP) {
          var _size828 = 0
          var _rtmp3832
          this.partitionSpecs = {}
          var _ktype829 = 0
          var _vtype830 = 0
          _rtmp3832 = input.readMapBegin()
          _ktype829 = _rtmp3832.ktype
          _vtype830 = _rtmp3832.vtype
          _size828 = _rtmp3832.size
          for (var _i833 = 0; _i833 < _size828; ++_i833)
          {
            var key834 = null
            var val835 = null
            key834 = input.readString()
            val835 = input.readString()
            this.partitionSpecs[key834] = val835
          }
          input.readMapEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.source_db = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRING) {
          this.source_table_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.STRING) {
          this.dest_db = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 5:
        if (ftype == Thrift.Type.STRING) {
          this.dest_table_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_exchange_partition_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_exchange_partition_args')
  if (this.partitionSpecs !== null && this.partitionSpecs !== undefined) {
    output.writeFieldBegin('partitionSpecs', Thrift.Type.MAP, 1)
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.partitionSpecs))
    for (var kiter836 in this.partitionSpecs)
    {
      if (this.partitionSpecs.hasOwnProperty(kiter836))
      {
        var viter837 = this.partitionSpecs[kiter836]
        output.writeString(kiter836)
        output.writeString(viter837)
      }
    }
    output.writeMapEnd()
    output.writeFieldEnd()
  }
  if (this.source_db !== null && this.source_db !== undefined) {
    output.writeFieldBegin('source_db', Thrift.Type.STRING, 2)
    output.writeString(this.source_db)
    output.writeFieldEnd()
  }
  if (this.source_table_name !== null && this.source_table_name !== undefined) {
    output.writeFieldBegin('source_table_name', Thrift.Type.STRING, 3)
    output.writeString(this.source_table_name)
    output.writeFieldEnd()
  }
  if (this.dest_db !== null && this.dest_db !== undefined) {
    output.writeFieldBegin('dest_db', Thrift.Type.STRING, 4)
    output.writeString(this.dest_db)
    output.writeFieldEnd()
  }
  if (this.dest_table_name !== null && this.dest_table_name !== undefined) {
    output.writeFieldBegin('dest_table_name', Thrift.Type.STRING, 5)
    output.writeString(this.dest_table_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_exchange_partition_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
  this.o4 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o3 = args
    return
  }
  if (args instanceof ttypes.InvalidInputException) {
    this.o4 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Partition(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
    if (args.o4 !== undefined && args.o4 !== null) {
      this.o4 = args.o4
    }
  }
}
ThriftHiveMetastore_exchange_partition_result.prototype = {}
ThriftHiveMetastore_exchange_partition_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.Partition()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.NoSuchObjectException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.InvalidObjectException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.o4 = new ttypes.InvalidInputException()
          this.o4.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_exchange_partition_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_exchange_partition_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4)
    this.o4.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_exchange_partitions_args = function(args) {
  this.partitionSpecs = null
  this.source_db = null
  this.source_table_name = null
  this.dest_db = null
  this.dest_table_name = null
  if (args) {
    if (args.partitionSpecs !== undefined && args.partitionSpecs !== null) {
      this.partitionSpecs = Thrift.copyMap(args.partitionSpecs, [null])
    }
    if (args.source_db !== undefined && args.source_db !== null) {
      this.source_db = args.source_db
    }
    if (args.source_table_name !== undefined && args.source_table_name !== null) {
      this.source_table_name = args.source_table_name
    }
    if (args.dest_db !== undefined && args.dest_db !== null) {
      this.dest_db = args.dest_db
    }
    if (args.dest_table_name !== undefined && args.dest_table_name !== null) {
      this.dest_table_name = args.dest_table_name
    }
  }
}
ThriftHiveMetastore_exchange_partitions_args.prototype = {}
ThriftHiveMetastore_exchange_partitions_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.MAP) {
          var _size838 = 0
          var _rtmp3842
          this.partitionSpecs = {}
          var _ktype839 = 0
          var _vtype840 = 0
          _rtmp3842 = input.readMapBegin()
          _ktype839 = _rtmp3842.ktype
          _vtype840 = _rtmp3842.vtype
          _size838 = _rtmp3842.size
          for (var _i843 = 0; _i843 < _size838; ++_i843)
          {
            var key844 = null
            var val845 = null
            key844 = input.readString()
            val845 = input.readString()
            this.partitionSpecs[key844] = val845
          }
          input.readMapEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.source_db = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRING) {
          this.source_table_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.STRING) {
          this.dest_db = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 5:
        if (ftype == Thrift.Type.STRING) {
          this.dest_table_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_exchange_partitions_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_exchange_partitions_args')
  if (this.partitionSpecs !== null && this.partitionSpecs !== undefined) {
    output.writeFieldBegin('partitionSpecs', Thrift.Type.MAP, 1)
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.partitionSpecs))
    for (var kiter846 in this.partitionSpecs)
    {
      if (this.partitionSpecs.hasOwnProperty(kiter846))
      {
        var viter847 = this.partitionSpecs[kiter846]
        output.writeString(kiter846)
        output.writeString(viter847)
      }
    }
    output.writeMapEnd()
    output.writeFieldEnd()
  }
  if (this.source_db !== null && this.source_db !== undefined) {
    output.writeFieldBegin('source_db', Thrift.Type.STRING, 2)
    output.writeString(this.source_db)
    output.writeFieldEnd()
  }
  if (this.source_table_name !== null && this.source_table_name !== undefined) {
    output.writeFieldBegin('source_table_name', Thrift.Type.STRING, 3)
    output.writeString(this.source_table_name)
    output.writeFieldEnd()
  }
  if (this.dest_db !== null && this.dest_db !== undefined) {
    output.writeFieldBegin('dest_db', Thrift.Type.STRING, 4)
    output.writeString(this.dest_db)
    output.writeFieldEnd()
  }
  if (this.dest_table_name !== null && this.dest_table_name !== undefined) {
    output.writeFieldBegin('dest_table_name', Thrift.Type.STRING, 5)
    output.writeString(this.dest_table_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_exchange_partitions_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
  this.o4 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o3 = args
    return
  }
  if (args instanceof ttypes.InvalidInputException) {
    this.o4 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Partition])
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
    if (args.o4 !== undefined && args.o4 !== null) {
      this.o4 = args.o4
    }
  }
}
ThriftHiveMetastore_exchange_partitions_result.prototype = {}
ThriftHiveMetastore_exchange_partitions_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size848 = 0
          var _rtmp3852
          this.success = []
          var _etype851 = 0
          _rtmp3852 = input.readListBegin()
          _etype851 = _rtmp3852.etype
          _size848 = _rtmp3852.size
          for (var _i853 = 0; _i853 < _size848; ++_i853)
          {
            var elem854 = null
            elem854 = new ttypes.Partition()
            elem854.read(input)
            this.success.push(elem854)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.NoSuchObjectException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.InvalidObjectException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.o4 = new ttypes.InvalidInputException()
          this.o4.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_exchange_partitions_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_exchange_partitions_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
    for (var iter855 in this.success)
    {
      if (this.success.hasOwnProperty(iter855))
      {
        iter855 = this.success[iter855]
        iter855.write(output)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4)
    this.o4.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partition_with_auth_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.part_vals = null
  this.user_name = null
  this.group_names = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.part_vals !== undefined && args.part_vals !== null) {
      this.part_vals = Thrift.copyList(args.part_vals, [null])
    }
    if (args.user_name !== undefined && args.user_name !== null) {
      this.user_name = args.user_name
    }
    if (args.group_names !== undefined && args.group_names !== null) {
      this.group_names = Thrift.copyList(args.group_names, [null])
    }
  }
}
ThriftHiveMetastore_get_partition_with_auth_args.prototype = {}
ThriftHiveMetastore_get_partition_with_auth_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.LIST) {
          var _size856 = 0
          var _rtmp3860
          this.part_vals = []
          var _etype859 = 0
          _rtmp3860 = input.readListBegin()
          _etype859 = _rtmp3860.etype
          _size856 = _rtmp3860.size
          for (var _i861 = 0; _i861 < _size856; ++_i861)
          {
            var elem862 = null
            elem862 = input.readString()
            this.part_vals.push(elem862)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.STRING) {
          this.user_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 5:
        if (ftype == Thrift.Type.LIST) {
          var _size863 = 0
          var _rtmp3867
          this.group_names = []
          var _etype866 = 0
          _rtmp3867 = input.readListBegin()
          _etype866 = _rtmp3867.etype
          _size863 = _rtmp3867.size
          for (var _i868 = 0; _i868 < _size863; ++_i868)
          {
            var elem869 = null
            elem869 = input.readString()
            this.group_names.push(elem869)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partition_with_auth_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_with_auth_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3)
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length)
    for (var iter870 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter870))
      {
        iter870 = this.part_vals[iter870]
        output.writeString(iter870)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.user_name !== null && this.user_name !== undefined) {
    output.writeFieldBegin('user_name', Thrift.Type.STRING, 4)
    output.writeString(this.user_name)
    output.writeFieldEnd()
  }
  if (this.group_names !== null && this.group_names !== undefined) {
    output.writeFieldBegin('group_names', Thrift.Type.LIST, 5)
    output.writeListBegin(Thrift.Type.STRING, this.group_names.length)
    for (var iter871 in this.group_names)
    {
      if (this.group_names.hasOwnProperty(iter871))
      {
        iter871 = this.group_names[iter871]
        output.writeString(iter871)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partition_with_auth_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Partition(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_get_partition_with_auth_result.prototype = {}
ThriftHiveMetastore_get_partition_with_auth_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.Partition()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.NoSuchObjectException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partition_with_auth_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_with_auth_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partition_by_name_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.part_name = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.part_name !== undefined && args.part_name !== null) {
      this.part_name = args.part_name
    }
  }
}
ThriftHiveMetastore_get_partition_by_name_args.prototype = {}
ThriftHiveMetastore_get_partition_by_name_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRING) {
          this.part_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partition_by_name_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_by_name_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.part_name !== null && this.part_name !== undefined) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 3)
    output.writeString(this.part_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partition_by_name_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Partition(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_get_partition_by_name_result.prototype = {}
ThriftHiveMetastore_get_partition_by_name_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.Partition()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.NoSuchObjectException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partition_by_name_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_by_name_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partitions_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.max_parts = -1
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.max_parts !== undefined && args.max_parts !== null) {
      this.max_parts = args.max_parts
    }
  }
}
ThriftHiveMetastore_get_partitions_args.prototype = {}
ThriftHiveMetastore_get_partitions_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.I16) {
          this.max_parts = input.readI16()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partitions_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.max_parts !== null && this.max_parts !== undefined) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 3)
    output.writeI16(this.max_parts)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partitions_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Partition])
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_get_partitions_result.prototype = {}
ThriftHiveMetastore_get_partitions_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size872 = 0
          var _rtmp3876
          this.success = []
          var _etype875 = 0
          _rtmp3876 = input.readListBegin()
          _etype875 = _rtmp3876.etype
          _size872 = _rtmp3876.size
          for (var _i877 = 0; _i877 < _size872; ++_i877)
          {
            var elem878 = null
            elem878 = new ttypes.Partition()
            elem878.read(input)
            this.success.push(elem878)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partitions_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
    for (var iter879 in this.success)
    {
      if (this.success.hasOwnProperty(iter879))
      {
        iter879 = this.success[iter879]
        iter879.write(output)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partitions_with_auth_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.max_parts = -1
  this.user_name = null
  this.group_names = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.max_parts !== undefined && args.max_parts !== null) {
      this.max_parts = args.max_parts
    }
    if (args.user_name !== undefined && args.user_name !== null) {
      this.user_name = args.user_name
    }
    if (args.group_names !== undefined && args.group_names !== null) {
      this.group_names = Thrift.copyList(args.group_names, [null])
    }
  }
}
ThriftHiveMetastore_get_partitions_with_auth_args.prototype = {}
ThriftHiveMetastore_get_partitions_with_auth_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.I16) {
          this.max_parts = input.readI16()
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.STRING) {
          this.user_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 5:
        if (ftype == Thrift.Type.LIST) {
          var _size880 = 0
          var _rtmp3884
          this.group_names = []
          var _etype883 = 0
          _rtmp3884 = input.readListBegin()
          _etype883 = _rtmp3884.etype
          _size880 = _rtmp3884.size
          for (var _i885 = 0; _i885 < _size880; ++_i885)
          {
            var elem886 = null
            elem886 = input.readString()
            this.group_names.push(elem886)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partitions_with_auth_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_with_auth_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.max_parts !== null && this.max_parts !== undefined) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 3)
    output.writeI16(this.max_parts)
    output.writeFieldEnd()
  }
  if (this.user_name !== null && this.user_name !== undefined) {
    output.writeFieldBegin('user_name', Thrift.Type.STRING, 4)
    output.writeString(this.user_name)
    output.writeFieldEnd()
  }
  if (this.group_names !== null && this.group_names !== undefined) {
    output.writeFieldBegin('group_names', Thrift.Type.LIST, 5)
    output.writeListBegin(Thrift.Type.STRING, this.group_names.length)
    for (var iter887 in this.group_names)
    {
      if (this.group_names.hasOwnProperty(iter887))
      {
        iter887 = this.group_names[iter887]
        output.writeString(iter887)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partitions_with_auth_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Partition])
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_get_partitions_with_auth_result.prototype = {}
ThriftHiveMetastore_get_partitions_with_auth_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size888 = 0
          var _rtmp3892
          this.success = []
          var _etype891 = 0
          _rtmp3892 = input.readListBegin()
          _etype891 = _rtmp3892.etype
          _size888 = _rtmp3892.size
          for (var _i893 = 0; _i893 < _size888; ++_i893)
          {
            var elem894 = null
            elem894 = new ttypes.Partition()
            elem894.read(input)
            this.success.push(elem894)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partitions_with_auth_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_with_auth_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
    for (var iter895 in this.success)
    {
      if (this.success.hasOwnProperty(iter895))
      {
        iter895 = this.success[iter895]
        iter895.write(output)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partitions_pspec_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.max_parts = -1
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.max_parts !== undefined && args.max_parts !== null) {
      this.max_parts = args.max_parts
    }
  }
}
ThriftHiveMetastore_get_partitions_pspec_args.prototype = {}
ThriftHiveMetastore_get_partitions_pspec_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.I32) {
          this.max_parts = input.readI32()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partitions_pspec_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_pspec_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.max_parts !== null && this.max_parts !== undefined) {
    output.writeFieldBegin('max_parts', Thrift.Type.I32, 3)
    output.writeI32(this.max_parts)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partitions_pspec_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.PartitionSpec])
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_get_partitions_pspec_result.prototype = {}
ThriftHiveMetastore_get_partitions_pspec_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size896 = 0
          var _rtmp3900
          this.success = []
          var _etype899 = 0
          _rtmp3900 = input.readListBegin()
          _etype899 = _rtmp3900.etype
          _size896 = _rtmp3900.size
          for (var _i901 = 0; _i901 < _size896; ++_i901)
          {
            var elem902 = null
            elem902 = new ttypes.PartitionSpec()
            elem902.read(input)
            this.success.push(elem902)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partitions_pspec_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_pspec_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
    for (var iter903 in this.success)
    {
      if (this.success.hasOwnProperty(iter903))
      {
        iter903 = this.success[iter903]
        iter903.write(output)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partition_names_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.max_parts = -1
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.max_parts !== undefined && args.max_parts !== null) {
      this.max_parts = args.max_parts
    }
  }
}
ThriftHiveMetastore_get_partition_names_args.prototype = {}
ThriftHiveMetastore_get_partition_names_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.I16) {
          this.max_parts = input.readI16()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partition_names_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_names_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.max_parts !== null && this.max_parts !== undefined) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 3)
    output.writeI16(this.max_parts)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partition_names_result = function(args) {
  this.success = null
  this.o2 = null
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null])
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_get_partition_names_result.prototype = {}
ThriftHiveMetastore_get_partition_names_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size904 = 0
          var _rtmp3908
          this.success = []
          var _etype907 = 0
          _rtmp3908 = input.readListBegin()
          _etype907 = _rtmp3908.etype
          _size904 = _rtmp3908.size
          for (var _i909 = 0; _i909 < _size904; ++_i909)
          {
            var elem910 = null
            elem910 = input.readString()
            this.success.push(elem910)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partition_names_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_names_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRING, this.success.length)
    for (var iter911 in this.success)
    {
      if (this.success.hasOwnProperty(iter911))
      {
        iter911 = this.success[iter911]
        output.writeString(iter911)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 1)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partitions_ps_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.part_vals = null
  this.max_parts = -1
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.part_vals !== undefined && args.part_vals !== null) {
      this.part_vals = Thrift.copyList(args.part_vals, [null])
    }
    if (args.max_parts !== undefined && args.max_parts !== null) {
      this.max_parts = args.max_parts
    }
  }
}
ThriftHiveMetastore_get_partitions_ps_args.prototype = {}
ThriftHiveMetastore_get_partitions_ps_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.LIST) {
          var _size912 = 0
          var _rtmp3916
          this.part_vals = []
          var _etype915 = 0
          _rtmp3916 = input.readListBegin()
          _etype915 = _rtmp3916.etype
          _size912 = _rtmp3916.size
          for (var _i917 = 0; _i917 < _size912; ++_i917)
          {
            var elem918 = null
            elem918 = input.readString()
            this.part_vals.push(elem918)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.I16) {
          this.max_parts = input.readI16()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partitions_ps_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_ps_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3)
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length)
    for (var iter919 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter919))
      {
        iter919 = this.part_vals[iter919]
        output.writeString(iter919)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.max_parts !== null && this.max_parts !== undefined) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 4)
    output.writeI16(this.max_parts)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partitions_ps_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Partition])
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_get_partitions_ps_result.prototype = {}
ThriftHiveMetastore_get_partitions_ps_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size920 = 0
          var _rtmp3924
          this.success = []
          var _etype923 = 0
          _rtmp3924 = input.readListBegin()
          _etype923 = _rtmp3924.etype
          _size920 = _rtmp3924.size
          for (var _i925 = 0; _i925 < _size920; ++_i925)
          {
            var elem926 = null
            elem926 = new ttypes.Partition()
            elem926.read(input)
            this.success.push(elem926)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.NoSuchObjectException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partitions_ps_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_ps_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
    for (var iter927 in this.success)
    {
      if (this.success.hasOwnProperty(iter927))
      {
        iter927 = this.success[iter927]
        iter927.write(output)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partitions_ps_with_auth_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.part_vals = null
  this.max_parts = -1
  this.user_name = null
  this.group_names = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.part_vals !== undefined && args.part_vals !== null) {
      this.part_vals = Thrift.copyList(args.part_vals, [null])
    }
    if (args.max_parts !== undefined && args.max_parts !== null) {
      this.max_parts = args.max_parts
    }
    if (args.user_name !== undefined && args.user_name !== null) {
      this.user_name = args.user_name
    }
    if (args.group_names !== undefined && args.group_names !== null) {
      this.group_names = Thrift.copyList(args.group_names, [null])
    }
  }
}
ThriftHiveMetastore_get_partitions_ps_with_auth_args.prototype = {}
ThriftHiveMetastore_get_partitions_ps_with_auth_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.LIST) {
          var _size928 = 0
          var _rtmp3932
          this.part_vals = []
          var _etype931 = 0
          _rtmp3932 = input.readListBegin()
          _etype931 = _rtmp3932.etype
          _size928 = _rtmp3932.size
          for (var _i933 = 0; _i933 < _size928; ++_i933)
          {
            var elem934 = null
            elem934 = input.readString()
            this.part_vals.push(elem934)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.I16) {
          this.max_parts = input.readI16()
        } else {
          input.skip(ftype)
        }
        break
      case 5:
        if (ftype == Thrift.Type.STRING) {
          this.user_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 6:
        if (ftype == Thrift.Type.LIST) {
          var _size935 = 0
          var _rtmp3939
          this.group_names = []
          var _etype938 = 0
          _rtmp3939 = input.readListBegin()
          _etype938 = _rtmp3939.etype
          _size935 = _rtmp3939.size
          for (var _i940 = 0; _i940 < _size935; ++_i940)
          {
            var elem941 = null
            elem941 = input.readString()
            this.group_names.push(elem941)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partitions_ps_with_auth_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_ps_with_auth_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3)
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length)
    for (var iter942 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter942))
      {
        iter942 = this.part_vals[iter942]
        output.writeString(iter942)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.max_parts !== null && this.max_parts !== undefined) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 4)
    output.writeI16(this.max_parts)
    output.writeFieldEnd()
  }
  if (this.user_name !== null && this.user_name !== undefined) {
    output.writeFieldBegin('user_name', Thrift.Type.STRING, 5)
    output.writeString(this.user_name)
    output.writeFieldEnd()
  }
  if (this.group_names !== null && this.group_names !== undefined) {
    output.writeFieldBegin('group_names', Thrift.Type.LIST, 6)
    output.writeListBegin(Thrift.Type.STRING, this.group_names.length)
    for (var iter943 in this.group_names)
    {
      if (this.group_names.hasOwnProperty(iter943))
      {
        iter943 = this.group_names[iter943]
        output.writeString(iter943)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partitions_ps_with_auth_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Partition])
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_get_partitions_ps_with_auth_result.prototype = {}
ThriftHiveMetastore_get_partitions_ps_with_auth_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size944 = 0
          var _rtmp3948
          this.success = []
          var _etype947 = 0
          _rtmp3948 = input.readListBegin()
          _etype947 = _rtmp3948.etype
          _size944 = _rtmp3948.size
          for (var _i949 = 0; _i949 < _size944; ++_i949)
          {
            var elem950 = null
            elem950 = new ttypes.Partition()
            elem950.read(input)
            this.success.push(elem950)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partitions_ps_with_auth_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_ps_with_auth_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
    for (var iter951 in this.success)
    {
      if (this.success.hasOwnProperty(iter951))
      {
        iter951 = this.success[iter951]
        iter951.write(output)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partition_names_ps_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.part_vals = null
  this.max_parts = -1
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.part_vals !== undefined && args.part_vals !== null) {
      this.part_vals = Thrift.copyList(args.part_vals, [null])
    }
    if (args.max_parts !== undefined && args.max_parts !== null) {
      this.max_parts = args.max_parts
    }
  }
}
ThriftHiveMetastore_get_partition_names_ps_args.prototype = {}
ThriftHiveMetastore_get_partition_names_ps_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.LIST) {
          var _size952 = 0
          var _rtmp3956
          this.part_vals = []
          var _etype955 = 0
          _rtmp3956 = input.readListBegin()
          _etype955 = _rtmp3956.etype
          _size952 = _rtmp3956.size
          for (var _i957 = 0; _i957 < _size952; ++_i957)
          {
            var elem958 = null
            elem958 = input.readString()
            this.part_vals.push(elem958)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.I16) {
          this.max_parts = input.readI16()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partition_names_ps_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_names_ps_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3)
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length)
    for (var iter959 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter959))
      {
        iter959 = this.part_vals[iter959]
        output.writeString(iter959)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.max_parts !== null && this.max_parts !== undefined) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 4)
    output.writeI16(this.max_parts)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partition_names_ps_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null])
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_get_partition_names_ps_result.prototype = {}
ThriftHiveMetastore_get_partition_names_ps_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size960 = 0
          var _rtmp3964
          this.success = []
          var _etype963 = 0
          _rtmp3964 = input.readListBegin()
          _etype963 = _rtmp3964.etype
          _size960 = _rtmp3964.size
          for (var _i965 = 0; _i965 < _size960; ++_i965)
          {
            var elem966 = null
            elem966 = input.readString()
            this.success.push(elem966)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.NoSuchObjectException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partition_names_ps_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_names_ps_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRING, this.success.length)
    for (var iter967 in this.success)
    {
      if (this.success.hasOwnProperty(iter967))
      {
        iter967 = this.success[iter967]
        output.writeString(iter967)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partitions_by_filter_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.filter = null
  this.max_parts = -1
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = args.filter
    }
    if (args.max_parts !== undefined && args.max_parts !== null) {
      this.max_parts = args.max_parts
    }
  }
}
ThriftHiveMetastore_get_partitions_by_filter_args.prototype = {}
ThriftHiveMetastore_get_partitions_by_filter_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRING) {
          this.filter = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.I16) {
          this.max_parts = input.readI16()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partitions_by_filter_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_by_filter_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRING, 3)
    output.writeString(this.filter)
    output.writeFieldEnd()
  }
  if (this.max_parts !== null && this.max_parts !== undefined) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 4)
    output.writeI16(this.max_parts)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partitions_by_filter_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Partition])
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_get_partitions_by_filter_result.prototype = {}
ThriftHiveMetastore_get_partitions_by_filter_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size968 = 0
          var _rtmp3972
          this.success = []
          var _etype971 = 0
          _rtmp3972 = input.readListBegin()
          _etype971 = _rtmp3972.etype
          _size968 = _rtmp3972.size
          for (var _i973 = 0; _i973 < _size968; ++_i973)
          {
            var elem974 = null
            elem974 = new ttypes.Partition()
            elem974.read(input)
            this.success.push(elem974)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.NoSuchObjectException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partitions_by_filter_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_by_filter_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
    for (var iter975 in this.success)
    {
      if (this.success.hasOwnProperty(iter975))
      {
        iter975 = this.success[iter975]
        iter975.write(output)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_part_specs_by_filter_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.filter = null
  this.max_parts = -1
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = args.filter
    }
    if (args.max_parts !== undefined && args.max_parts !== null) {
      this.max_parts = args.max_parts
    }
  }
}
ThriftHiveMetastore_get_part_specs_by_filter_args.prototype = {}
ThriftHiveMetastore_get_part_specs_by_filter_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRING) {
          this.filter = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.I32) {
          this.max_parts = input.readI32()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_part_specs_by_filter_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_part_specs_by_filter_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRING, 3)
    output.writeString(this.filter)
    output.writeFieldEnd()
  }
  if (this.max_parts !== null && this.max_parts !== undefined) {
    output.writeFieldBegin('max_parts', Thrift.Type.I32, 4)
    output.writeI32(this.max_parts)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_part_specs_by_filter_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.PartitionSpec])
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_get_part_specs_by_filter_result.prototype = {}
ThriftHiveMetastore_get_part_specs_by_filter_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size976 = 0
          var _rtmp3980
          this.success = []
          var _etype979 = 0
          _rtmp3980 = input.readListBegin()
          _etype979 = _rtmp3980.etype
          _size976 = _rtmp3980.size
          for (var _i981 = 0; _i981 < _size976; ++_i981)
          {
            var elem982 = null
            elem982 = new ttypes.PartitionSpec()
            elem982.read(input)
            this.success.push(elem982)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.NoSuchObjectException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_part_specs_by_filter_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_part_specs_by_filter_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
    for (var iter983 in this.success)
    {
      if (this.success.hasOwnProperty(iter983))
      {
        iter983 = this.success[iter983]
        iter983.write(output)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partitions_by_expr_args = function(args) {
  this.req = null
  if (args) {
    if (args.req !== undefined && args.req !== null) {
      this.req = new ttypes.PartitionsByExprRequest(args.req)
    }
  }
}
ThriftHiveMetastore_get_partitions_by_expr_args.prototype = {}
ThriftHiveMetastore_get_partitions_by_expr_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.req = new ttypes.PartitionsByExprRequest()
          this.req.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partitions_by_expr_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_by_expr_args')
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1)
    this.req.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partitions_by_expr_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PartitionsByExprResult(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_get_partitions_by_expr_result.prototype = {}
ThriftHiveMetastore_get_partitions_by_expr_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.PartitionsByExprResult()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.NoSuchObjectException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partitions_by_expr_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_by_expr_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_num_partitions_by_filter_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.filter = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = args.filter
    }
  }
}
ThriftHiveMetastore_get_num_partitions_by_filter_args.prototype = {}
ThriftHiveMetastore_get_num_partitions_by_filter_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRING) {
          this.filter = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_num_partitions_by_filter_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_num_partitions_by_filter_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRING, 3)
    output.writeString(this.filter)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_num_partitions_by_filter_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_get_num_partitions_by_filter_result.prototype = {}
ThriftHiveMetastore_get_num_partitions_by_filter_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.I32) {
          this.success = input.readI32()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.NoSuchObjectException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_num_partitions_by_filter_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_num_partitions_by_filter_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0)
    output.writeI32(this.success)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partitions_by_names_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.names = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.names !== undefined && args.names !== null) {
      this.names = Thrift.copyList(args.names, [null])
    }
  }
}
ThriftHiveMetastore_get_partitions_by_names_args.prototype = {}
ThriftHiveMetastore_get_partitions_by_names_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.LIST) {
          var _size984 = 0
          var _rtmp3988
          this.names = []
          var _etype987 = 0
          _rtmp3988 = input.readListBegin()
          _etype987 = _rtmp3988.etype
          _size984 = _rtmp3988.size
          for (var _i989 = 0; _i989 < _size984; ++_i989)
          {
            var elem990 = null
            elem990 = input.readString()
            this.names.push(elem990)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partitions_by_names_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_by_names_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.names !== null && this.names !== undefined) {
    output.writeFieldBegin('names', Thrift.Type.LIST, 3)
    output.writeListBegin(Thrift.Type.STRING, this.names.length)
    for (var iter991 in this.names)
    {
      if (this.names.hasOwnProperty(iter991))
      {
        iter991 = this.names[iter991]
        output.writeString(iter991)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partitions_by_names_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Partition])
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_get_partitions_by_names_result.prototype = {}
ThriftHiveMetastore_get_partitions_by_names_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size992 = 0
          var _rtmp3996
          this.success = []
          var _etype995 = 0
          _rtmp3996 = input.readListBegin()
          _etype995 = _rtmp3996.etype
          _size992 = _rtmp3996.size
          for (var _i997 = 0; _i997 < _size992; ++_i997)
          {
            var elem998 = null
            elem998 = new ttypes.Partition()
            elem998.read(input)
            this.success.push(elem998)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.NoSuchObjectException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partitions_by_names_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_by_names_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
    for (var iter999 in this.success)
    {
      if (this.success.hasOwnProperty(iter999))
      {
        iter999 = this.success[iter999]
        iter999.write(output)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_alter_partition_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.new_part = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.new_part !== undefined && args.new_part !== null) {
      this.new_part = new ttypes.Partition(args.new_part)
    }
  }
}
ThriftHiveMetastore_alter_partition_args.prototype = {}
ThriftHiveMetastore_alter_partition_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.new_part = new ttypes.Partition()
          this.new_part.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_alter_partition_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_partition_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.new_part !== null && this.new_part !== undefined) {
    output.writeFieldBegin('new_part', Thrift.Type.STRUCT, 3)
    this.new_part.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_alter_partition_result = function(args) {
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.InvalidOperationException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_alter_partition_result.prototype = {}
ThriftHiveMetastore_alter_partition_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.InvalidOperationException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_alter_partition_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_partition_result')
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_alter_partitions_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.new_parts = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.new_parts !== undefined && args.new_parts !== null) {
      this.new_parts = Thrift.copyList(args.new_parts, [ttypes.Partition])
    }
  }
}
ThriftHiveMetastore_alter_partitions_args.prototype = {}
ThriftHiveMetastore_alter_partitions_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.LIST) {
          var _size1000 = 0
          var _rtmp31004
          this.new_parts = []
          var _etype1003 = 0
          _rtmp31004 = input.readListBegin()
          _etype1003 = _rtmp31004.etype
          _size1000 = _rtmp31004.size
          for (var _i1005 = 0; _i1005 < _size1000; ++_i1005)
          {
            var elem1006 = null
            elem1006 = new ttypes.Partition()
            elem1006.read(input)
            this.new_parts.push(elem1006)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_alter_partitions_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_partitions_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.new_parts !== null && this.new_parts !== undefined) {
    output.writeFieldBegin('new_parts', Thrift.Type.LIST, 3)
    output.writeListBegin(Thrift.Type.STRUCT, this.new_parts.length)
    for (var iter1007 in this.new_parts)
    {
      if (this.new_parts.hasOwnProperty(iter1007))
      {
        iter1007 = this.new_parts[iter1007]
        iter1007.write(output)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_alter_partitions_result = function(args) {
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.InvalidOperationException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_alter_partitions_result.prototype = {}
ThriftHiveMetastore_alter_partitions_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.InvalidOperationException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_alter_partitions_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_partitions_result')
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_alter_partitions_with_environment_context_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.new_parts = null
  this.environment_context = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.new_parts !== undefined && args.new_parts !== null) {
      this.new_parts = Thrift.copyList(args.new_parts, [ttypes.Partition])
    }
    if (args.environment_context !== undefined && args.environment_context !== null) {
      this.environment_context = new ttypes.EnvironmentContext(args.environment_context)
    }
  }
}
ThriftHiveMetastore_alter_partitions_with_environment_context_args.prototype = {}
ThriftHiveMetastore_alter_partitions_with_environment_context_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.LIST) {
          var _size1008 = 0
          var _rtmp31012
          this.new_parts = []
          var _etype1011 = 0
          _rtmp31012 = input.readListBegin()
          _etype1011 = _rtmp31012.etype
          _size1008 = _rtmp31012.size
          for (var _i1013 = 0; _i1013 < _size1008; ++_i1013)
          {
            var elem1014 = null
            elem1014 = new ttypes.Partition()
            elem1014.read(input)
            this.new_parts.push(elem1014)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.environment_context = new ttypes.EnvironmentContext()
          this.environment_context.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_alter_partitions_with_environment_context_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_partitions_with_environment_context_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.new_parts !== null && this.new_parts !== undefined) {
    output.writeFieldBegin('new_parts', Thrift.Type.LIST, 3)
    output.writeListBegin(Thrift.Type.STRUCT, this.new_parts.length)
    for (var iter1015 in this.new_parts)
    {
      if (this.new_parts.hasOwnProperty(iter1015))
      {
        iter1015 = this.new_parts[iter1015]
        iter1015.write(output)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.environment_context !== null && this.environment_context !== undefined) {
    output.writeFieldBegin('environment_context', Thrift.Type.STRUCT, 4)
    this.environment_context.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_alter_partitions_with_environment_context_result = function(args) {
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.InvalidOperationException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_alter_partitions_with_environment_context_result.prototype = {}
ThriftHiveMetastore_alter_partitions_with_environment_context_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.InvalidOperationException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_alter_partitions_with_environment_context_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_partitions_with_environment_context_result')
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_alter_partition_with_environment_context_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.new_part = null
  this.environment_context = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.new_part !== undefined && args.new_part !== null) {
      this.new_part = new ttypes.Partition(args.new_part)
    }
    if (args.environment_context !== undefined && args.environment_context !== null) {
      this.environment_context = new ttypes.EnvironmentContext(args.environment_context)
    }
  }
}
ThriftHiveMetastore_alter_partition_with_environment_context_args.prototype = {}
ThriftHiveMetastore_alter_partition_with_environment_context_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.new_part = new ttypes.Partition()
          this.new_part.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.environment_context = new ttypes.EnvironmentContext()
          this.environment_context.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_alter_partition_with_environment_context_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_partition_with_environment_context_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.new_part !== null && this.new_part !== undefined) {
    output.writeFieldBegin('new_part', Thrift.Type.STRUCT, 3)
    this.new_part.write(output)
    output.writeFieldEnd()
  }
  if (this.environment_context !== null && this.environment_context !== undefined) {
    output.writeFieldBegin('environment_context', Thrift.Type.STRUCT, 4)
    this.environment_context.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_alter_partition_with_environment_context_result = function(args) {
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.InvalidOperationException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_alter_partition_with_environment_context_result.prototype = {}
ThriftHiveMetastore_alter_partition_with_environment_context_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.InvalidOperationException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_alter_partition_with_environment_context_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_partition_with_environment_context_result')
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_rename_partition_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.part_vals = null
  this.new_part = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.part_vals !== undefined && args.part_vals !== null) {
      this.part_vals = Thrift.copyList(args.part_vals, [null])
    }
    if (args.new_part !== undefined && args.new_part !== null) {
      this.new_part = new ttypes.Partition(args.new_part)
    }
  }
}
ThriftHiveMetastore_rename_partition_args.prototype = {}
ThriftHiveMetastore_rename_partition_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.LIST) {
          var _size1016 = 0
          var _rtmp31020
          this.part_vals = []
          var _etype1019 = 0
          _rtmp31020 = input.readListBegin()
          _etype1019 = _rtmp31020.etype
          _size1016 = _rtmp31020.size
          for (var _i1021 = 0; _i1021 < _size1016; ++_i1021)
          {
            var elem1022 = null
            elem1022 = input.readString()
            this.part_vals.push(elem1022)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.new_part = new ttypes.Partition()
          this.new_part.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_rename_partition_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_rename_partition_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3)
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length)
    for (var iter1023 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter1023))
      {
        iter1023 = this.part_vals[iter1023]
        output.writeString(iter1023)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.new_part !== null && this.new_part !== undefined) {
    output.writeFieldBegin('new_part', Thrift.Type.STRUCT, 4)
    this.new_part.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_rename_partition_result = function(args) {
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.InvalidOperationException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_rename_partition_result.prototype = {}
ThriftHiveMetastore_rename_partition_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.InvalidOperationException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_rename_partition_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_rename_partition_result')
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_partition_name_has_valid_characters_args = function(args) {
  this.part_vals = null
  this.throw_exception = null
  if (args) {
    if (args.part_vals !== undefined && args.part_vals !== null) {
      this.part_vals = Thrift.copyList(args.part_vals, [null])
    }
    if (args.throw_exception !== undefined && args.throw_exception !== null) {
      this.throw_exception = args.throw_exception
    }
  }
}
ThriftHiveMetastore_partition_name_has_valid_characters_args.prototype = {}
ThriftHiveMetastore_partition_name_has_valid_characters_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size1024 = 0
          var _rtmp31028
          this.part_vals = []
          var _etype1027 = 0
          _rtmp31028 = input.readListBegin()
          _etype1027 = _rtmp31028.etype
          _size1024 = _rtmp31028.size
          for (var _i1029 = 0; _i1029 < _size1024; ++_i1029)
          {
            var elem1030 = null
            elem1030 = input.readString()
            this.part_vals.push(elem1030)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.throw_exception = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_partition_name_has_valid_characters_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_partition_name_has_valid_characters_args')
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 1)
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length)
    for (var iter1031 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter1031))
      {
        iter1031 = this.part_vals[iter1031]
        output.writeString(iter1031)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.throw_exception !== null && this.throw_exception !== undefined) {
    output.writeFieldBegin('throw_exception', Thrift.Type.BOOL, 2)
    output.writeBool(this.throw_exception)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_partition_name_has_valid_characters_result = function(args) {
  this.success = null
  this.o1 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_partition_name_has_valid_characters_result.prototype = {}
ThriftHiveMetastore_partition_name_has_valid_characters_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_partition_name_has_valid_characters_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_partition_name_has_valid_characters_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_config_value_args = function(args) {
  this.name = null
  this.defaultValue = null
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name
    }
    if (args.defaultValue !== undefined && args.defaultValue !== null) {
      this.defaultValue = args.defaultValue
    }
  }
}
ThriftHiveMetastore_get_config_value_args.prototype = {}
ThriftHiveMetastore_get_config_value_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.defaultValue = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_config_value_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_config_value_args')
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1)
    output.writeString(this.name)
    output.writeFieldEnd()
  }
  if (this.defaultValue !== null && this.defaultValue !== undefined) {
    output.writeFieldBegin('defaultValue', Thrift.Type.STRING, 2)
    output.writeString(this.defaultValue)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_config_value_result = function(args) {
  this.success = null
  this.o1 = null
  if (args instanceof ttypes.ConfigValSecurityException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_get_config_value_result.prototype = {}
ThriftHiveMetastore_get_config_value_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.ConfigValSecurityException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_config_value_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_config_value_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0)
    output.writeString(this.success)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_partition_name_to_vals_args = function(args) {
  this.part_name = null
  if (args) {
    if (args.part_name !== undefined && args.part_name !== null) {
      this.part_name = args.part_name
    }
  }
}
ThriftHiveMetastore_partition_name_to_vals_args.prototype = {}
ThriftHiveMetastore_partition_name_to_vals_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.part_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_partition_name_to_vals_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_partition_name_to_vals_args')
  if (this.part_name !== null && this.part_name !== undefined) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 1)
    output.writeString(this.part_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_partition_name_to_vals_result = function(args) {
  this.success = null
  this.o1 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null])
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_partition_name_to_vals_result.prototype = {}
ThriftHiveMetastore_partition_name_to_vals_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size1032 = 0
          var _rtmp31036
          this.success = []
          var _etype1035 = 0
          _rtmp31036 = input.readListBegin()
          _etype1035 = _rtmp31036.etype
          _size1032 = _rtmp31036.size
          for (var _i1037 = 0; _i1037 < _size1032; ++_i1037)
          {
            var elem1038 = null
            elem1038 = input.readString()
            this.success.push(elem1038)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_partition_name_to_vals_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_partition_name_to_vals_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRING, this.success.length)
    for (var iter1039 in this.success)
    {
      if (this.success.hasOwnProperty(iter1039))
      {
        iter1039 = this.success[iter1039]
        output.writeString(iter1039)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_partition_name_to_spec_args = function(args) {
  this.part_name = null
  if (args) {
    if (args.part_name !== undefined && args.part_name !== null) {
      this.part_name = args.part_name
    }
  }
}
ThriftHiveMetastore_partition_name_to_spec_args.prototype = {}
ThriftHiveMetastore_partition_name_to_spec_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.part_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_partition_name_to_spec_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_partition_name_to_spec_args')
  if (this.part_name !== null && this.part_name !== undefined) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 1)
    output.writeString(this.part_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_partition_name_to_spec_result = function(args) {
  this.success = null
  this.o1 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null])
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_partition_name_to_spec_result.prototype = {}
ThriftHiveMetastore_partition_name_to_spec_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1040 = 0
          var _rtmp31044
          this.success = {}
          var _ktype1041 = 0
          var _vtype1042 = 0
          _rtmp31044 = input.readMapBegin()
          _ktype1041 = _rtmp31044.ktype
          _vtype1042 = _rtmp31044.vtype
          _size1040 = _rtmp31044.size
          for (var _i1045 = 0; _i1045 < _size1040; ++_i1045)
          {
            var key1046 = null
            var val1047 = null
            key1046 = input.readString()
            val1047 = input.readString()
            this.success[key1046] = val1047
          }
          input.readMapEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_partition_name_to_spec_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_partition_name_to_spec_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0)
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success))
    for (var kiter1048 in this.success)
    {
      if (this.success.hasOwnProperty(kiter1048))
      {
        var viter1049 = this.success[kiter1048]
        output.writeString(kiter1048)
        output.writeString(viter1049)
      }
    }
    output.writeMapEnd()
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_markPartitionForEvent_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.part_vals = null
  this.eventType = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.part_vals !== undefined && args.part_vals !== null) {
      this.part_vals = Thrift.copyMap(args.part_vals, [null])
    }
    if (args.eventType !== undefined && args.eventType !== null) {
      this.eventType = args.eventType
    }
  }
}
ThriftHiveMetastore_markPartitionForEvent_args.prototype = {}
ThriftHiveMetastore_markPartitionForEvent_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.MAP) {
          var _size1050 = 0
          var _rtmp31054
          this.part_vals = {}
          var _ktype1051 = 0
          var _vtype1052 = 0
          _rtmp31054 = input.readMapBegin()
          _ktype1051 = _rtmp31054.ktype
          _vtype1052 = _rtmp31054.vtype
          _size1050 = _rtmp31054.size
          for (var _i1055 = 0; _i1055 < _size1050; ++_i1055)
          {
            var key1056 = null
            var val1057 = null
            key1056 = input.readString()
            val1057 = input.readString()
            this.part_vals[key1056] = val1057
          }
          input.readMapEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.I32) {
          this.eventType = input.readI32()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_markPartitionForEvent_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_markPartitionForEvent_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.MAP, 3)
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.part_vals))
    for (var kiter1058 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(kiter1058))
      {
        var viter1059 = this.part_vals[kiter1058]
        output.writeString(kiter1058)
        output.writeString(viter1059)
      }
    }
    output.writeMapEnd()
    output.writeFieldEnd()
  }
  if (this.eventType !== null && this.eventType !== undefined) {
    output.writeFieldBegin('eventType', Thrift.Type.I32, 4)
    output.writeI32(this.eventType)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_markPartitionForEvent_result = function(args) {
  this.o1 = null
  this.o2 = null
  this.o3 = null
  this.o4 = null
  this.o5 = null
  this.o6 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.UnknownDBException) {
    this.o3 = args
    return
  }
  if (args instanceof ttypes.UnknownTableException) {
    this.o4 = args
    return
  }
  if (args instanceof ttypes.UnknownPartitionException) {
    this.o5 = args
    return
  }
  if (args instanceof ttypes.InvalidPartitionException) {
    this.o6 = args
    return
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
    if (args.o4 !== undefined && args.o4 !== null) {
      this.o4 = args.o4
    }
    if (args.o5 !== undefined && args.o5 !== null) {
      this.o5 = args.o5
    }
    if (args.o6 !== undefined && args.o6 !== null) {
      this.o6 = args.o6
    }
  }
}
ThriftHiveMetastore_markPartitionForEvent_result.prototype = {}
ThriftHiveMetastore_markPartitionForEvent_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.NoSuchObjectException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.UnknownDBException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.o4 = new ttypes.UnknownTableException()
          this.o4.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.o5 = new ttypes.UnknownPartitionException()
          this.o5.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.o6 = new ttypes.InvalidPartitionException()
          this.o6.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_markPartitionForEvent_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_markPartitionForEvent_result')
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4)
    this.o4.write(output)
    output.writeFieldEnd()
  }
  if (this.o5 !== null && this.o5 !== undefined) {
    output.writeFieldBegin('o5', Thrift.Type.STRUCT, 5)
    this.o5.write(output)
    output.writeFieldEnd()
  }
  if (this.o6 !== null && this.o6 !== undefined) {
    output.writeFieldBegin('o6', Thrift.Type.STRUCT, 6)
    this.o6.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_isPartitionMarkedForEvent_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.part_vals = null
  this.eventType = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.part_vals !== undefined && args.part_vals !== null) {
      this.part_vals = Thrift.copyMap(args.part_vals, [null])
    }
    if (args.eventType !== undefined && args.eventType !== null) {
      this.eventType = args.eventType
    }
  }
}
ThriftHiveMetastore_isPartitionMarkedForEvent_args.prototype = {}
ThriftHiveMetastore_isPartitionMarkedForEvent_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.MAP) {
          var _size1060 = 0
          var _rtmp31064
          this.part_vals = {}
          var _ktype1061 = 0
          var _vtype1062 = 0
          _rtmp31064 = input.readMapBegin()
          _ktype1061 = _rtmp31064.ktype
          _vtype1062 = _rtmp31064.vtype
          _size1060 = _rtmp31064.size
          for (var _i1065 = 0; _i1065 < _size1060; ++_i1065)
          {
            var key1066 = null
            var val1067 = null
            key1066 = input.readString()
            val1067 = input.readString()
            this.part_vals[key1066] = val1067
          }
          input.readMapEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.I32) {
          this.eventType = input.readI32()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_isPartitionMarkedForEvent_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_isPartitionMarkedForEvent_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.MAP, 3)
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.part_vals))
    for (var kiter1068 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(kiter1068))
      {
        var viter1069 = this.part_vals[kiter1068]
        output.writeString(kiter1068)
        output.writeString(viter1069)
      }
    }
    output.writeMapEnd()
    output.writeFieldEnd()
  }
  if (this.eventType !== null && this.eventType !== undefined) {
    output.writeFieldBegin('eventType', Thrift.Type.I32, 4)
    output.writeI32(this.eventType)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_isPartitionMarkedForEvent_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
  this.o4 = null
  this.o5 = null
  this.o6 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.UnknownDBException) {
    this.o3 = args
    return
  }
  if (args instanceof ttypes.UnknownTableException) {
    this.o4 = args
    return
  }
  if (args instanceof ttypes.UnknownPartitionException) {
    this.o5 = args
    return
  }
  if (args instanceof ttypes.InvalidPartitionException) {
    this.o6 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
    if (args.o4 !== undefined && args.o4 !== null) {
      this.o4 = args.o4
    }
    if (args.o5 !== undefined && args.o5 !== null) {
      this.o5 = args.o5
    }
    if (args.o6 !== undefined && args.o6 !== null) {
      this.o6 = args.o6
    }
  }
}
ThriftHiveMetastore_isPartitionMarkedForEvent_result.prototype = {}
ThriftHiveMetastore_isPartitionMarkedForEvent_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.NoSuchObjectException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.UnknownDBException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.o4 = new ttypes.UnknownTableException()
          this.o4.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.o5 = new ttypes.UnknownPartitionException()
          this.o5.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.o6 = new ttypes.InvalidPartitionException()
          this.o6.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_isPartitionMarkedForEvent_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_isPartitionMarkedForEvent_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4)
    this.o4.write(output)
    output.writeFieldEnd()
  }
  if (this.o5 !== null && this.o5 !== undefined) {
    output.writeFieldBegin('o5', Thrift.Type.STRUCT, 5)
    this.o5.write(output)
    output.writeFieldEnd()
  }
  if (this.o6 !== null && this.o6 !== undefined) {
    output.writeFieldBegin('o6', Thrift.Type.STRUCT, 6)
    this.o6.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_add_index_args = function(args) {
  this.new_index = null
  this.index_table = null
  if (args) {
    if (args.new_index !== undefined && args.new_index !== null) {
      this.new_index = new ttypes.Index(args.new_index)
    }
    if (args.index_table !== undefined && args.index_table !== null) {
      this.index_table = new ttypes.Table(args.index_table)
    }
  }
}
ThriftHiveMetastore_add_index_args.prototype = {}
ThriftHiveMetastore_add_index_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.new_index = new ttypes.Index()
          this.new_index.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.index_table = new ttypes.Table()
          this.index_table.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_add_index_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_index_args')
  if (this.new_index !== null && this.new_index !== undefined) {
    output.writeFieldBegin('new_index', Thrift.Type.STRUCT, 1)
    this.new_index.write(output)
    output.writeFieldEnd()
  }
  if (this.index_table !== null && this.index_table !== undefined) {
    output.writeFieldBegin('index_table', Thrift.Type.STRUCT, 2)
    this.index_table.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_add_index_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
  if (args instanceof ttypes.InvalidObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Index(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
  }
}
ThriftHiveMetastore_add_index_result.prototype = {}
ThriftHiveMetastore_add_index_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.Index()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.InvalidObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.AlreadyExistsException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.MetaException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_add_index_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_index_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_alter_index_args = function(args) {
  this.dbname = null
  this.base_tbl_name = null
  this.idx_name = null
  this.new_idx = null
  if (args) {
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname
    }
    if (args.base_tbl_name !== undefined && args.base_tbl_name !== null) {
      this.base_tbl_name = args.base_tbl_name
    }
    if (args.idx_name !== undefined && args.idx_name !== null) {
      this.idx_name = args.idx_name
    }
    if (args.new_idx !== undefined && args.new_idx !== null) {
      this.new_idx = new ttypes.Index(args.new_idx)
    }
  }
}
ThriftHiveMetastore_alter_index_args.prototype = {}
ThriftHiveMetastore_alter_index_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.dbname = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.base_tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRING) {
          this.idx_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.new_idx = new ttypes.Index()
          this.new_idx.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_alter_index_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_index_args')
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1)
    output.writeString(this.dbname)
    output.writeFieldEnd()
  }
  if (this.base_tbl_name !== null && this.base_tbl_name !== undefined) {
    output.writeFieldBegin('base_tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.base_tbl_name)
    output.writeFieldEnd()
  }
  if (this.idx_name !== null && this.idx_name !== undefined) {
    output.writeFieldBegin('idx_name', Thrift.Type.STRING, 3)
    output.writeString(this.idx_name)
    output.writeFieldEnd()
  }
  if (this.new_idx !== null && this.new_idx !== undefined) {
    output.writeFieldBegin('new_idx', Thrift.Type.STRUCT, 4)
    this.new_idx.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_alter_index_result = function(args) {
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.InvalidOperationException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_alter_index_result.prototype = {}
ThriftHiveMetastore_alter_index_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.InvalidOperationException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_alter_index_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_index_result')
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_index_by_name_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.index_name = null
  this.deleteData = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.index_name !== undefined && args.index_name !== null) {
      this.index_name = args.index_name
    }
    if (args.deleteData !== undefined && args.deleteData !== null) {
      this.deleteData = args.deleteData
    }
  }
}
ThriftHiveMetastore_drop_index_by_name_args.prototype = {}
ThriftHiveMetastore_drop_index_by_name_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRING) {
          this.index_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.deleteData = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_index_by_name_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_index_by_name_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.index_name !== null && this.index_name !== undefined) {
    output.writeFieldBegin('index_name', Thrift.Type.STRING, 3)
    output.writeString(this.index_name)
    output.writeFieldEnd()
  }
  if (this.deleteData !== null && this.deleteData !== undefined) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 4)
    output.writeBool(this.deleteData)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_index_by_name_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_drop_index_by_name_result.prototype = {}
ThriftHiveMetastore_drop_index_by_name_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_index_by_name_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_index_by_name_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_index_by_name_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.index_name = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.index_name !== undefined && args.index_name !== null) {
      this.index_name = args.index_name
    }
  }
}
ThriftHiveMetastore_get_index_by_name_args.prototype = {}
ThriftHiveMetastore_get_index_by_name_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRING) {
          this.index_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_index_by_name_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_index_by_name_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.index_name !== null && this.index_name !== undefined) {
    output.writeFieldBegin('index_name', Thrift.Type.STRING, 3)
    output.writeString(this.index_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_index_by_name_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Index(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_get_index_by_name_result.prototype = {}
ThriftHiveMetastore_get_index_by_name_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.Index()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.NoSuchObjectException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_index_by_name_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_index_by_name_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_indexes_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.max_indexes = -1
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.max_indexes !== undefined && args.max_indexes !== null) {
      this.max_indexes = args.max_indexes
    }
  }
}
ThriftHiveMetastore_get_indexes_args.prototype = {}
ThriftHiveMetastore_get_indexes_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.I16) {
          this.max_indexes = input.readI16()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_indexes_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_indexes_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.max_indexes !== null && this.max_indexes !== undefined) {
    output.writeFieldBegin('max_indexes', Thrift.Type.I16, 3)
    output.writeI16(this.max_indexes)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_indexes_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Index])
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_get_indexes_result.prototype = {}
ThriftHiveMetastore_get_indexes_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size1070 = 0
          var _rtmp31074
          this.success = []
          var _etype1073 = 0
          _rtmp31074 = input.readListBegin()
          _etype1073 = _rtmp31074.etype
          _size1070 = _rtmp31074.size
          for (var _i1075 = 0; _i1075 < _size1070; ++_i1075)
          {
            var elem1076 = null
            elem1076 = new ttypes.Index()
            elem1076.read(input)
            this.success.push(elem1076)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_indexes_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_indexes_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
    for (var iter1077 in this.success)
    {
      if (this.success.hasOwnProperty(iter1077))
      {
        iter1077 = this.success[iter1077]
        iter1077.write(output)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_index_names_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.max_indexes = -1
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.max_indexes !== undefined && args.max_indexes !== null) {
      this.max_indexes = args.max_indexes
    }
  }
}
ThriftHiveMetastore_get_index_names_args.prototype = {}
ThriftHiveMetastore_get_index_names_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.I16) {
          this.max_indexes = input.readI16()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_index_names_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_index_names_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.max_indexes !== null && this.max_indexes !== undefined) {
    output.writeFieldBegin('max_indexes', Thrift.Type.I16, 3)
    output.writeI16(this.max_indexes)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_index_names_result = function(args) {
  this.success = null
  this.o2 = null
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null])
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_get_index_names_result.prototype = {}
ThriftHiveMetastore_get_index_names_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size1078 = 0
          var _rtmp31082
          this.success = []
          var _etype1081 = 0
          _rtmp31082 = input.readListBegin()
          _etype1081 = _rtmp31082.etype
          _size1078 = _rtmp31082.size
          for (var _i1083 = 0; _i1083 < _size1078; ++_i1083)
          {
            var elem1084 = null
            elem1084 = input.readString()
            this.success.push(elem1084)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_index_names_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_index_names_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRING, this.success.length)
    for (var iter1085 in this.success)
    {
      if (this.success.hasOwnProperty(iter1085))
      {
        iter1085 = this.success[iter1085]
        output.writeString(iter1085)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 1)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_primary_keys_args = function(args) {
  this.request = null
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.PrimaryKeysRequest(args.request)
    }
  }
}
ThriftHiveMetastore_get_primary_keys_args.prototype = {}
ThriftHiveMetastore_get_primary_keys_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.request = new ttypes.PrimaryKeysRequest()
          this.request.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_primary_keys_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_primary_keys_args')
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1)
    this.request.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_primary_keys_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PrimaryKeysResponse(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_get_primary_keys_result.prototype = {}
ThriftHiveMetastore_get_primary_keys_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.PrimaryKeysResponse()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.NoSuchObjectException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_primary_keys_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_primary_keys_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_foreign_keys_args = function(args) {
  this.request = null
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.ForeignKeysRequest(args.request)
    }
  }
}
ThriftHiveMetastore_get_foreign_keys_args.prototype = {}
ThriftHiveMetastore_get_foreign_keys_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.request = new ttypes.ForeignKeysRequest()
          this.request.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_foreign_keys_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_foreign_keys_args')
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1)
    this.request.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_foreign_keys_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ForeignKeysResponse(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_get_foreign_keys_result.prototype = {}
ThriftHiveMetastore_get_foreign_keys_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.ForeignKeysResponse()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.NoSuchObjectException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_foreign_keys_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_foreign_keys_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_update_table_column_statistics_args = function(args) {
  this.stats_obj = null
  if (args) {
    if (args.stats_obj !== undefined && args.stats_obj !== null) {
      this.stats_obj = new ttypes.ColumnStatistics(args.stats_obj)
    }
  }
}
ThriftHiveMetastore_update_table_column_statistics_args.prototype = {}
ThriftHiveMetastore_update_table_column_statistics_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.stats_obj = new ttypes.ColumnStatistics()
          this.stats_obj.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_update_table_column_statistics_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_update_table_column_statistics_args')
  if (this.stats_obj !== null && this.stats_obj !== undefined) {
    output.writeFieldBegin('stats_obj', Thrift.Type.STRUCT, 1)
    this.stats_obj.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_update_table_column_statistics_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
  this.o4 = null
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args
    return
  }
  if (args instanceof ttypes.InvalidInputException) {
    this.o4 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
    if (args.o4 !== undefined && args.o4 !== null) {
      this.o4 = args.o4
    }
  }
}
ThriftHiveMetastore_update_table_column_statistics_result.prototype = {}
ThriftHiveMetastore_update_table_column_statistics_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.InvalidObjectException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.MetaException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.o4 = new ttypes.InvalidInputException()
          this.o4.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_update_table_column_statistics_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_update_table_column_statistics_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4)
    this.o4.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_update_partition_column_statistics_args = function(args) {
  this.stats_obj = null
  if (args) {
    if (args.stats_obj !== undefined && args.stats_obj !== null) {
      this.stats_obj = new ttypes.ColumnStatistics(args.stats_obj)
    }
  }
}
ThriftHiveMetastore_update_partition_column_statistics_args.prototype = {}
ThriftHiveMetastore_update_partition_column_statistics_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.stats_obj = new ttypes.ColumnStatistics()
          this.stats_obj.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_update_partition_column_statistics_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_update_partition_column_statistics_args')
  if (this.stats_obj !== null && this.stats_obj !== undefined) {
    output.writeFieldBegin('stats_obj', Thrift.Type.STRUCT, 1)
    this.stats_obj.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_update_partition_column_statistics_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
  this.o4 = null
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args
    return
  }
  if (args instanceof ttypes.InvalidInputException) {
    this.o4 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
    if (args.o4 !== undefined && args.o4 !== null) {
      this.o4 = args.o4
    }
  }
}
ThriftHiveMetastore_update_partition_column_statistics_result.prototype = {}
ThriftHiveMetastore_update_partition_column_statistics_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.InvalidObjectException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.MetaException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.o4 = new ttypes.InvalidInputException()
          this.o4.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_update_partition_column_statistics_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_update_partition_column_statistics_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4)
    this.o4.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_table_column_statistics_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.col_name = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.col_name !== undefined && args.col_name !== null) {
      this.col_name = args.col_name
    }
  }
}
ThriftHiveMetastore_get_table_column_statistics_args.prototype = {}
ThriftHiveMetastore_get_table_column_statistics_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRING) {
          this.col_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_table_column_statistics_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_table_column_statistics_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.col_name !== null && this.col_name !== undefined) {
    output.writeFieldBegin('col_name', Thrift.Type.STRING, 3)
    output.writeString(this.col_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_table_column_statistics_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
  this.o4 = null
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.InvalidInputException) {
    this.o3 = args
    return
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o4 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ColumnStatistics(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
    if (args.o4 !== undefined && args.o4 !== null) {
      this.o4 = args.o4
    }
  }
}
ThriftHiveMetastore_get_table_column_statistics_result.prototype = {}
ThriftHiveMetastore_get_table_column_statistics_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.ColumnStatistics()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.InvalidInputException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.o4 = new ttypes.InvalidObjectException()
          this.o4.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_table_column_statistics_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_table_column_statistics_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4)
    this.o4.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partition_column_statistics_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.part_name = null
  this.col_name = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.part_name !== undefined && args.part_name !== null) {
      this.part_name = args.part_name
    }
    if (args.col_name !== undefined && args.col_name !== null) {
      this.col_name = args.col_name
    }
  }
}
ThriftHiveMetastore_get_partition_column_statistics_args.prototype = {}
ThriftHiveMetastore_get_partition_column_statistics_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRING) {
          this.part_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.STRING) {
          this.col_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partition_column_statistics_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_column_statistics_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.part_name !== null && this.part_name !== undefined) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 3)
    output.writeString(this.part_name)
    output.writeFieldEnd()
  }
  if (this.col_name !== null && this.col_name !== undefined) {
    output.writeFieldBegin('col_name', Thrift.Type.STRING, 4)
    output.writeString(this.col_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partition_column_statistics_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
  this.o4 = null
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.InvalidInputException) {
    this.o3 = args
    return
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o4 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ColumnStatistics(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
    if (args.o4 !== undefined && args.o4 !== null) {
      this.o4 = args.o4
    }
  }
}
ThriftHiveMetastore_get_partition_column_statistics_result.prototype = {}
ThriftHiveMetastore_get_partition_column_statistics_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.ColumnStatistics()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.InvalidInputException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.o4 = new ttypes.InvalidObjectException()
          this.o4.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partition_column_statistics_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_column_statistics_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4)
    this.o4.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_table_statistics_req_args = function(args) {
  this.request = null
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.TableStatsRequest(args.request)
    }
  }
}
ThriftHiveMetastore_get_table_statistics_req_args.prototype = {}
ThriftHiveMetastore_get_table_statistics_req_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.request = new ttypes.TableStatsRequest()
          this.request.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_table_statistics_req_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_table_statistics_req_args')
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1)
    this.request.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_table_statistics_req_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TableStatsResult(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_get_table_statistics_req_result.prototype = {}
ThriftHiveMetastore_get_table_statistics_req_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.TableStatsResult()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_table_statistics_req_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_table_statistics_req_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partitions_statistics_req_args = function(args) {
  this.request = null
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.PartitionsStatsRequest(args.request)
    }
  }
}
ThriftHiveMetastore_get_partitions_statistics_req_args.prototype = {}
ThriftHiveMetastore_get_partitions_statistics_req_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.request = new ttypes.PartitionsStatsRequest()
          this.request.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partitions_statistics_req_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_statistics_req_args')
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1)
    this.request.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partitions_statistics_req_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PartitionsStatsResult(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_get_partitions_statistics_req_result.prototype = {}
ThriftHiveMetastore_get_partitions_statistics_req_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.PartitionsStatsResult()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partitions_statistics_req_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_statistics_req_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_aggr_stats_for_args = function(args) {
  this.request = null
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.PartitionsStatsRequest(args.request)
    }
  }
}
ThriftHiveMetastore_get_aggr_stats_for_args.prototype = {}
ThriftHiveMetastore_get_aggr_stats_for_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.request = new ttypes.PartitionsStatsRequest()
          this.request.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_aggr_stats_for_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_aggr_stats_for_args')
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1)
    this.request.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_aggr_stats_for_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AggrStats(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_get_aggr_stats_for_result.prototype = {}
ThriftHiveMetastore_get_aggr_stats_for_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.AggrStats()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_aggr_stats_for_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_aggr_stats_for_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_set_aggr_stats_for_args = function(args) {
  this.request = null
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.SetPartitionsStatsRequest(args.request)
    }
  }
}
ThriftHiveMetastore_set_aggr_stats_for_args.prototype = {}
ThriftHiveMetastore_set_aggr_stats_for_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.request = new ttypes.SetPartitionsStatsRequest()
          this.request.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_set_aggr_stats_for_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_set_aggr_stats_for_args')
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1)
    this.request.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_set_aggr_stats_for_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
  this.o4 = null
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args
    return
  }
  if (args instanceof ttypes.InvalidInputException) {
    this.o4 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
    if (args.o4 !== undefined && args.o4 !== null) {
      this.o4 = args.o4
    }
  }
}
ThriftHiveMetastore_set_aggr_stats_for_result.prototype = {}
ThriftHiveMetastore_set_aggr_stats_for_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.InvalidObjectException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.MetaException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.o4 = new ttypes.InvalidInputException()
          this.o4.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_set_aggr_stats_for_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_set_aggr_stats_for_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4)
    this.o4.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_delete_partition_column_statistics_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.part_name = null
  this.col_name = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.part_name !== undefined && args.part_name !== null) {
      this.part_name = args.part_name
    }
    if (args.col_name !== undefined && args.col_name !== null) {
      this.col_name = args.col_name
    }
  }
}
ThriftHiveMetastore_delete_partition_column_statistics_args.prototype = {}
ThriftHiveMetastore_delete_partition_column_statistics_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRING) {
          this.part_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.STRING) {
          this.col_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_delete_partition_column_statistics_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_delete_partition_column_statistics_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.part_name !== null && this.part_name !== undefined) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 3)
    output.writeString(this.part_name)
    output.writeFieldEnd()
  }
  if (this.col_name !== null && this.col_name !== undefined) {
    output.writeFieldBegin('col_name', Thrift.Type.STRING, 4)
    output.writeString(this.col_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_delete_partition_column_statistics_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
  this.o4 = null
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o3 = args
    return
  }
  if (args instanceof ttypes.InvalidInputException) {
    this.o4 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
    if (args.o4 !== undefined && args.o4 !== null) {
      this.o4 = args.o4
    }
  }
}
ThriftHiveMetastore_delete_partition_column_statistics_result.prototype = {}
ThriftHiveMetastore_delete_partition_column_statistics_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.InvalidObjectException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.o4 = new ttypes.InvalidInputException()
          this.o4.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_delete_partition_column_statistics_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_delete_partition_column_statistics_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4)
    this.o4.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_delete_table_column_statistics_args = function(args) {
  this.db_name = null
  this.tbl_name = null
  this.col_name = null
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name
    }
    if (args.col_name !== undefined && args.col_name !== null) {
      this.col_name = args.col_name
    }
  }
}
ThriftHiveMetastore_delete_table_column_statistics_args.prototype = {}
ThriftHiveMetastore_delete_table_column_statistics_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.db_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tbl_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRING) {
          this.col_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_delete_table_column_statistics_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_delete_table_column_statistics_args')
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (this.col_name !== null && this.col_name !== undefined) {
    output.writeFieldBegin('col_name', Thrift.Type.STRING, 3)
    output.writeString(this.col_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_delete_table_column_statistics_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
  this.o4 = null
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o3 = args
    return
  }
  if (args instanceof ttypes.InvalidInputException) {
    this.o4 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
    if (args.o4 !== undefined && args.o4 !== null) {
      this.o4 = args.o4
    }
  }
}
ThriftHiveMetastore_delete_table_column_statistics_result.prototype = {}
ThriftHiveMetastore_delete_table_column_statistics_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.InvalidObjectException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.o4 = new ttypes.InvalidInputException()
          this.o4.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_delete_table_column_statistics_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_delete_table_column_statistics_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4)
    this.o4.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_create_function_args = function(args) {
  this.func = null
  if (args) {
    if (args.func !== undefined && args.func !== null) {
      this.func = new ttypes.Function(args.func)
    }
  }
}
ThriftHiveMetastore_create_function_args.prototype = {}
ThriftHiveMetastore_create_function_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.func = new ttypes.Function()
          this.func.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_create_function_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_function_args')
  if (this.func !== null && this.func !== undefined) {
    output.writeFieldBegin('func', Thrift.Type.STRUCT, 1)
    this.func.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_create_function_result = function(args) {
  this.o1 = null
  this.o2 = null
  this.o3 = null
  this.o4 = null
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args
    return
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o4 = args
    return
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
    if (args.o4 !== undefined && args.o4 !== null) {
      this.o4 = args.o4
    }
  }
}
ThriftHiveMetastore_create_function_result.prototype = {}
ThriftHiveMetastore_create_function_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.AlreadyExistsException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.InvalidObjectException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.MetaException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.o4 = new ttypes.NoSuchObjectException()
          this.o4.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_create_function_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_function_result')
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4)
    this.o4.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_function_args = function(args) {
  this.dbName = null
  this.funcName = null
  if (args) {
    if (args.dbName !== undefined && args.dbName !== null) {
      this.dbName = args.dbName
    }
    if (args.funcName !== undefined && args.funcName !== null) {
      this.funcName = args.funcName
    }
  }
}
ThriftHiveMetastore_drop_function_args.prototype = {}
ThriftHiveMetastore_drop_function_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.dbName = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.funcName = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_function_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_function_args')
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 1)
    output.writeString(this.dbName)
    output.writeFieldEnd()
  }
  if (this.funcName !== null && this.funcName !== undefined) {
    output.writeFieldBegin('funcName', Thrift.Type.STRING, 2)
    output.writeString(this.funcName)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_function_result = function(args) {
  this.o1 = null
  this.o3 = null
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args
    return
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
  }
}
ThriftHiveMetastore_drop_function_result.prototype = {}
ThriftHiveMetastore_drop_function_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.MetaException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_function_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_function_result')
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 2)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_alter_function_args = function(args) {
  this.dbName = null
  this.funcName = null
  this.newFunc = null
  if (args) {
    if (args.dbName !== undefined && args.dbName !== null) {
      this.dbName = args.dbName
    }
    if (args.funcName !== undefined && args.funcName !== null) {
      this.funcName = args.funcName
    }
    if (args.newFunc !== undefined && args.newFunc !== null) {
      this.newFunc = new ttypes.Function(args.newFunc)
    }
  }
}
ThriftHiveMetastore_alter_function_args.prototype = {}
ThriftHiveMetastore_alter_function_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.dbName = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.funcName = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.newFunc = new ttypes.Function()
          this.newFunc.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_alter_function_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_function_args')
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 1)
    output.writeString(this.dbName)
    output.writeFieldEnd()
  }
  if (this.funcName !== null && this.funcName !== undefined) {
    output.writeFieldBegin('funcName', Thrift.Type.STRING, 2)
    output.writeString(this.funcName)
    output.writeFieldEnd()
  }
  if (this.newFunc !== null && this.newFunc !== undefined) {
    output.writeFieldBegin('newFunc', Thrift.Type.STRUCT, 3)
    this.newFunc.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_alter_function_result = function(args) {
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.InvalidOperationException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_alter_function_result.prototype = {}
ThriftHiveMetastore_alter_function_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.InvalidOperationException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_alter_function_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_function_result')
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_functions_args = function(args) {
  this.dbName = null
  this.pattern = null
  if (args) {
    if (args.dbName !== undefined && args.dbName !== null) {
      this.dbName = args.dbName
    }
    if (args.pattern !== undefined && args.pattern !== null) {
      this.pattern = args.pattern
    }
  }
}
ThriftHiveMetastore_get_functions_args.prototype = {}
ThriftHiveMetastore_get_functions_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.dbName = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.pattern = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_functions_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_functions_args')
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 1)
    output.writeString(this.dbName)
    output.writeFieldEnd()
  }
  if (this.pattern !== null && this.pattern !== undefined) {
    output.writeFieldBegin('pattern', Thrift.Type.STRING, 2)
    output.writeString(this.pattern)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_functions_result = function(args) {
  this.success = null
  this.o1 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null])
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_get_functions_result.prototype = {}
ThriftHiveMetastore_get_functions_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size1086 = 0
          var _rtmp31090
          this.success = []
          var _etype1089 = 0
          _rtmp31090 = input.readListBegin()
          _etype1089 = _rtmp31090.etype
          _size1086 = _rtmp31090.size
          for (var _i1091 = 0; _i1091 < _size1086; ++_i1091)
          {
            var elem1092 = null
            elem1092 = input.readString()
            this.success.push(elem1092)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_functions_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_functions_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRING, this.success.length)
    for (var iter1093 in this.success)
    {
      if (this.success.hasOwnProperty(iter1093))
      {
        iter1093 = this.success[iter1093]
        output.writeString(iter1093)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_function_args = function(args) {
  this.dbName = null
  this.funcName = null
  if (args) {
    if (args.dbName !== undefined && args.dbName !== null) {
      this.dbName = args.dbName
    }
    if (args.funcName !== undefined && args.funcName !== null) {
      this.funcName = args.funcName
    }
  }
}
ThriftHiveMetastore_get_function_args.prototype = {}
ThriftHiveMetastore_get_function_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.dbName = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.funcName = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_function_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_function_args')
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 1)
    output.writeString(this.dbName)
    output.writeFieldEnd()
  }
  if (this.funcName !== null && this.funcName !== undefined) {
    output.writeFieldBegin('funcName', Thrift.Type.STRING, 2)
    output.writeString(this.funcName)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_function_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Function(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_get_function_result.prototype = {}
ThriftHiveMetastore_get_function_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.Function()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.NoSuchObjectException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_function_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_function_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_all_functions_args = function(args) {
}
ThriftHiveMetastore_get_all_functions_args.prototype = {}
ThriftHiveMetastore_get_all_functions_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    input.skip(ftype)
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_all_functions_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_all_functions_args')
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_all_functions_result = function(args) {
  this.success = null
  this.o1 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.GetAllFunctionsResponse(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_get_all_functions_result.prototype = {}
ThriftHiveMetastore_get_all_functions_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.GetAllFunctionsResponse()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_all_functions_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_all_functions_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_create_role_args = function(args) {
  this.role = null
  if (args) {
    if (args.role !== undefined && args.role !== null) {
      this.role = new ttypes.Role(args.role)
    }
  }
}
ThriftHiveMetastore_create_role_args.prototype = {}
ThriftHiveMetastore_create_role_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.role = new ttypes.Role()
          this.role.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_create_role_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_role_args')
  if (this.role !== null && this.role !== undefined) {
    output.writeFieldBegin('role', Thrift.Type.STRUCT, 1)
    this.role.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_create_role_result = function(args) {
  this.success = null
  this.o1 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_create_role_result.prototype = {}
ThriftHiveMetastore_create_role_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_create_role_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_role_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_role_args = function(args) {
  this.role_name = null
  if (args) {
    if (args.role_name !== undefined && args.role_name !== null) {
      this.role_name = args.role_name
    }
  }
}
ThriftHiveMetastore_drop_role_args.prototype = {}
ThriftHiveMetastore_drop_role_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.role_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_role_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_role_args')
  if (this.role_name !== null && this.role_name !== undefined) {
    output.writeFieldBegin('role_name', Thrift.Type.STRING, 1)
    output.writeString(this.role_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_role_result = function(args) {
  this.success = null
  this.o1 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_drop_role_result.prototype = {}
ThriftHiveMetastore_drop_role_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_role_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_role_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_role_names_args = function(args) {
}
ThriftHiveMetastore_get_role_names_args.prototype = {}
ThriftHiveMetastore_get_role_names_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    input.skip(ftype)
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_role_names_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_role_names_args')
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_role_names_result = function(args) {
  this.success = null
  this.o1 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null])
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_get_role_names_result.prototype = {}
ThriftHiveMetastore_get_role_names_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size1094 = 0
          var _rtmp31098
          this.success = []
          var _etype1097 = 0
          _rtmp31098 = input.readListBegin()
          _etype1097 = _rtmp31098.etype
          _size1094 = _rtmp31098.size
          for (var _i1099 = 0; _i1099 < _size1094; ++_i1099)
          {
            var elem1100 = null
            elem1100 = input.readString()
            this.success.push(elem1100)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_role_names_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_role_names_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRING, this.success.length)
    for (var iter1101 in this.success)
    {
      if (this.success.hasOwnProperty(iter1101))
      {
        iter1101 = this.success[iter1101]
        output.writeString(iter1101)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_grant_role_args = function(args) {
  this.role_name = null
  this.principal_name = null
  this.principal_type = null
  this.grantor = null
  this.grantorType = null
  this.grant_option = null
  if (args) {
    if (args.role_name !== undefined && args.role_name !== null) {
      this.role_name = args.role_name
    }
    if (args.principal_name !== undefined && args.principal_name !== null) {
      this.principal_name = args.principal_name
    }
    if (args.principal_type !== undefined && args.principal_type !== null) {
      this.principal_type = args.principal_type
    }
    if (args.grantor !== undefined && args.grantor !== null) {
      this.grantor = args.grantor
    }
    if (args.grantorType !== undefined && args.grantorType !== null) {
      this.grantorType = args.grantorType
    }
    if (args.grant_option !== undefined && args.grant_option !== null) {
      this.grant_option = args.grant_option
    }
  }
}
ThriftHiveMetastore_grant_role_args.prototype = {}
ThriftHiveMetastore_grant_role_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.role_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.principal_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.I32) {
          this.principal_type = input.readI32()
        } else {
          input.skip(ftype)
        }
        break
      case 4:
        if (ftype == Thrift.Type.STRING) {
          this.grantor = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 5:
        if (ftype == Thrift.Type.I32) {
          this.grantorType = input.readI32()
        } else {
          input.skip(ftype)
        }
        break
      case 6:
        if (ftype == Thrift.Type.BOOL) {
          this.grant_option = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_grant_role_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_grant_role_args')
  if (this.role_name !== null && this.role_name !== undefined) {
    output.writeFieldBegin('role_name', Thrift.Type.STRING, 1)
    output.writeString(this.role_name)
    output.writeFieldEnd()
  }
  if (this.principal_name !== null && this.principal_name !== undefined) {
    output.writeFieldBegin('principal_name', Thrift.Type.STRING, 2)
    output.writeString(this.principal_name)
    output.writeFieldEnd()
  }
  if (this.principal_type !== null && this.principal_type !== undefined) {
    output.writeFieldBegin('principal_type', Thrift.Type.I32, 3)
    output.writeI32(this.principal_type)
    output.writeFieldEnd()
  }
  if (this.grantor !== null && this.grantor !== undefined) {
    output.writeFieldBegin('grantor', Thrift.Type.STRING, 4)
    output.writeString(this.grantor)
    output.writeFieldEnd()
  }
  if (this.grantorType !== null && this.grantorType !== undefined) {
    output.writeFieldBegin('grantorType', Thrift.Type.I32, 5)
    output.writeI32(this.grantorType)
    output.writeFieldEnd()
  }
  if (this.grant_option !== null && this.grant_option !== undefined) {
    output.writeFieldBegin('grant_option', Thrift.Type.BOOL, 6)
    output.writeBool(this.grant_option)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_grant_role_result = function(args) {
  this.success = null
  this.o1 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_grant_role_result.prototype = {}
ThriftHiveMetastore_grant_role_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_grant_role_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_grant_role_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_revoke_role_args = function(args) {
  this.role_name = null
  this.principal_name = null
  this.principal_type = null
  if (args) {
    if (args.role_name !== undefined && args.role_name !== null) {
      this.role_name = args.role_name
    }
    if (args.principal_name !== undefined && args.principal_name !== null) {
      this.principal_name = args.principal_name
    }
    if (args.principal_type !== undefined && args.principal_type !== null) {
      this.principal_type = args.principal_type
    }
  }
}
ThriftHiveMetastore_revoke_role_args.prototype = {}
ThriftHiveMetastore_revoke_role_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.role_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.principal_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.I32) {
          this.principal_type = input.readI32()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_revoke_role_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_revoke_role_args')
  if (this.role_name !== null && this.role_name !== undefined) {
    output.writeFieldBegin('role_name', Thrift.Type.STRING, 1)
    output.writeString(this.role_name)
    output.writeFieldEnd()
  }
  if (this.principal_name !== null && this.principal_name !== undefined) {
    output.writeFieldBegin('principal_name', Thrift.Type.STRING, 2)
    output.writeString(this.principal_name)
    output.writeFieldEnd()
  }
  if (this.principal_type !== null && this.principal_type !== undefined) {
    output.writeFieldBegin('principal_type', Thrift.Type.I32, 3)
    output.writeI32(this.principal_type)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_revoke_role_result = function(args) {
  this.success = null
  this.o1 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_revoke_role_result.prototype = {}
ThriftHiveMetastore_revoke_role_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_revoke_role_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_revoke_role_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_list_roles_args = function(args) {
  this.principal_name = null
  this.principal_type = null
  if (args) {
    if (args.principal_name !== undefined && args.principal_name !== null) {
      this.principal_name = args.principal_name
    }
    if (args.principal_type !== undefined && args.principal_type !== null) {
      this.principal_type = args.principal_type
    }
  }
}
ThriftHiveMetastore_list_roles_args.prototype = {}
ThriftHiveMetastore_list_roles_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.principal_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.I32) {
          this.principal_type = input.readI32()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_list_roles_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_list_roles_args')
  if (this.principal_name !== null && this.principal_name !== undefined) {
    output.writeFieldBegin('principal_name', Thrift.Type.STRING, 1)
    output.writeString(this.principal_name)
    output.writeFieldEnd()
  }
  if (this.principal_type !== null && this.principal_type !== undefined) {
    output.writeFieldBegin('principal_type', Thrift.Type.I32, 2)
    output.writeI32(this.principal_type)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_list_roles_result = function(args) {
  this.success = null
  this.o1 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Role])
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_list_roles_result.prototype = {}
ThriftHiveMetastore_list_roles_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size1102 = 0
          var _rtmp31106
          this.success = []
          var _etype1105 = 0
          _rtmp31106 = input.readListBegin()
          _etype1105 = _rtmp31106.etype
          _size1102 = _rtmp31106.size
          for (var _i1107 = 0; _i1107 < _size1102; ++_i1107)
          {
            var elem1108 = null
            elem1108 = new ttypes.Role()
            elem1108.read(input)
            this.success.push(elem1108)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_list_roles_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_list_roles_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
    for (var iter1109 in this.success)
    {
      if (this.success.hasOwnProperty(iter1109))
      {
        iter1109 = this.success[iter1109]
        iter1109.write(output)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_grant_revoke_role_args = function(args) {
  this.request = null
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GrantRevokeRoleRequest(args.request)
    }
  }
}
ThriftHiveMetastore_grant_revoke_role_args.prototype = {}
ThriftHiveMetastore_grant_revoke_role_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.request = new ttypes.GrantRevokeRoleRequest()
          this.request.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_grant_revoke_role_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_grant_revoke_role_args')
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1)
    this.request.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_grant_revoke_role_result = function(args) {
  this.success = null
  this.o1 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.GrantRevokeRoleResponse(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_grant_revoke_role_result.prototype = {}
ThriftHiveMetastore_grant_revoke_role_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.GrantRevokeRoleResponse()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_grant_revoke_role_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_grant_revoke_role_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_principals_in_role_args = function(args) {
  this.request = null
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetPrincipalsInRoleRequest(args.request)
    }
  }
}
ThriftHiveMetastore_get_principals_in_role_args.prototype = {}
ThriftHiveMetastore_get_principals_in_role_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.request = new ttypes.GetPrincipalsInRoleRequest()
          this.request.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_principals_in_role_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_principals_in_role_args')
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1)
    this.request.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_principals_in_role_result = function(args) {
  this.success = null
  this.o1 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.GetPrincipalsInRoleResponse(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_get_principals_in_role_result.prototype = {}
ThriftHiveMetastore_get_principals_in_role_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.GetPrincipalsInRoleResponse()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_principals_in_role_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_principals_in_role_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_role_grants_for_principal_args = function(args) {
  this.request = null
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetRoleGrantsForPrincipalRequest(args.request)
    }
  }
}
ThriftHiveMetastore_get_role_grants_for_principal_args.prototype = {}
ThriftHiveMetastore_get_role_grants_for_principal_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.request = new ttypes.GetRoleGrantsForPrincipalRequest()
          this.request.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_role_grants_for_principal_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_role_grants_for_principal_args')
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1)
    this.request.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_role_grants_for_principal_result = function(args) {
  this.success = null
  this.o1 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.GetRoleGrantsForPrincipalResponse(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_get_role_grants_for_principal_result.prototype = {}
ThriftHiveMetastore_get_role_grants_for_principal_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.GetRoleGrantsForPrincipalResponse()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_role_grants_for_principal_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_role_grants_for_principal_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_privilege_set_args = function(args) {
  this.hiveObject = null
  this.user_name = null
  this.group_names = null
  if (args) {
    if (args.hiveObject !== undefined && args.hiveObject !== null) {
      this.hiveObject = new ttypes.HiveObjectRef(args.hiveObject)
    }
    if (args.user_name !== undefined && args.user_name !== null) {
      this.user_name = args.user_name
    }
    if (args.group_names !== undefined && args.group_names !== null) {
      this.group_names = Thrift.copyList(args.group_names, [null])
    }
  }
}
ThriftHiveMetastore_get_privilege_set_args.prototype = {}
ThriftHiveMetastore_get_privilege_set_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.hiveObject = new ttypes.HiveObjectRef()
          this.hiveObject.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.user_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.LIST) {
          var _size1110 = 0
          var _rtmp31114
          this.group_names = []
          var _etype1113 = 0
          _rtmp31114 = input.readListBegin()
          _etype1113 = _rtmp31114.etype
          _size1110 = _rtmp31114.size
          for (var _i1115 = 0; _i1115 < _size1110; ++_i1115)
          {
            var elem1116 = null
            elem1116 = input.readString()
            this.group_names.push(elem1116)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_privilege_set_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_privilege_set_args')
  if (this.hiveObject !== null && this.hiveObject !== undefined) {
    output.writeFieldBegin('hiveObject', Thrift.Type.STRUCT, 1)
    this.hiveObject.write(output)
    output.writeFieldEnd()
  }
  if (this.user_name !== null && this.user_name !== undefined) {
    output.writeFieldBegin('user_name', Thrift.Type.STRING, 2)
    output.writeString(this.user_name)
    output.writeFieldEnd()
  }
  if (this.group_names !== null && this.group_names !== undefined) {
    output.writeFieldBegin('group_names', Thrift.Type.LIST, 3)
    output.writeListBegin(Thrift.Type.STRING, this.group_names.length)
    for (var iter1117 in this.group_names)
    {
      if (this.group_names.hasOwnProperty(iter1117))
      {
        iter1117 = this.group_names[iter1117]
        output.writeString(iter1117)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_privilege_set_result = function(args) {
  this.success = null
  this.o1 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PrincipalPrivilegeSet(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_get_privilege_set_result.prototype = {}
ThriftHiveMetastore_get_privilege_set_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.PrincipalPrivilegeSet()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_privilege_set_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_privilege_set_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_list_privileges_args = function(args) {
  this.principal_name = null
  this.principal_type = null
  this.hiveObject = null
  if (args) {
    if (args.principal_name !== undefined && args.principal_name !== null) {
      this.principal_name = args.principal_name
    }
    if (args.principal_type !== undefined && args.principal_type !== null) {
      this.principal_type = args.principal_type
    }
    if (args.hiveObject !== undefined && args.hiveObject !== null) {
      this.hiveObject = new ttypes.HiveObjectRef(args.hiveObject)
    }
  }
}
ThriftHiveMetastore_list_privileges_args.prototype = {}
ThriftHiveMetastore_list_privileges_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.principal_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.I32) {
          this.principal_type = input.readI32()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.hiveObject = new ttypes.HiveObjectRef()
          this.hiveObject.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_list_privileges_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_list_privileges_args')
  if (this.principal_name !== null && this.principal_name !== undefined) {
    output.writeFieldBegin('principal_name', Thrift.Type.STRING, 1)
    output.writeString(this.principal_name)
    output.writeFieldEnd()
  }
  if (this.principal_type !== null && this.principal_type !== undefined) {
    output.writeFieldBegin('principal_type', Thrift.Type.I32, 2)
    output.writeI32(this.principal_type)
    output.writeFieldEnd()
  }
  if (this.hiveObject !== null && this.hiveObject !== undefined) {
    output.writeFieldBegin('hiveObject', Thrift.Type.STRUCT, 3)
    this.hiveObject.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_list_privileges_result = function(args) {
  this.success = null
  this.o1 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.HiveObjectPrivilege])
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_list_privileges_result.prototype = {}
ThriftHiveMetastore_list_privileges_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size1118 = 0
          var _rtmp31122
          this.success = []
          var _etype1121 = 0
          _rtmp31122 = input.readListBegin()
          _etype1121 = _rtmp31122.etype
          _size1118 = _rtmp31122.size
          for (var _i1123 = 0; _i1123 < _size1118; ++_i1123)
          {
            var elem1124 = null
            elem1124 = new ttypes.HiveObjectPrivilege()
            elem1124.read(input)
            this.success.push(elem1124)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_list_privileges_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_list_privileges_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
    for (var iter1125 in this.success)
    {
      if (this.success.hasOwnProperty(iter1125))
      {
        iter1125 = this.success[iter1125]
        iter1125.write(output)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_grant_privileges_args = function(args) {
  this.privileges = null
  if (args) {
    if (args.privileges !== undefined && args.privileges !== null) {
      this.privileges = new ttypes.PrivilegeBag(args.privileges)
    }
  }
}
ThriftHiveMetastore_grant_privileges_args.prototype = {}
ThriftHiveMetastore_grant_privileges_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.privileges = new ttypes.PrivilegeBag()
          this.privileges.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_grant_privileges_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_grant_privileges_args')
  if (this.privileges !== null && this.privileges !== undefined) {
    output.writeFieldBegin('privileges', Thrift.Type.STRUCT, 1)
    this.privileges.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_grant_privileges_result = function(args) {
  this.success = null
  this.o1 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_grant_privileges_result.prototype = {}
ThriftHiveMetastore_grant_privileges_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_grant_privileges_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_grant_privileges_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_revoke_privileges_args = function(args) {
  this.privileges = null
  if (args) {
    if (args.privileges !== undefined && args.privileges !== null) {
      this.privileges = new ttypes.PrivilegeBag(args.privileges)
    }
  }
}
ThriftHiveMetastore_revoke_privileges_args.prototype = {}
ThriftHiveMetastore_revoke_privileges_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.privileges = new ttypes.PrivilegeBag()
          this.privileges.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_revoke_privileges_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_revoke_privileges_args')
  if (this.privileges !== null && this.privileges !== undefined) {
    output.writeFieldBegin('privileges', Thrift.Type.STRUCT, 1)
    this.privileges.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_revoke_privileges_result = function(args) {
  this.success = null
  this.o1 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_revoke_privileges_result.prototype = {}
ThriftHiveMetastore_revoke_privileges_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_revoke_privileges_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_revoke_privileges_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_grant_revoke_privileges_args = function(args) {
  this.request = null
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GrantRevokePrivilegeRequest(args.request)
    }
  }
}
ThriftHiveMetastore_grant_revoke_privileges_args.prototype = {}
ThriftHiveMetastore_grant_revoke_privileges_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.request = new ttypes.GrantRevokePrivilegeRequest()
          this.request.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_grant_revoke_privileges_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_grant_revoke_privileges_args')
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1)
    this.request.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_grant_revoke_privileges_result = function(args) {
  this.success = null
  this.o1 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.GrantRevokePrivilegeResponse(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_grant_revoke_privileges_result.prototype = {}
ThriftHiveMetastore_grant_revoke_privileges_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.GrantRevokePrivilegeResponse()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_grant_revoke_privileges_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_grant_revoke_privileges_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_set_ugi_args = function(args) {
  this.user_name = null
  this.group_names = null
  if (args) {
    if (args.user_name !== undefined && args.user_name !== null) {
      this.user_name = args.user_name
    }
    if (args.group_names !== undefined && args.group_names !== null) {
      this.group_names = Thrift.copyList(args.group_names, [null])
    }
  }
}
ThriftHiveMetastore_set_ugi_args.prototype = {}
ThriftHiveMetastore_set_ugi_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.user_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size1126 = 0
          var _rtmp31130
          this.group_names = []
          var _etype1129 = 0
          _rtmp31130 = input.readListBegin()
          _etype1129 = _rtmp31130.etype
          _size1126 = _rtmp31130.size
          for (var _i1131 = 0; _i1131 < _size1126; ++_i1131)
          {
            var elem1132 = null
            elem1132 = input.readString()
            this.group_names.push(elem1132)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_set_ugi_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_set_ugi_args')
  if (this.user_name !== null && this.user_name !== undefined) {
    output.writeFieldBegin('user_name', Thrift.Type.STRING, 1)
    output.writeString(this.user_name)
    output.writeFieldEnd()
  }
  if (this.group_names !== null && this.group_names !== undefined) {
    output.writeFieldBegin('group_names', Thrift.Type.LIST, 2)
    output.writeListBegin(Thrift.Type.STRING, this.group_names.length)
    for (var iter1133 in this.group_names)
    {
      if (this.group_names.hasOwnProperty(iter1133))
      {
        iter1133 = this.group_names[iter1133]
        output.writeString(iter1133)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_set_ugi_result = function(args) {
  this.success = null
  this.o1 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null])
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_set_ugi_result.prototype = {}
ThriftHiveMetastore_set_ugi_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size1134 = 0
          var _rtmp31138
          this.success = []
          var _etype1137 = 0
          _rtmp31138 = input.readListBegin()
          _etype1137 = _rtmp31138.etype
          _size1134 = _rtmp31138.size
          for (var _i1139 = 0; _i1139 < _size1134; ++_i1139)
          {
            var elem1140 = null
            elem1140 = input.readString()
            this.success.push(elem1140)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_set_ugi_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_set_ugi_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRING, this.success.length)
    for (var iter1141 in this.success)
    {
      if (this.success.hasOwnProperty(iter1141))
      {
        iter1141 = this.success[iter1141]
        output.writeString(iter1141)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_delegation_token_args = function(args) {
  this.token_owner = null
  this.renewer_kerberos_principal_name = null
  if (args) {
    if (args.token_owner !== undefined && args.token_owner !== null) {
      this.token_owner = args.token_owner
    }
    if (args.renewer_kerberos_principal_name !== undefined && args.renewer_kerberos_principal_name !== null) {
      this.renewer_kerberos_principal_name = args.renewer_kerberos_principal_name
    }
  }
}
ThriftHiveMetastore_get_delegation_token_args.prototype = {}
ThriftHiveMetastore_get_delegation_token_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token_owner = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.renewer_kerberos_principal_name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_delegation_token_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_delegation_token_args')
  if (this.token_owner !== null && this.token_owner !== undefined) {
    output.writeFieldBegin('token_owner', Thrift.Type.STRING, 1)
    output.writeString(this.token_owner)
    output.writeFieldEnd()
  }
  if (this.renewer_kerberos_principal_name !== null && this.renewer_kerberos_principal_name !== undefined) {
    output.writeFieldBegin('renewer_kerberos_principal_name', Thrift.Type.STRING, 2)
    output.writeString(this.renewer_kerberos_principal_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_delegation_token_result = function(args) {
  this.success = null
  this.o1 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_get_delegation_token_result.prototype = {}
ThriftHiveMetastore_get_delegation_token_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_delegation_token_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_delegation_token_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0)
    output.writeString(this.success)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_renew_delegation_token_args = function(args) {
  this.token_str_form = null
  if (args) {
    if (args.token_str_form !== undefined && args.token_str_form !== null) {
      this.token_str_form = args.token_str_form
    }
  }
}
ThriftHiveMetastore_renew_delegation_token_args.prototype = {}
ThriftHiveMetastore_renew_delegation_token_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token_str_form = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_renew_delegation_token_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_renew_delegation_token_args')
  if (this.token_str_form !== null && this.token_str_form !== undefined) {
    output.writeFieldBegin('token_str_form', Thrift.Type.STRING, 1)
    output.writeString(this.token_str_form)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_renew_delegation_token_result = function(args) {
  this.success = null
  this.o1 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_renew_delegation_token_result.prototype = {}
ThriftHiveMetastore_renew_delegation_token_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_renew_delegation_token_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_renew_delegation_token_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0)
    output.writeI64(this.success)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_cancel_delegation_token_args = function(args) {
  this.token_str_form = null
  if (args) {
    if (args.token_str_form !== undefined && args.token_str_form !== null) {
      this.token_str_form = args.token_str_form
    }
  }
}
ThriftHiveMetastore_cancel_delegation_token_args.prototype = {}
ThriftHiveMetastore_cancel_delegation_token_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token_str_form = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_cancel_delegation_token_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_cancel_delegation_token_args')
  if (this.token_str_form !== null && this.token_str_form !== undefined) {
    output.writeFieldBegin('token_str_form', Thrift.Type.STRING, 1)
    output.writeString(this.token_str_form)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_cancel_delegation_token_result = function(args) {
  this.o1 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_cancel_delegation_token_result.prototype = {}
ThriftHiveMetastore_cancel_delegation_token_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_cancel_delegation_token_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_cancel_delegation_token_result')
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_add_token_args = function(args) {
  this.token_identifier = null
  this.delegation_token = null
  if (args) {
    if (args.token_identifier !== undefined && args.token_identifier !== null) {
      this.token_identifier = args.token_identifier
    }
    if (args.delegation_token !== undefined && args.delegation_token !== null) {
      this.delegation_token = args.delegation_token
    }
  }
}
ThriftHiveMetastore_add_token_args.prototype = {}
ThriftHiveMetastore_add_token_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token_identifier = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.delegation_token = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_add_token_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_token_args')
  if (this.token_identifier !== null && this.token_identifier !== undefined) {
    output.writeFieldBegin('token_identifier', Thrift.Type.STRING, 1)
    output.writeString(this.token_identifier)
    output.writeFieldEnd()
  }
  if (this.delegation_token !== null && this.delegation_token !== undefined) {
    output.writeFieldBegin('delegation_token', Thrift.Type.STRING, 2)
    output.writeString(this.delegation_token)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_add_token_result = function(args) {
  this.success = null
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
  }
}
ThriftHiveMetastore_add_token_result.prototype = {}
ThriftHiveMetastore_add_token_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_add_token_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_token_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_remove_token_args = function(args) {
  this.token_identifier = null
  if (args) {
    if (args.token_identifier !== undefined && args.token_identifier !== null) {
      this.token_identifier = args.token_identifier
    }
  }
}
ThriftHiveMetastore_remove_token_args.prototype = {}
ThriftHiveMetastore_remove_token_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token_identifier = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_remove_token_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_remove_token_args')
  if (this.token_identifier !== null && this.token_identifier !== undefined) {
    output.writeFieldBegin('token_identifier', Thrift.Type.STRING, 1)
    output.writeString(this.token_identifier)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_remove_token_result = function(args) {
  this.success = null
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
  }
}
ThriftHiveMetastore_remove_token_result.prototype = {}
ThriftHiveMetastore_remove_token_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_remove_token_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_remove_token_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_token_args = function(args) {
  this.token_identifier = null
  if (args) {
    if (args.token_identifier !== undefined && args.token_identifier !== null) {
      this.token_identifier = args.token_identifier
    }
  }
}
ThriftHiveMetastore_get_token_args.prototype = {}
ThriftHiveMetastore_get_token_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token_identifier = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_token_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_token_args')
  if (this.token_identifier !== null && this.token_identifier !== undefined) {
    output.writeFieldBegin('token_identifier', Thrift.Type.STRING, 1)
    output.writeString(this.token_identifier)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_token_result = function(args) {
  this.success = null
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
  }
}
ThriftHiveMetastore_get_token_result.prototype = {}
ThriftHiveMetastore_get_token_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_token_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_token_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0)
    output.writeString(this.success)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_all_token_identifiers_args = function(args) {
}
ThriftHiveMetastore_get_all_token_identifiers_args.prototype = {}
ThriftHiveMetastore_get_all_token_identifiers_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    input.skip(ftype)
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_all_token_identifiers_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_all_token_identifiers_args')
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_all_token_identifiers_result = function(args) {
  this.success = null
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null])
    }
  }
}
ThriftHiveMetastore_get_all_token_identifiers_result.prototype = {}
ThriftHiveMetastore_get_all_token_identifiers_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size1142 = 0
          var _rtmp31146
          this.success = []
          var _etype1145 = 0
          _rtmp31146 = input.readListBegin()
          _etype1145 = _rtmp31146.etype
          _size1142 = _rtmp31146.size
          for (var _i1147 = 0; _i1147 < _size1142; ++_i1147)
          {
            var elem1148 = null
            elem1148 = input.readString()
            this.success.push(elem1148)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_all_token_identifiers_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_all_token_identifiers_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRING, this.success.length)
    for (var iter1149 in this.success)
    {
      if (this.success.hasOwnProperty(iter1149))
      {
        iter1149 = this.success[iter1149]
        output.writeString(iter1149)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_add_master_key_args = function(args) {
  this.key = null
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key
    }
  }
}
ThriftHiveMetastore_add_master_key_args.prototype = {}
ThriftHiveMetastore_add_master_key_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_add_master_key_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_master_key_args')
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1)
    output.writeString(this.key)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_add_master_key_result = function(args) {
  this.success = null
  this.o1 = null
  if (args instanceof ttypes.MetaException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_add_master_key_result.prototype = {}
ThriftHiveMetastore_add_master_key_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.I32) {
          this.success = input.readI32()
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.MetaException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_add_master_key_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_master_key_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0)
    output.writeI32(this.success)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_update_master_key_args = function(args) {
  this.seq_number = null
  this.key = null
  if (args) {
    if (args.seq_number !== undefined && args.seq_number !== null) {
      this.seq_number = args.seq_number
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key
    }
  }
}
ThriftHiveMetastore_update_master_key_args.prototype = {}
ThriftHiveMetastore_update_master_key_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.I32) {
          this.seq_number = input.readI32()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_update_master_key_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_update_master_key_args')
  if (this.seq_number !== null && this.seq_number !== undefined) {
    output.writeFieldBegin('seq_number', Thrift.Type.I32, 1)
    output.writeI32(this.seq_number)
    output.writeFieldEnd()
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2)
    output.writeString(this.key)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_update_master_key_result = function(args) {
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_update_master_key_result.prototype = {}
ThriftHiveMetastore_update_master_key_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchObjectException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.MetaException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_update_master_key_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_update_master_key_result')
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_remove_master_key_args = function(args) {
  this.key_seq = null
  if (args) {
    if (args.key_seq !== undefined && args.key_seq !== null) {
      this.key_seq = args.key_seq
    }
  }
}
ThriftHiveMetastore_remove_master_key_args.prototype = {}
ThriftHiveMetastore_remove_master_key_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.I32) {
          this.key_seq = input.readI32()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_remove_master_key_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_remove_master_key_args')
  if (this.key_seq !== null && this.key_seq !== undefined) {
    output.writeFieldBegin('key_seq', Thrift.Type.I32, 1)
    output.writeI32(this.key_seq)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_remove_master_key_result = function(args) {
  this.success = null
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
  }
}
ThriftHiveMetastore_remove_master_key_result.prototype = {}
ThriftHiveMetastore_remove_master_key_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_remove_master_key_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_remove_master_key_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_master_keys_args = function(args) {
}
ThriftHiveMetastore_get_master_keys_args.prototype = {}
ThriftHiveMetastore_get_master_keys_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    input.skip(ftype)
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_master_keys_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_master_keys_args')
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_master_keys_result = function(args) {
  this.success = null
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null])
    }
  }
}
ThriftHiveMetastore_get_master_keys_result.prototype = {}
ThriftHiveMetastore_get_master_keys_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size1150 = 0
          var _rtmp31154
          this.success = []
          var _etype1153 = 0
          _rtmp31154 = input.readListBegin()
          _etype1153 = _rtmp31154.etype
          _size1150 = _rtmp31154.size
          for (var _i1155 = 0; _i1155 < _size1150; ++_i1155)
          {
            var elem1156 = null
            elem1156 = input.readString()
            this.success.push(elem1156)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_master_keys_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_master_keys_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRING, this.success.length)
    for (var iter1157 in this.success)
    {
      if (this.success.hasOwnProperty(iter1157))
      {
        iter1157 = this.success[iter1157]
        output.writeString(iter1157)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_open_txns_args = function(args) {
}
ThriftHiveMetastore_get_open_txns_args.prototype = {}
ThriftHiveMetastore_get_open_txns_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    input.skip(ftype)
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_open_txns_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_open_txns_args')
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_open_txns_result = function(args) {
  this.success = null
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.GetOpenTxnsResponse(args.success)
    }
  }
}
ThriftHiveMetastore_get_open_txns_result.prototype = {}
ThriftHiveMetastore_get_open_txns_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.GetOpenTxnsResponse()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_open_txns_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_open_txns_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_open_txns_info_args = function(args) {
}
ThriftHiveMetastore_get_open_txns_info_args.prototype = {}
ThriftHiveMetastore_get_open_txns_info_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    input.skip(ftype)
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_open_txns_info_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_open_txns_info_args')
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_open_txns_info_result = function(args) {
  this.success = null
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.GetOpenTxnsInfoResponse(args.success)
    }
  }
}
ThriftHiveMetastore_get_open_txns_info_result.prototype = {}
ThriftHiveMetastore_get_open_txns_info_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.GetOpenTxnsInfoResponse()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_open_txns_info_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_open_txns_info_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_open_txns_args = function(args) {
  this.rqst = null
  if (args) {
    if (args.rqst !== undefined && args.rqst !== null) {
      this.rqst = new ttypes.OpenTxnRequest(args.rqst)
    }
  }
}
ThriftHiveMetastore_open_txns_args.prototype = {}
ThriftHiveMetastore_open_txns_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.rqst = new ttypes.OpenTxnRequest()
          this.rqst.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_open_txns_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_open_txns_args')
  if (this.rqst !== null && this.rqst !== undefined) {
    output.writeFieldBegin('rqst', Thrift.Type.STRUCT, 1)
    this.rqst.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_open_txns_result = function(args) {
  this.success = null
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.OpenTxnsResponse(args.success)
    }
  }
}
ThriftHiveMetastore_open_txns_result.prototype = {}
ThriftHiveMetastore_open_txns_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.OpenTxnsResponse()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_open_txns_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_open_txns_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_abort_txn_args = function(args) {
  this.rqst = null
  if (args) {
    if (args.rqst !== undefined && args.rqst !== null) {
      this.rqst = new ttypes.AbortTxnRequest(args.rqst)
    }
  }
}
ThriftHiveMetastore_abort_txn_args.prototype = {}
ThriftHiveMetastore_abort_txn_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.rqst = new ttypes.AbortTxnRequest()
          this.rqst.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_abort_txn_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_abort_txn_args')
  if (this.rqst !== null && this.rqst !== undefined) {
    output.writeFieldBegin('rqst', Thrift.Type.STRUCT, 1)
    this.rqst.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_abort_txn_result = function(args) {
  this.o1 = null
  if (args instanceof ttypes.NoSuchTxnException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_abort_txn_result.prototype = {}
ThriftHiveMetastore_abort_txn_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchTxnException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_abort_txn_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_abort_txn_result')
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_abort_txns_args = function(args) {
  this.rqst = null
  if (args) {
    if (args.rqst !== undefined && args.rqst !== null) {
      this.rqst = new ttypes.AbortTxnsRequest(args.rqst)
    }
  }
}
ThriftHiveMetastore_abort_txns_args.prototype = {}
ThriftHiveMetastore_abort_txns_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.rqst = new ttypes.AbortTxnsRequest()
          this.rqst.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_abort_txns_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_abort_txns_args')
  if (this.rqst !== null && this.rqst !== undefined) {
    output.writeFieldBegin('rqst', Thrift.Type.STRUCT, 1)
    this.rqst.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_abort_txns_result = function(args) {
  this.o1 = null
  if (args instanceof ttypes.NoSuchTxnException) {
    this.o1 = args
    return
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
  }
}
ThriftHiveMetastore_abort_txns_result.prototype = {}
ThriftHiveMetastore_abort_txns_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchTxnException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_abort_txns_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_abort_txns_result')
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_commit_txn_args = function(args) {
  this.rqst = null
  if (args) {
    if (args.rqst !== undefined && args.rqst !== null) {
      this.rqst = new ttypes.CommitTxnRequest(args.rqst)
    }
  }
}
ThriftHiveMetastore_commit_txn_args.prototype = {}
ThriftHiveMetastore_commit_txn_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.rqst = new ttypes.CommitTxnRequest()
          this.rqst.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_commit_txn_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_commit_txn_args')
  if (this.rqst !== null && this.rqst !== undefined) {
    output.writeFieldBegin('rqst', Thrift.Type.STRUCT, 1)
    this.rqst.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_commit_txn_result = function(args) {
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.NoSuchTxnException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.TxnAbortedException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_commit_txn_result.prototype = {}
ThriftHiveMetastore_commit_txn_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchTxnException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.TxnAbortedException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_commit_txn_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_commit_txn_result')
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_lock_args = function(args) {
  this.rqst = null
  if (args) {
    if (args.rqst !== undefined && args.rqst !== null) {
      this.rqst = new ttypes.LockRequest(args.rqst)
    }
  }
}
ThriftHiveMetastore_lock_args.prototype = {}
ThriftHiveMetastore_lock_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.rqst = new ttypes.LockRequest()
          this.rqst.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_lock_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_lock_args')
  if (this.rqst !== null && this.rqst !== undefined) {
    output.writeFieldBegin('rqst', Thrift.Type.STRUCT, 1)
    this.rqst.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_lock_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.NoSuchTxnException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.TxnAbortedException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.LockResponse(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_lock_result.prototype = {}
ThriftHiveMetastore_lock_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.LockResponse()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchTxnException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.TxnAbortedException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_lock_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_lock_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_check_lock_args = function(args) {
  this.rqst = null
  if (args) {
    if (args.rqst !== undefined && args.rqst !== null) {
      this.rqst = new ttypes.CheckLockRequest(args.rqst)
    }
  }
}
ThriftHiveMetastore_check_lock_args.prototype = {}
ThriftHiveMetastore_check_lock_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.rqst = new ttypes.CheckLockRequest()
          this.rqst.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_check_lock_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_check_lock_args')
  if (this.rqst !== null && this.rqst !== undefined) {
    output.writeFieldBegin('rqst', Thrift.Type.STRUCT, 1)
    this.rqst.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_check_lock_result = function(args) {
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
  if (args instanceof ttypes.NoSuchTxnException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.TxnAbortedException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.NoSuchLockException) {
    this.o3 = args
    return
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.LockResponse(args.success)
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
  }
}
ThriftHiveMetastore_check_lock_result.prototype = {}
ThriftHiveMetastore_check_lock_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.LockResponse()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchTxnException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.TxnAbortedException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.NoSuchLockException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_check_lock_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_check_lock_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_unlock_args = function(args) {
  this.rqst = null
  if (args) {
    if (args.rqst !== undefined && args.rqst !== null) {
      this.rqst = new ttypes.UnlockRequest(args.rqst)
    }
  }
}
ThriftHiveMetastore_unlock_args.prototype = {}
ThriftHiveMetastore_unlock_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.rqst = new ttypes.UnlockRequest()
          this.rqst.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_unlock_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_unlock_args')
  if (this.rqst !== null && this.rqst !== undefined) {
    output.writeFieldBegin('rqst', Thrift.Type.STRUCT, 1)
    this.rqst.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_unlock_result = function(args) {
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.NoSuchLockException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.TxnOpenException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_unlock_result.prototype = {}
ThriftHiveMetastore_unlock_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchLockException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.TxnOpenException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_unlock_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_unlock_result')
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_show_locks_args = function(args) {
  this.rqst = null
  if (args) {
    if (args.rqst !== undefined && args.rqst !== null) {
      this.rqst = new ttypes.ShowLocksRequest(args.rqst)
    }
  }
}
ThriftHiveMetastore_show_locks_args.prototype = {}
ThriftHiveMetastore_show_locks_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.rqst = new ttypes.ShowLocksRequest()
          this.rqst.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_show_locks_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_show_locks_args')
  if (this.rqst !== null && this.rqst !== undefined) {
    output.writeFieldBegin('rqst', Thrift.Type.STRUCT, 1)
    this.rqst.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_show_locks_result = function(args) {
  this.success = null
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ShowLocksResponse(args.success)
    }
  }
}
ThriftHiveMetastore_show_locks_result.prototype = {}
ThriftHiveMetastore_show_locks_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.ShowLocksResponse()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_show_locks_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_show_locks_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_heartbeat_args = function(args) {
  this.ids = null
  if (args) {
    if (args.ids !== undefined && args.ids !== null) {
      this.ids = new ttypes.HeartbeatRequest(args.ids)
    }
  }
}
ThriftHiveMetastore_heartbeat_args.prototype = {}
ThriftHiveMetastore_heartbeat_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ids = new ttypes.HeartbeatRequest()
          this.ids.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_heartbeat_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_heartbeat_args')
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.STRUCT, 1)
    this.ids.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_heartbeat_result = function(args) {
  this.o1 = null
  this.o2 = null
  this.o3 = null
  if (args instanceof ttypes.NoSuchLockException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.NoSuchTxnException) {
    this.o2 = args
    return
  }
  if (args instanceof ttypes.TxnAbortedException) {
    this.o3 = args
    return
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3
    }
  }
}
ThriftHiveMetastore_heartbeat_result.prototype = {}
ThriftHiveMetastore_heartbeat_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchLockException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.NoSuchTxnException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.o3 = new ttypes.TxnAbortedException()
          this.o3.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_heartbeat_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_heartbeat_result')
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_heartbeat_txn_range_args = function(args) {
  this.txns = null
  if (args) {
    if (args.txns !== undefined && args.txns !== null) {
      this.txns = new ttypes.HeartbeatTxnRangeRequest(args.txns)
    }
  }
}
ThriftHiveMetastore_heartbeat_txn_range_args.prototype = {}
ThriftHiveMetastore_heartbeat_txn_range_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.txns = new ttypes.HeartbeatTxnRangeRequest()
          this.txns.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_heartbeat_txn_range_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_heartbeat_txn_range_args')
  if (this.txns !== null && this.txns !== undefined) {
    output.writeFieldBegin('txns', Thrift.Type.STRUCT, 1)
    this.txns.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_heartbeat_txn_range_result = function(args) {
  this.success = null
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.HeartbeatTxnRangeResponse(args.success)
    }
  }
}
ThriftHiveMetastore_heartbeat_txn_range_result.prototype = {}
ThriftHiveMetastore_heartbeat_txn_range_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.HeartbeatTxnRangeResponse()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_heartbeat_txn_range_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_heartbeat_txn_range_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_compact_args = function(args) {
  this.rqst = null
  if (args) {
    if (args.rqst !== undefined && args.rqst !== null) {
      this.rqst = new ttypes.CompactionRequest(args.rqst)
    }
  }
}
ThriftHiveMetastore_compact_args.prototype = {}
ThriftHiveMetastore_compact_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.rqst = new ttypes.CompactionRequest()
          this.rqst.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_compact_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_compact_args')
  if (this.rqst !== null && this.rqst !== undefined) {
    output.writeFieldBegin('rqst', Thrift.Type.STRUCT, 1)
    this.rqst.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_compact_result = function(args) {
}
ThriftHiveMetastore_compact_result.prototype = {}
ThriftHiveMetastore_compact_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    input.skip(ftype)
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_compact_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_compact_result')
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_show_compact_args = function(args) {
  this.rqst = null
  if (args) {
    if (args.rqst !== undefined && args.rqst !== null) {
      this.rqst = new ttypes.ShowCompactRequest(args.rqst)
    }
  }
}
ThriftHiveMetastore_show_compact_args.prototype = {}
ThriftHiveMetastore_show_compact_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.rqst = new ttypes.ShowCompactRequest()
          this.rqst.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_show_compact_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_show_compact_args')
  if (this.rqst !== null && this.rqst !== undefined) {
    output.writeFieldBegin('rqst', Thrift.Type.STRUCT, 1)
    this.rqst.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_show_compact_result = function(args) {
  this.success = null
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ShowCompactResponse(args.success)
    }
  }
}
ThriftHiveMetastore_show_compact_result.prototype = {}
ThriftHiveMetastore_show_compact_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.ShowCompactResponse()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_show_compact_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_show_compact_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_add_dynamic_partitions_args = function(args) {
  this.rqst = null
  if (args) {
    if (args.rqst !== undefined && args.rqst !== null) {
      this.rqst = new ttypes.AddDynamicPartitions(args.rqst)
    }
  }
}
ThriftHiveMetastore_add_dynamic_partitions_args.prototype = {}
ThriftHiveMetastore_add_dynamic_partitions_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.rqst = new ttypes.AddDynamicPartitions()
          this.rqst.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_add_dynamic_partitions_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_dynamic_partitions_args')
  if (this.rqst !== null && this.rqst !== undefined) {
    output.writeFieldBegin('rqst', Thrift.Type.STRUCT, 1)
    this.rqst.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_add_dynamic_partitions_result = function(args) {
  this.o1 = null
  this.o2 = null
  if (args instanceof ttypes.NoSuchTxnException) {
    this.o1 = args
    return
  }
  if (args instanceof ttypes.TxnAbortedException) {
    this.o2 = args
    return
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2
    }
  }
}
ThriftHiveMetastore_add_dynamic_partitions_result.prototype = {}
ThriftHiveMetastore_add_dynamic_partitions_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.o1 = new ttypes.NoSuchTxnException()
          this.o1.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.o2 = new ttypes.TxnAbortedException()
          this.o2.read(input)
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_add_dynamic_partitions_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_dynamic_partitions_result')
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_next_notification_args = function(args) {
  this.rqst = null
  if (args) {
    if (args.rqst !== undefined && args.rqst !== null) {
      this.rqst = new ttypes.NotificationEventRequest(args.rqst)
    }
  }
}
ThriftHiveMetastore_get_next_notification_args.prototype = {}
ThriftHiveMetastore_get_next_notification_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.rqst = new ttypes.NotificationEventRequest()
          this.rqst.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_next_notification_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_next_notification_args')
  if (this.rqst !== null && this.rqst !== undefined) {
    output.writeFieldBegin('rqst', Thrift.Type.STRUCT, 1)
    this.rqst.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_next_notification_result = function(args) {
  this.success = null
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.NotificationEventResponse(args.success)
    }
  }
}
ThriftHiveMetastore_get_next_notification_result.prototype = {}
ThriftHiveMetastore_get_next_notification_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.NotificationEventResponse()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_next_notification_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_next_notification_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_current_notificationEventId_args = function(args) {
}
ThriftHiveMetastore_get_current_notificationEventId_args.prototype = {}
ThriftHiveMetastore_get_current_notificationEventId_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    input.skip(ftype)
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_current_notificationEventId_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_current_notificationEventId_args')
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_current_notificationEventId_result = function(args) {
  this.success = null
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CurrentNotificationEventId(args.success)
    }
  }
}
ThriftHiveMetastore_get_current_notificationEventId_result.prototype = {}
ThriftHiveMetastore_get_current_notificationEventId_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.CurrentNotificationEventId()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_current_notificationEventId_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_current_notificationEventId_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_fire_listener_event_args = function(args) {
  this.rqst = null
  if (args) {
    if (args.rqst !== undefined && args.rqst !== null) {
      this.rqst = new ttypes.FireEventRequest(args.rqst)
    }
  }
}
ThriftHiveMetastore_fire_listener_event_args.prototype = {}
ThriftHiveMetastore_fire_listener_event_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.rqst = new ttypes.FireEventRequest()
          this.rqst.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_fire_listener_event_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_fire_listener_event_args')
  if (this.rqst !== null && this.rqst !== undefined) {
    output.writeFieldBegin('rqst', Thrift.Type.STRUCT, 1)
    this.rqst.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_fire_listener_event_result = function(args) {
  this.success = null
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.FireEventResponse(args.success)
    }
  }
}
ThriftHiveMetastore_fire_listener_event_result.prototype = {}
ThriftHiveMetastore_fire_listener_event_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.FireEventResponse()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_fire_listener_event_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_fire_listener_event_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_flushCache_args = function(args) {
}
ThriftHiveMetastore_flushCache_args.prototype = {}
ThriftHiveMetastore_flushCache_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    input.skip(ftype)
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_flushCache_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_flushCache_args')
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_flushCache_result = function(args) {
}
ThriftHiveMetastore_flushCache_result.prototype = {}
ThriftHiveMetastore_flushCache_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    input.skip(ftype)
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_flushCache_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_flushCache_result')
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_file_metadata_by_expr_args = function(args) {
  this.req = null
  if (args) {
    if (args.req !== undefined && args.req !== null) {
      this.req = new ttypes.GetFileMetadataByExprRequest(args.req)
    }
  }
}
ThriftHiveMetastore_get_file_metadata_by_expr_args.prototype = {}
ThriftHiveMetastore_get_file_metadata_by_expr_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.req = new ttypes.GetFileMetadataByExprRequest()
          this.req.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_file_metadata_by_expr_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_file_metadata_by_expr_args')
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1)
    this.req.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_file_metadata_by_expr_result = function(args) {
  this.success = null
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.GetFileMetadataByExprResult(args.success)
    }
  }
}
ThriftHiveMetastore_get_file_metadata_by_expr_result.prototype = {}
ThriftHiveMetastore_get_file_metadata_by_expr_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.GetFileMetadataByExprResult()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_file_metadata_by_expr_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_file_metadata_by_expr_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_file_metadata_args = function(args) {
  this.req = null
  if (args) {
    if (args.req !== undefined && args.req !== null) {
      this.req = new ttypes.GetFileMetadataRequest(args.req)
    }
  }
}
ThriftHiveMetastore_get_file_metadata_args.prototype = {}
ThriftHiveMetastore_get_file_metadata_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.req = new ttypes.GetFileMetadataRequest()
          this.req.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_file_metadata_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_file_metadata_args')
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1)
    this.req.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_file_metadata_result = function(args) {
  this.success = null
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.GetFileMetadataResult(args.success)
    }
  }
}
ThriftHiveMetastore_get_file_metadata_result.prototype = {}
ThriftHiveMetastore_get_file_metadata_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.GetFileMetadataResult()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_file_metadata_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_file_metadata_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_put_file_metadata_args = function(args) {
  this.req = null
  if (args) {
    if (args.req !== undefined && args.req !== null) {
      this.req = new ttypes.PutFileMetadataRequest(args.req)
    }
  }
}
ThriftHiveMetastore_put_file_metadata_args.prototype = {}
ThriftHiveMetastore_put_file_metadata_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.req = new ttypes.PutFileMetadataRequest()
          this.req.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_put_file_metadata_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_put_file_metadata_args')
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1)
    this.req.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_put_file_metadata_result = function(args) {
  this.success = null
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PutFileMetadataResult(args.success)
    }
  }
}
ThriftHiveMetastore_put_file_metadata_result.prototype = {}
ThriftHiveMetastore_put_file_metadata_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.PutFileMetadataResult()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_put_file_metadata_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_put_file_metadata_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_clear_file_metadata_args = function(args) {
  this.req = null
  if (args) {
    if (args.req !== undefined && args.req !== null) {
      this.req = new ttypes.ClearFileMetadataRequest(args.req)
    }
  }
}
ThriftHiveMetastore_clear_file_metadata_args.prototype = {}
ThriftHiveMetastore_clear_file_metadata_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.req = new ttypes.ClearFileMetadataRequest()
          this.req.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_clear_file_metadata_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_clear_file_metadata_args')
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1)
    this.req.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_clear_file_metadata_result = function(args) {
  this.success = null
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ClearFileMetadataResult(args.success)
    }
  }
}
ThriftHiveMetastore_clear_file_metadata_result.prototype = {}
ThriftHiveMetastore_clear_file_metadata_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.ClearFileMetadataResult()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_clear_file_metadata_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_clear_file_metadata_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_cache_file_metadata_args = function(args) {
  this.req = null
  if (args) {
    if (args.req !== undefined && args.req !== null) {
      this.req = new ttypes.CacheFileMetadataRequest(args.req)
    }
  }
}
ThriftHiveMetastore_cache_file_metadata_args.prototype = {}
ThriftHiveMetastore_cache_file_metadata_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.req = new ttypes.CacheFileMetadataRequest()
          this.req.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_cache_file_metadata_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_cache_file_metadata_args')
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1)
    this.req.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_cache_file_metadata_result = function(args) {
  this.success = null
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CacheFileMetadataResult(args.success)
    }
  }
}
ThriftHiveMetastore_cache_file_metadata_result.prototype = {}
ThriftHiveMetastore_cache_file_metadata_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true)
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid)
    {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.CacheFileMetadataResult()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_cache_file_metadata_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_cache_file_metadata_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastoreClient = exports.Client = function(output, pClass) {
  this.output = output
  this.pClass = pClass
  this._seqid = 0
  this._reqs = {}
}
Thrift.inherits(ThriftHiveMetastoreClient, FacebookServiceClient)
ThriftHiveMetastoreClient.prototype.seqid = function() { return this._seqid }
ThriftHiveMetastoreClient.prototype.new_seqid = function() { return this._seqid += 1 }
ThriftHiveMetastoreClient.prototype.getMetaConf = function(key, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_getMetaConf(key)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_getMetaConf(key)
  }
}

ThriftHiveMetastoreClient.prototype.send_getMetaConf = function(key) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('getMetaConf', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_getMetaConf_args()
  args.key = key
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_getMetaConf = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_getMetaConf_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('getMetaConf failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.setMetaConf = function(key, value, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_setMetaConf(key, value)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_setMetaConf(key, value)
  }
}

ThriftHiveMetastoreClient.prototype.send_setMetaConf = function(key, value) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('setMetaConf', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_setMetaConf_args()
  args.key = key
  args.value = value
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_setMetaConf = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_setMetaConf_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.create_database = function(database, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_create_database(database)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_create_database(database)
  }
}

ThriftHiveMetastoreClient.prototype.send_create_database = function(database) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('create_database', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_create_database_args()
  args.database = database
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_create_database = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_create_database_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.get_database = function(name, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_database(name)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_database(name)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_database = function(name) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_database', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_database_args()
  args.name = name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_database = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_database_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_database failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.drop_database = function(name, deleteData, cascade, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_drop_database(name, deleteData, cascade)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_drop_database(name, deleteData, cascade)
  }
}

ThriftHiveMetastoreClient.prototype.send_drop_database = function(name, deleteData, cascade) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('drop_database', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_drop_database_args()
  args.name = name
  args.deleteData = deleteData
  args.cascade = cascade
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_drop_database = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_drop_database_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.get_databases = function(pattern, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_databases(pattern)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_databases(pattern)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_databases = function(pattern) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_databases', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_databases_args()
  args.pattern = pattern
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_databases = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_databases_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_databases failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_all_databases = function(callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_all_databases()
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_all_databases()
  }
}

ThriftHiveMetastoreClient.prototype.send_get_all_databases = function() {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_all_databases', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_all_databases_args()
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_all_databases = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_all_databases_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_all_databases failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.alter_database = function(dbname, db, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_alter_database(dbname, db)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_alter_database(dbname, db)
  }
}

ThriftHiveMetastoreClient.prototype.send_alter_database = function(dbname, db) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('alter_database', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_alter_database_args()
  args.dbname = dbname
  args.db = db
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_alter_database = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_alter_database_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.get_type = function(name, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_type(name)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_type(name)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_type = function(name) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_type', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_type_args()
  args.name = name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_type = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_type_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_type failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.create_type = function(type, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_create_type(type)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_create_type(type)
  }
}

ThriftHiveMetastoreClient.prototype.send_create_type = function(type) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('create_type', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_create_type_args()
  args.type = type
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_create_type = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_create_type_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('create_type failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.drop_type = function(type, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_drop_type(type)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_drop_type(type)
  }
}

ThriftHiveMetastoreClient.prototype.send_drop_type = function(type) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('drop_type', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_drop_type_args()
  args.type = type
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_drop_type = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_drop_type_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('drop_type failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_type_all = function(name, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_type_all(name)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_type_all(name)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_type_all = function(name) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_type_all', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_type_all_args()
  args.name = name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_type_all = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_type_all_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_type_all failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_fields = function(db_name, table_name, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_fields(db_name, table_name)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_fields(db_name, table_name)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_fields = function(db_name, table_name) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_fields', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_fields_args()
  args.db_name = db_name
  args.table_name = table_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_fields = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_fields_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_fields failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_fields_with_environment_context = function(db_name, table_name, environment_context, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_fields_with_environment_context(db_name, table_name, environment_context)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_fields_with_environment_context(db_name, table_name, environment_context)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_fields_with_environment_context = function(db_name, table_name, environment_context) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_fields_with_environment_context', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_fields_with_environment_context_args()
  args.db_name = db_name
  args.table_name = table_name
  args.environment_context = environment_context
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_fields_with_environment_context = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_fields_with_environment_context_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_fields_with_environment_context failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_schema = function(db_name, table_name, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_schema(db_name, table_name)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_schema(db_name, table_name)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_schema = function(db_name, table_name) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_schema', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_schema_args()
  args.db_name = db_name
  args.table_name = table_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_schema = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_schema_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_schema failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_schema_with_environment_context = function(db_name, table_name, environment_context, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_schema_with_environment_context(db_name, table_name, environment_context)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_schema_with_environment_context(db_name, table_name, environment_context)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_schema_with_environment_context = function(db_name, table_name, environment_context) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_schema_with_environment_context', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_schema_with_environment_context_args()
  args.db_name = db_name
  args.table_name = table_name
  args.environment_context = environment_context
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_schema_with_environment_context = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_schema_with_environment_context_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_schema_with_environment_context failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.create_table = function(tbl, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_create_table(tbl)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_create_table(tbl)
  }
}

ThriftHiveMetastoreClient.prototype.send_create_table = function(tbl) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('create_table', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_create_table_args()
  args.tbl = tbl
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_create_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_create_table_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  if (null !== result.o4) {
    return callback(result.o4)
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.create_table_with_environment_context = function(tbl, environment_context, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_create_table_with_environment_context(tbl, environment_context)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_create_table_with_environment_context(tbl, environment_context)
  }
}

ThriftHiveMetastoreClient.prototype.send_create_table_with_environment_context = function(tbl, environment_context) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('create_table_with_environment_context', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_create_table_with_environment_context_args()
  args.tbl = tbl
  args.environment_context = environment_context
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_create_table_with_environment_context = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_create_table_with_environment_context_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  if (null !== result.o4) {
    return callback(result.o4)
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.create_table_with_constraints = function(tbl, primaryKeys, foreignKeys, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_create_table_with_constraints(tbl, primaryKeys, foreignKeys)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_create_table_with_constraints(tbl, primaryKeys, foreignKeys)
  }
}

ThriftHiveMetastoreClient.prototype.send_create_table_with_constraints = function(tbl, primaryKeys, foreignKeys) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('create_table_with_constraints', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_create_table_with_constraints_args()
  args.tbl = tbl
  args.primaryKeys = primaryKeys
  args.foreignKeys = foreignKeys
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_create_table_with_constraints = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_create_table_with_constraints_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  if (null !== result.o4) {
    return callback(result.o4)
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.drop_constraint = function(req, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_drop_constraint(req)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_drop_constraint(req)
  }
}

ThriftHiveMetastoreClient.prototype.send_drop_constraint = function(req) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('drop_constraint', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_drop_constraint_args()
  args.req = req
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_drop_constraint = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_drop_constraint_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.add_primary_key = function(req, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_add_primary_key(req)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_add_primary_key(req)
  }
}

ThriftHiveMetastoreClient.prototype.send_add_primary_key = function(req) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('add_primary_key', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_add_primary_key_args()
  args.req = req
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_add_primary_key = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_add_primary_key_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.add_foreign_key = function(req, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_add_foreign_key(req)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_add_foreign_key(req)
  }
}

ThriftHiveMetastoreClient.prototype.send_add_foreign_key = function(req) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('add_foreign_key', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_add_foreign_key_args()
  args.req = req
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_add_foreign_key = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_add_foreign_key_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.drop_table = function(dbname, name, deleteData, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_drop_table(dbname, name, deleteData)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_drop_table(dbname, name, deleteData)
  }
}

ThriftHiveMetastoreClient.prototype.send_drop_table = function(dbname, name, deleteData) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('drop_table', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_drop_table_args()
  args.dbname = dbname
  args.name = name
  args.deleteData = deleteData
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_drop_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_drop_table_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.drop_table_with_environment_context = function(dbname, name, deleteData, environment_context, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_drop_table_with_environment_context(dbname, name, deleteData, environment_context)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_drop_table_with_environment_context(dbname, name, deleteData, environment_context)
  }
}

ThriftHiveMetastoreClient.prototype.send_drop_table_with_environment_context = function(dbname, name, deleteData, environment_context) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('drop_table_with_environment_context', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_drop_table_with_environment_context_args()
  args.dbname = dbname
  args.name = name
  args.deleteData = deleteData
  args.environment_context = environment_context
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_drop_table_with_environment_context = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_drop_table_with_environment_context_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.get_tables = function(db_name, pattern, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_tables(db_name, pattern)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_tables(db_name, pattern)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_tables = function(db_name, pattern) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_tables', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_tables_args()
  args.db_name = db_name
  args.pattern = pattern
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_tables = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_tables_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_tables failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_table_meta = function(db_patterns, tbl_patterns, tbl_types, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_table_meta(db_patterns, tbl_patterns, tbl_types)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_table_meta(db_patterns, tbl_patterns, tbl_types)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_table_meta = function(db_patterns, tbl_patterns, tbl_types) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_table_meta', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_table_meta_args()
  args.db_patterns = db_patterns
  args.tbl_patterns = tbl_patterns
  args.tbl_types = tbl_types
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_table_meta = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_table_meta_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_table_meta failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_all_tables = function(db_name, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_all_tables(db_name)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_all_tables(db_name)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_all_tables = function(db_name) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_all_tables', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_all_tables_args()
  args.db_name = db_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_all_tables = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_all_tables_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_all_tables failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_table = function(dbname, tbl_name, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_table(dbname, tbl_name)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_table(dbname, tbl_name)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_table = function(dbname, tbl_name) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_table', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_table_args()
  args.dbname = dbname
  args.tbl_name = tbl_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_table_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_table failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_table_objects_by_name = function(dbname, tbl_names, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_table_objects_by_name(dbname, tbl_names)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_table_objects_by_name(dbname, tbl_names)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_table_objects_by_name = function(dbname, tbl_names) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_table_objects_by_name', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_table_objects_by_name_args()
  args.dbname = dbname
  args.tbl_names = tbl_names
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_table_objects_by_name = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_table_objects_by_name_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_table_objects_by_name failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_table_names_by_filter = function(dbname, filter, max_tables, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_table_names_by_filter(dbname, filter, max_tables)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_table_names_by_filter(dbname, filter, max_tables)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_table_names_by_filter = function(dbname, filter, max_tables) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_table_names_by_filter', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_table_names_by_filter_args()
  args.dbname = dbname
  args.filter = filter
  args.max_tables = max_tables
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_table_names_by_filter = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_table_names_by_filter_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_table_names_by_filter failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.alter_table = function(dbname, tbl_name, new_tbl, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_alter_table(dbname, tbl_name, new_tbl)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_alter_table(dbname, tbl_name, new_tbl)
  }
}

ThriftHiveMetastoreClient.prototype.send_alter_table = function(dbname, tbl_name, new_tbl) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('alter_table', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_alter_table_args()
  args.dbname = dbname
  args.tbl_name = tbl_name
  args.new_tbl = new_tbl
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_alter_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_alter_table_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.alter_table_with_environment_context = function(dbname, tbl_name, new_tbl, environment_context, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_alter_table_with_environment_context(dbname, tbl_name, new_tbl, environment_context)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_alter_table_with_environment_context(dbname, tbl_name, new_tbl, environment_context)
  }
}

ThriftHiveMetastoreClient.prototype.send_alter_table_with_environment_context = function(dbname, tbl_name, new_tbl, environment_context) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('alter_table_with_environment_context', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_alter_table_with_environment_context_args()
  args.dbname = dbname
  args.tbl_name = tbl_name
  args.new_tbl = new_tbl
  args.environment_context = environment_context
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_alter_table_with_environment_context = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_alter_table_with_environment_context_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.alter_table_with_cascade = function(dbname, tbl_name, new_tbl, cascade, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_alter_table_with_cascade(dbname, tbl_name, new_tbl, cascade)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_alter_table_with_cascade(dbname, tbl_name, new_tbl, cascade)
  }
}

ThriftHiveMetastoreClient.prototype.send_alter_table_with_cascade = function(dbname, tbl_name, new_tbl, cascade) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('alter_table_with_cascade', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_alter_table_with_cascade_args()
  args.dbname = dbname
  args.tbl_name = tbl_name
  args.new_tbl = new_tbl
  args.cascade = cascade
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_alter_table_with_cascade = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_alter_table_with_cascade_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.add_partition = function(new_part, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_add_partition(new_part)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_add_partition(new_part)
  }
}

ThriftHiveMetastoreClient.prototype.send_add_partition = function(new_part) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('add_partition', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_add_partition_args()
  args.new_part = new_part
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_add_partition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_add_partition_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('add_partition failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.add_partition_with_environment_context = function(new_part, environment_context, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_add_partition_with_environment_context(new_part, environment_context)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_add_partition_with_environment_context(new_part, environment_context)
  }
}

ThriftHiveMetastoreClient.prototype.send_add_partition_with_environment_context = function(new_part, environment_context) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('add_partition_with_environment_context', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_add_partition_with_environment_context_args()
  args.new_part = new_part
  args.environment_context = environment_context
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_add_partition_with_environment_context = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_add_partition_with_environment_context_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('add_partition_with_environment_context failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.add_partitions = function(new_parts, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_add_partitions(new_parts)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_add_partitions(new_parts)
  }
}

ThriftHiveMetastoreClient.prototype.send_add_partitions = function(new_parts) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('add_partitions', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_add_partitions_args()
  args.new_parts = new_parts
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_add_partitions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_add_partitions_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('add_partitions failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.add_partitions_pspec = function(new_parts, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_add_partitions_pspec(new_parts)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_add_partitions_pspec(new_parts)
  }
}

ThriftHiveMetastoreClient.prototype.send_add_partitions_pspec = function(new_parts) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('add_partitions_pspec', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_add_partitions_pspec_args()
  args.new_parts = new_parts
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_add_partitions_pspec = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_add_partitions_pspec_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('add_partitions_pspec failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.append_partition = function(db_name, tbl_name, part_vals, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_append_partition(db_name, tbl_name, part_vals)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_append_partition(db_name, tbl_name, part_vals)
  }
}

ThriftHiveMetastoreClient.prototype.send_append_partition = function(db_name, tbl_name, part_vals) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('append_partition', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_append_partition_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_vals = part_vals
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_append_partition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_append_partition_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('append_partition failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.add_partitions_req = function(request, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_add_partitions_req(request)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_add_partitions_req(request)
  }
}

ThriftHiveMetastoreClient.prototype.send_add_partitions_req = function(request) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('add_partitions_req', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_add_partitions_req_args()
  args.request = request
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_add_partitions_req = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_add_partitions_req_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('add_partitions_req failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.append_partition_with_environment_context = function(db_name, tbl_name, part_vals, environment_context, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_append_partition_with_environment_context(db_name, tbl_name, part_vals, environment_context)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_append_partition_with_environment_context(db_name, tbl_name, part_vals, environment_context)
  }
}

ThriftHiveMetastoreClient.prototype.send_append_partition_with_environment_context = function(db_name, tbl_name, part_vals, environment_context) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('append_partition_with_environment_context', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_append_partition_with_environment_context_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_vals = part_vals
  args.environment_context = environment_context
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_append_partition_with_environment_context = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_append_partition_with_environment_context_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('append_partition_with_environment_context failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.append_partition_by_name = function(db_name, tbl_name, part_name, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_append_partition_by_name(db_name, tbl_name, part_name)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_append_partition_by_name(db_name, tbl_name, part_name)
  }
}

ThriftHiveMetastoreClient.prototype.send_append_partition_by_name = function(db_name, tbl_name, part_name) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('append_partition_by_name', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_append_partition_by_name_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_name = part_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_append_partition_by_name = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_append_partition_by_name_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('append_partition_by_name failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.append_partition_by_name_with_environment_context = function(db_name, tbl_name, part_name, environment_context, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_append_partition_by_name_with_environment_context(db_name, tbl_name, part_name, environment_context)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_append_partition_by_name_with_environment_context(db_name, tbl_name, part_name, environment_context)
  }
}

ThriftHiveMetastoreClient.prototype.send_append_partition_by_name_with_environment_context = function(db_name, tbl_name, part_name, environment_context) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('append_partition_by_name_with_environment_context', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_append_partition_by_name_with_environment_context_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_name = part_name
  args.environment_context = environment_context
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_append_partition_by_name_with_environment_context = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_append_partition_by_name_with_environment_context_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('append_partition_by_name_with_environment_context failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.drop_partition = function(db_name, tbl_name, part_vals, deleteData, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_drop_partition(db_name, tbl_name, part_vals, deleteData)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_drop_partition(db_name, tbl_name, part_vals, deleteData)
  }
}

ThriftHiveMetastoreClient.prototype.send_drop_partition = function(db_name, tbl_name, part_vals, deleteData) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('drop_partition', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_drop_partition_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_vals = part_vals
  args.deleteData = deleteData
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_drop_partition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_drop_partition_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('drop_partition failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.drop_partition_with_environment_context = function(db_name, tbl_name, part_vals, deleteData, environment_context, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_drop_partition_with_environment_context(db_name, tbl_name, part_vals, deleteData, environment_context)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_drop_partition_with_environment_context(db_name, tbl_name, part_vals, deleteData, environment_context)
  }
}

ThriftHiveMetastoreClient.prototype.send_drop_partition_with_environment_context = function(db_name, tbl_name, part_vals, deleteData, environment_context) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('drop_partition_with_environment_context', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_drop_partition_with_environment_context_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_vals = part_vals
  args.deleteData = deleteData
  args.environment_context = environment_context
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_drop_partition_with_environment_context = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_drop_partition_with_environment_context_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('drop_partition_with_environment_context failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.drop_partition_by_name = function(db_name, tbl_name, part_name, deleteData, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_drop_partition_by_name(db_name, tbl_name, part_name, deleteData)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_drop_partition_by_name(db_name, tbl_name, part_name, deleteData)
  }
}

ThriftHiveMetastoreClient.prototype.send_drop_partition_by_name = function(db_name, tbl_name, part_name, deleteData) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('drop_partition_by_name', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_drop_partition_by_name_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_name = part_name
  args.deleteData = deleteData
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_drop_partition_by_name = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_drop_partition_by_name_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('drop_partition_by_name failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.drop_partition_by_name_with_environment_context = function(db_name, tbl_name, part_name, deleteData, environment_context, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_drop_partition_by_name_with_environment_context(db_name, tbl_name, part_name, deleteData, environment_context)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_drop_partition_by_name_with_environment_context(db_name, tbl_name, part_name, deleteData, environment_context)
  }
}

ThriftHiveMetastoreClient.prototype.send_drop_partition_by_name_with_environment_context = function(db_name, tbl_name, part_name, deleteData, environment_context) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('drop_partition_by_name_with_environment_context', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_drop_partition_by_name_with_environment_context_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_name = part_name
  args.deleteData = deleteData
  args.environment_context = environment_context
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_drop_partition_by_name_with_environment_context = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_drop_partition_by_name_with_environment_context_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('drop_partition_by_name_with_environment_context failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.drop_partitions_req = function(req, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_drop_partitions_req(req)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_drop_partitions_req(req)
  }
}

ThriftHiveMetastoreClient.prototype.send_drop_partitions_req = function(req) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('drop_partitions_req', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_drop_partitions_req_args()
  args.req = req
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_drop_partitions_req = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_drop_partitions_req_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('drop_partitions_req failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_partition = function(db_name, tbl_name, part_vals, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_partition(db_name, tbl_name, part_vals)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_partition(db_name, tbl_name, part_vals)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_partition = function(db_name, tbl_name, part_vals) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_partition', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_partition_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_vals = part_vals
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_partition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_partition_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_partition failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.exchange_partition = function(partitionSpecs, source_db, source_table_name, dest_db, dest_table_name, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_exchange_partition(partitionSpecs, source_db, source_table_name, dest_db, dest_table_name)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_exchange_partition(partitionSpecs, source_db, source_table_name, dest_db, dest_table_name)
  }
}

ThriftHiveMetastoreClient.prototype.send_exchange_partition = function(partitionSpecs, source_db, source_table_name, dest_db, dest_table_name) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('exchange_partition', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_exchange_partition_args()
  args.partitionSpecs = partitionSpecs
  args.source_db = source_db
  args.source_table_name = source_table_name
  args.dest_db = dest_db
  args.dest_table_name = dest_table_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_exchange_partition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_exchange_partition_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  if (null !== result.o4) {
    return callback(result.o4)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('exchange_partition failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.exchange_partitions = function(partitionSpecs, source_db, source_table_name, dest_db, dest_table_name, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_exchange_partitions(partitionSpecs, source_db, source_table_name, dest_db, dest_table_name)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_exchange_partitions(partitionSpecs, source_db, source_table_name, dest_db, dest_table_name)
  }
}

ThriftHiveMetastoreClient.prototype.send_exchange_partitions = function(partitionSpecs, source_db, source_table_name, dest_db, dest_table_name) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('exchange_partitions', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_exchange_partitions_args()
  args.partitionSpecs = partitionSpecs
  args.source_db = source_db
  args.source_table_name = source_table_name
  args.dest_db = dest_db
  args.dest_table_name = dest_table_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_exchange_partitions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_exchange_partitions_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  if (null !== result.o4) {
    return callback(result.o4)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('exchange_partitions failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_partition_with_auth = function(db_name, tbl_name, part_vals, user_name, group_names, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_partition_with_auth(db_name, tbl_name, part_vals, user_name, group_names)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_partition_with_auth(db_name, tbl_name, part_vals, user_name, group_names)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_partition_with_auth = function(db_name, tbl_name, part_vals, user_name, group_names) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_partition_with_auth', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_partition_with_auth_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_vals = part_vals
  args.user_name = user_name
  args.group_names = group_names
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_partition_with_auth = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_partition_with_auth_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_partition_with_auth failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_partition_by_name = function(db_name, tbl_name, part_name, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_partition_by_name(db_name, tbl_name, part_name)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_partition_by_name(db_name, tbl_name, part_name)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_partition_by_name = function(db_name, tbl_name, part_name) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_partition_by_name', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_partition_by_name_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_name = part_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_partition_by_name = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_partition_by_name_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_partition_by_name failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_partitions = function(db_name, tbl_name, max_parts, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_partitions(db_name, tbl_name, max_parts)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_partitions(db_name, tbl_name, max_parts)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_partitions = function(db_name, tbl_name, max_parts) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_partitions', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_partitions_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.max_parts = max_parts
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_partitions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_partitions_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_partitions failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_partitions_with_auth = function(db_name, tbl_name, max_parts, user_name, group_names, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_partitions_with_auth(db_name, tbl_name, max_parts, user_name, group_names)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_partitions_with_auth(db_name, tbl_name, max_parts, user_name, group_names)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_partitions_with_auth = function(db_name, tbl_name, max_parts, user_name, group_names) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_partitions_with_auth', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_partitions_with_auth_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.max_parts = max_parts
  args.user_name = user_name
  args.group_names = group_names
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_partitions_with_auth = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_partitions_with_auth_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_partitions_with_auth failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_partitions_pspec = function(db_name, tbl_name, max_parts, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_partitions_pspec(db_name, tbl_name, max_parts)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_partitions_pspec(db_name, tbl_name, max_parts)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_partitions_pspec = function(db_name, tbl_name, max_parts) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_partitions_pspec', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_partitions_pspec_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.max_parts = max_parts
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_partitions_pspec = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_partitions_pspec_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_partitions_pspec failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_partition_names = function(db_name, tbl_name, max_parts, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_partition_names(db_name, tbl_name, max_parts)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_partition_names(db_name, tbl_name, max_parts)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_partition_names = function(db_name, tbl_name, max_parts) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_partition_names', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_partition_names_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.max_parts = max_parts
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_partition_names = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_partition_names_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_partition_names failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_partitions_ps = function(db_name, tbl_name, part_vals, max_parts, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_partitions_ps(db_name, tbl_name, part_vals, max_parts)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_partitions_ps(db_name, tbl_name, part_vals, max_parts)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_partitions_ps = function(db_name, tbl_name, part_vals, max_parts) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_partitions_ps', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_partitions_ps_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_vals = part_vals
  args.max_parts = max_parts
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_partitions_ps = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_partitions_ps_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_partitions_ps failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_partitions_ps_with_auth = function(db_name, tbl_name, part_vals, max_parts, user_name, group_names, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_partitions_ps_with_auth(db_name, tbl_name, part_vals, max_parts, user_name, group_names)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_partitions_ps_with_auth(db_name, tbl_name, part_vals, max_parts, user_name, group_names)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_partitions_ps_with_auth = function(db_name, tbl_name, part_vals, max_parts, user_name, group_names) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_partitions_ps_with_auth', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_partitions_ps_with_auth_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_vals = part_vals
  args.max_parts = max_parts
  args.user_name = user_name
  args.group_names = group_names
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_partitions_ps_with_auth = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_partitions_ps_with_auth_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_partitions_ps_with_auth failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_partition_names_ps = function(db_name, tbl_name, part_vals, max_parts, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_partition_names_ps(db_name, tbl_name, part_vals, max_parts)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_partition_names_ps(db_name, tbl_name, part_vals, max_parts)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_partition_names_ps = function(db_name, tbl_name, part_vals, max_parts) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_partition_names_ps', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_partition_names_ps_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_vals = part_vals
  args.max_parts = max_parts
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_partition_names_ps = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_partition_names_ps_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_partition_names_ps failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_partitions_by_filter = function(db_name, tbl_name, filter, max_parts, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_partitions_by_filter(db_name, tbl_name, filter, max_parts)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_partitions_by_filter(db_name, tbl_name, filter, max_parts)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_partitions_by_filter = function(db_name, tbl_name, filter, max_parts) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_partitions_by_filter', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_partitions_by_filter_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.filter = filter
  args.max_parts = max_parts
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_partitions_by_filter = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_partitions_by_filter_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_partitions_by_filter failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_part_specs_by_filter = function(db_name, tbl_name, filter, max_parts, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_part_specs_by_filter(db_name, tbl_name, filter, max_parts)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_part_specs_by_filter(db_name, tbl_name, filter, max_parts)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_part_specs_by_filter = function(db_name, tbl_name, filter, max_parts) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_part_specs_by_filter', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_part_specs_by_filter_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.filter = filter
  args.max_parts = max_parts
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_part_specs_by_filter = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_part_specs_by_filter_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_part_specs_by_filter failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_partitions_by_expr = function(req, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_partitions_by_expr(req)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_partitions_by_expr(req)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_partitions_by_expr = function(req) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_partitions_by_expr', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_partitions_by_expr_args()
  args.req = req
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_partitions_by_expr = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_partitions_by_expr_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_partitions_by_expr failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_num_partitions_by_filter = function(db_name, tbl_name, filter, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_num_partitions_by_filter(db_name, tbl_name, filter)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_num_partitions_by_filter(db_name, tbl_name, filter)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_num_partitions_by_filter = function(db_name, tbl_name, filter) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_num_partitions_by_filter', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_num_partitions_by_filter_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.filter = filter
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_num_partitions_by_filter = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_num_partitions_by_filter_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_num_partitions_by_filter failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_partitions_by_names = function(db_name, tbl_name, names, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_partitions_by_names(db_name, tbl_name, names)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_partitions_by_names(db_name, tbl_name, names)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_partitions_by_names = function(db_name, tbl_name, names) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_partitions_by_names', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_partitions_by_names_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.names = names
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_partitions_by_names = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_partitions_by_names_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_partitions_by_names failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.alter_partition = function(db_name, tbl_name, new_part, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_alter_partition(db_name, tbl_name, new_part)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_alter_partition(db_name, tbl_name, new_part)
  }
}

ThriftHiveMetastoreClient.prototype.send_alter_partition = function(db_name, tbl_name, new_part) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('alter_partition', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_alter_partition_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.new_part = new_part
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_alter_partition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_alter_partition_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.alter_partitions = function(db_name, tbl_name, new_parts, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_alter_partitions(db_name, tbl_name, new_parts)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_alter_partitions(db_name, tbl_name, new_parts)
  }
}

ThriftHiveMetastoreClient.prototype.send_alter_partitions = function(db_name, tbl_name, new_parts) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('alter_partitions', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_alter_partitions_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.new_parts = new_parts
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_alter_partitions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_alter_partitions_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.alter_partitions_with_environment_context = function(db_name, tbl_name, new_parts, environment_context, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_alter_partitions_with_environment_context(db_name, tbl_name, new_parts, environment_context)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_alter_partitions_with_environment_context(db_name, tbl_name, new_parts, environment_context)
  }
}

ThriftHiveMetastoreClient.prototype.send_alter_partitions_with_environment_context = function(db_name, tbl_name, new_parts, environment_context) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('alter_partitions_with_environment_context', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_alter_partitions_with_environment_context_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.new_parts = new_parts
  args.environment_context = environment_context
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_alter_partitions_with_environment_context = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_alter_partitions_with_environment_context_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.alter_partition_with_environment_context = function(db_name, tbl_name, new_part, environment_context, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_alter_partition_with_environment_context(db_name, tbl_name, new_part, environment_context)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_alter_partition_with_environment_context(db_name, tbl_name, new_part, environment_context)
  }
}

ThriftHiveMetastoreClient.prototype.send_alter_partition_with_environment_context = function(db_name, tbl_name, new_part, environment_context) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('alter_partition_with_environment_context', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_alter_partition_with_environment_context_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.new_part = new_part
  args.environment_context = environment_context
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_alter_partition_with_environment_context = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_alter_partition_with_environment_context_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.rename_partition = function(db_name, tbl_name, part_vals, new_part, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_rename_partition(db_name, tbl_name, part_vals, new_part)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_rename_partition(db_name, tbl_name, part_vals, new_part)
  }
}

ThriftHiveMetastoreClient.prototype.send_rename_partition = function(db_name, tbl_name, part_vals, new_part) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('rename_partition', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_rename_partition_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_vals = part_vals
  args.new_part = new_part
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_rename_partition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_rename_partition_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.partition_name_has_valid_characters = function(part_vals, throw_exception, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_partition_name_has_valid_characters(part_vals, throw_exception)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_partition_name_has_valid_characters(part_vals, throw_exception)
  }
}

ThriftHiveMetastoreClient.prototype.send_partition_name_has_valid_characters = function(part_vals, throw_exception) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('partition_name_has_valid_characters', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_partition_name_has_valid_characters_args()
  args.part_vals = part_vals
  args.throw_exception = throw_exception
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_partition_name_has_valid_characters = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_partition_name_has_valid_characters_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('partition_name_has_valid_characters failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_config_value = function(name, defaultValue, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_config_value(name, defaultValue)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_config_value(name, defaultValue)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_config_value = function(name, defaultValue) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_config_value', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_config_value_args()
  args.name = name
  args.defaultValue = defaultValue
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_config_value = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_config_value_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_config_value failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.partition_name_to_vals = function(part_name, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_partition_name_to_vals(part_name)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_partition_name_to_vals(part_name)
  }
}

ThriftHiveMetastoreClient.prototype.send_partition_name_to_vals = function(part_name) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('partition_name_to_vals', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_partition_name_to_vals_args()
  args.part_name = part_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_partition_name_to_vals = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_partition_name_to_vals_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('partition_name_to_vals failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.partition_name_to_spec = function(part_name, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_partition_name_to_spec(part_name)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_partition_name_to_spec(part_name)
  }
}

ThriftHiveMetastoreClient.prototype.send_partition_name_to_spec = function(part_name) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('partition_name_to_spec', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_partition_name_to_spec_args()
  args.part_name = part_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_partition_name_to_spec = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_partition_name_to_spec_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('partition_name_to_spec failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.markPartitionForEvent = function(db_name, tbl_name, part_vals, eventType, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_markPartitionForEvent(db_name, tbl_name, part_vals, eventType)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_markPartitionForEvent(db_name, tbl_name, part_vals, eventType)
  }
}

ThriftHiveMetastoreClient.prototype.send_markPartitionForEvent = function(db_name, tbl_name, part_vals, eventType) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('markPartitionForEvent', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_markPartitionForEvent_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_vals = part_vals
  args.eventType = eventType
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_markPartitionForEvent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_markPartitionForEvent_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  if (null !== result.o4) {
    return callback(result.o4)
  }
  if (null !== result.o5) {
    return callback(result.o5)
  }
  if (null !== result.o6) {
    return callback(result.o6)
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.isPartitionMarkedForEvent = function(db_name, tbl_name, part_vals, eventType, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_isPartitionMarkedForEvent(db_name, tbl_name, part_vals, eventType)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_isPartitionMarkedForEvent(db_name, tbl_name, part_vals, eventType)
  }
}

ThriftHiveMetastoreClient.prototype.send_isPartitionMarkedForEvent = function(db_name, tbl_name, part_vals, eventType) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('isPartitionMarkedForEvent', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_isPartitionMarkedForEvent_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_vals = part_vals
  args.eventType = eventType
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_isPartitionMarkedForEvent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_isPartitionMarkedForEvent_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  if (null !== result.o4) {
    return callback(result.o4)
  }
  if (null !== result.o5) {
    return callback(result.o5)
  }
  if (null !== result.o6) {
    return callback(result.o6)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('isPartitionMarkedForEvent failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.add_index = function(new_index, index_table, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_add_index(new_index, index_table)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_add_index(new_index, index_table)
  }
}

ThriftHiveMetastoreClient.prototype.send_add_index = function(new_index, index_table) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('add_index', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_add_index_args()
  args.new_index = new_index
  args.index_table = index_table
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_add_index = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_add_index_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('add_index failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.alter_index = function(dbname, base_tbl_name, idx_name, new_idx, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_alter_index(dbname, base_tbl_name, idx_name, new_idx)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_alter_index(dbname, base_tbl_name, idx_name, new_idx)
  }
}

ThriftHiveMetastoreClient.prototype.send_alter_index = function(dbname, base_tbl_name, idx_name, new_idx) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('alter_index', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_alter_index_args()
  args.dbname = dbname
  args.base_tbl_name = base_tbl_name
  args.idx_name = idx_name
  args.new_idx = new_idx
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_alter_index = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_alter_index_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.drop_index_by_name = function(db_name, tbl_name, index_name, deleteData, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_drop_index_by_name(db_name, tbl_name, index_name, deleteData)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_drop_index_by_name(db_name, tbl_name, index_name, deleteData)
  }
}

ThriftHiveMetastoreClient.prototype.send_drop_index_by_name = function(db_name, tbl_name, index_name, deleteData) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('drop_index_by_name', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_drop_index_by_name_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.index_name = index_name
  args.deleteData = deleteData
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_drop_index_by_name = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_drop_index_by_name_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('drop_index_by_name failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_index_by_name = function(db_name, tbl_name, index_name, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_index_by_name(db_name, tbl_name, index_name)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_index_by_name(db_name, tbl_name, index_name)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_index_by_name = function(db_name, tbl_name, index_name) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_index_by_name', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_index_by_name_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.index_name = index_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_index_by_name = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_index_by_name_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_index_by_name failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_indexes = function(db_name, tbl_name, max_indexes, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_indexes(db_name, tbl_name, max_indexes)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_indexes(db_name, tbl_name, max_indexes)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_indexes = function(db_name, tbl_name, max_indexes) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_indexes', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_indexes_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.max_indexes = max_indexes
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_indexes = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_indexes_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_indexes failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_index_names = function(db_name, tbl_name, max_indexes, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_index_names(db_name, tbl_name, max_indexes)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_index_names(db_name, tbl_name, max_indexes)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_index_names = function(db_name, tbl_name, max_indexes) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_index_names', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_index_names_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.max_indexes = max_indexes
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_index_names = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_index_names_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_index_names failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_primary_keys = function(request, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_primary_keys(request)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_primary_keys(request)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_primary_keys = function(request) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_primary_keys', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_primary_keys_args()
  args.request = request
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_primary_keys = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_primary_keys_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_primary_keys failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_foreign_keys = function(request, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_foreign_keys(request)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_foreign_keys(request)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_foreign_keys = function(request) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_foreign_keys', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_foreign_keys_args()
  args.request = request
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_foreign_keys = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_foreign_keys_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_foreign_keys failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.update_table_column_statistics = function(stats_obj, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_update_table_column_statistics(stats_obj)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_update_table_column_statistics(stats_obj)
  }
}

ThriftHiveMetastoreClient.prototype.send_update_table_column_statistics = function(stats_obj) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('update_table_column_statistics', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_update_table_column_statistics_args()
  args.stats_obj = stats_obj
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_update_table_column_statistics = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_update_table_column_statistics_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  if (null !== result.o4) {
    return callback(result.o4)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('update_table_column_statistics failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.update_partition_column_statistics = function(stats_obj, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_update_partition_column_statistics(stats_obj)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_update_partition_column_statistics(stats_obj)
  }
}

ThriftHiveMetastoreClient.prototype.send_update_partition_column_statistics = function(stats_obj) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('update_partition_column_statistics', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_update_partition_column_statistics_args()
  args.stats_obj = stats_obj
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_update_partition_column_statistics = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_update_partition_column_statistics_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  if (null !== result.o4) {
    return callback(result.o4)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('update_partition_column_statistics failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_table_column_statistics = function(db_name, tbl_name, col_name, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_table_column_statistics(db_name, tbl_name, col_name)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_table_column_statistics(db_name, tbl_name, col_name)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_table_column_statistics = function(db_name, tbl_name, col_name) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_table_column_statistics', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_table_column_statistics_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.col_name = col_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_table_column_statistics = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_table_column_statistics_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  if (null !== result.o4) {
    return callback(result.o4)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_table_column_statistics failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_partition_column_statistics = function(db_name, tbl_name, part_name, col_name, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_partition_column_statistics(db_name, tbl_name, part_name, col_name)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_partition_column_statistics(db_name, tbl_name, part_name, col_name)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_partition_column_statistics = function(db_name, tbl_name, part_name, col_name) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_partition_column_statistics', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_partition_column_statistics_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_name = part_name
  args.col_name = col_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_partition_column_statistics = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_partition_column_statistics_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  if (null !== result.o4) {
    return callback(result.o4)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_partition_column_statistics failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_table_statistics_req = function(request, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_table_statistics_req(request)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_table_statistics_req(request)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_table_statistics_req = function(request) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_table_statistics_req', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_table_statistics_req_args()
  args.request = request
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_table_statistics_req = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_table_statistics_req_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_table_statistics_req failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_partitions_statistics_req = function(request, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_partitions_statistics_req(request)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_partitions_statistics_req(request)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_partitions_statistics_req = function(request) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_partitions_statistics_req', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_partitions_statistics_req_args()
  args.request = request
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_partitions_statistics_req = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_partitions_statistics_req_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_partitions_statistics_req failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_aggr_stats_for = function(request, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_aggr_stats_for(request)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_aggr_stats_for(request)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_aggr_stats_for = function(request) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_aggr_stats_for', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_aggr_stats_for_args()
  args.request = request
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_aggr_stats_for = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_aggr_stats_for_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_aggr_stats_for failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.set_aggr_stats_for = function(request, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_set_aggr_stats_for(request)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_set_aggr_stats_for(request)
  }
}

ThriftHiveMetastoreClient.prototype.send_set_aggr_stats_for = function(request) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('set_aggr_stats_for', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_set_aggr_stats_for_args()
  args.request = request
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_set_aggr_stats_for = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_set_aggr_stats_for_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  if (null !== result.o4) {
    return callback(result.o4)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('set_aggr_stats_for failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.delete_partition_column_statistics = function(db_name, tbl_name, part_name, col_name, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_delete_partition_column_statistics(db_name, tbl_name, part_name, col_name)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_delete_partition_column_statistics(db_name, tbl_name, part_name, col_name)
  }
}

ThriftHiveMetastoreClient.prototype.send_delete_partition_column_statistics = function(db_name, tbl_name, part_name, col_name) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('delete_partition_column_statistics', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_delete_partition_column_statistics_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_name = part_name
  args.col_name = col_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_delete_partition_column_statistics = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_delete_partition_column_statistics_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  if (null !== result.o4) {
    return callback(result.o4)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('delete_partition_column_statistics failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.delete_table_column_statistics = function(db_name, tbl_name, col_name, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_delete_table_column_statistics(db_name, tbl_name, col_name)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_delete_table_column_statistics(db_name, tbl_name, col_name)
  }
}

ThriftHiveMetastoreClient.prototype.send_delete_table_column_statistics = function(db_name, tbl_name, col_name) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('delete_table_column_statistics', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_delete_table_column_statistics_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.col_name = col_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_delete_table_column_statistics = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_delete_table_column_statistics_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  if (null !== result.o4) {
    return callback(result.o4)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('delete_table_column_statistics failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.create_function = function(func, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_create_function(func)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_create_function(func)
  }
}

ThriftHiveMetastoreClient.prototype.send_create_function = function(func) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('create_function', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_create_function_args()
  args.func = func
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_create_function = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_create_function_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  if (null !== result.o4) {
    return callback(result.o4)
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.drop_function = function(dbName, funcName, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_drop_function(dbName, funcName)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_drop_function(dbName, funcName)
  }
}

ThriftHiveMetastoreClient.prototype.send_drop_function = function(dbName, funcName) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('drop_function', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_drop_function_args()
  args.dbName = dbName
  args.funcName = funcName
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_drop_function = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_drop_function_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.alter_function = function(dbName, funcName, newFunc, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_alter_function(dbName, funcName, newFunc)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_alter_function(dbName, funcName, newFunc)
  }
}

ThriftHiveMetastoreClient.prototype.send_alter_function = function(dbName, funcName, newFunc) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('alter_function', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_alter_function_args()
  args.dbName = dbName
  args.funcName = funcName
  args.newFunc = newFunc
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_alter_function = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_alter_function_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.get_functions = function(dbName, pattern, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_functions(dbName, pattern)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_functions(dbName, pattern)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_functions = function(dbName, pattern) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_functions', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_functions_args()
  args.dbName = dbName
  args.pattern = pattern
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_functions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_functions_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_functions failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_function = function(dbName, funcName, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_function(dbName, funcName)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_function(dbName, funcName)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_function = function(dbName, funcName) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_function', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_function_args()
  args.dbName = dbName
  args.funcName = funcName
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_function = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_function_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_function failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_all_functions = function(callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_all_functions()
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_all_functions()
  }
}

ThriftHiveMetastoreClient.prototype.send_get_all_functions = function() {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_all_functions', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_all_functions_args()
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_all_functions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_all_functions_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_all_functions failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.create_role = function(role, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_create_role(role)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_create_role(role)
  }
}

ThriftHiveMetastoreClient.prototype.send_create_role = function(role) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('create_role', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_create_role_args()
  args.role = role
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_create_role = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_create_role_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('create_role failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.drop_role = function(role_name, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_drop_role(role_name)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_drop_role(role_name)
  }
}

ThriftHiveMetastoreClient.prototype.send_drop_role = function(role_name) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('drop_role', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_drop_role_args()
  args.role_name = role_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_drop_role = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_drop_role_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('drop_role failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_role_names = function(callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_role_names()
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_role_names()
  }
}

ThriftHiveMetastoreClient.prototype.send_get_role_names = function() {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_role_names', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_role_names_args()
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_role_names = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_role_names_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_role_names failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.grant_role = function(role_name, principal_name, principal_type, grantor, grantorType, grant_option, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_grant_role(role_name, principal_name, principal_type, grantor, grantorType, grant_option)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_grant_role(role_name, principal_name, principal_type, grantor, grantorType, grant_option)
  }
}

ThriftHiveMetastoreClient.prototype.send_grant_role = function(role_name, principal_name, principal_type, grantor, grantorType, grant_option) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('grant_role', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_grant_role_args()
  args.role_name = role_name
  args.principal_name = principal_name
  args.principal_type = principal_type
  args.grantor = grantor
  args.grantorType = grantorType
  args.grant_option = grant_option
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_grant_role = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_grant_role_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('grant_role failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.revoke_role = function(role_name, principal_name, principal_type, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_revoke_role(role_name, principal_name, principal_type)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_revoke_role(role_name, principal_name, principal_type)
  }
}

ThriftHiveMetastoreClient.prototype.send_revoke_role = function(role_name, principal_name, principal_type) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('revoke_role', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_revoke_role_args()
  args.role_name = role_name
  args.principal_name = principal_name
  args.principal_type = principal_type
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_revoke_role = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_revoke_role_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('revoke_role failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.list_roles = function(principal_name, principal_type, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_list_roles(principal_name, principal_type)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_list_roles(principal_name, principal_type)
  }
}

ThriftHiveMetastoreClient.prototype.send_list_roles = function(principal_name, principal_type) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('list_roles', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_list_roles_args()
  args.principal_name = principal_name
  args.principal_type = principal_type
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_list_roles = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_list_roles_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('list_roles failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.grant_revoke_role = function(request, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_grant_revoke_role(request)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_grant_revoke_role(request)
  }
}

ThriftHiveMetastoreClient.prototype.send_grant_revoke_role = function(request) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('grant_revoke_role', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_grant_revoke_role_args()
  args.request = request
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_grant_revoke_role = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_grant_revoke_role_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('grant_revoke_role failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_principals_in_role = function(request, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_principals_in_role(request)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_principals_in_role(request)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_principals_in_role = function(request) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_principals_in_role', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_principals_in_role_args()
  args.request = request
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_principals_in_role = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_principals_in_role_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_principals_in_role failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_role_grants_for_principal = function(request, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_role_grants_for_principal(request)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_role_grants_for_principal(request)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_role_grants_for_principal = function(request) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_role_grants_for_principal', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_role_grants_for_principal_args()
  args.request = request
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_role_grants_for_principal = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_role_grants_for_principal_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_role_grants_for_principal failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_privilege_set = function(hiveObject, user_name, group_names, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_privilege_set(hiveObject, user_name, group_names)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_privilege_set(hiveObject, user_name, group_names)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_privilege_set = function(hiveObject, user_name, group_names) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_privilege_set', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_privilege_set_args()
  args.hiveObject = hiveObject
  args.user_name = user_name
  args.group_names = group_names
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_privilege_set = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_privilege_set_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_privilege_set failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.list_privileges = function(principal_name, principal_type, hiveObject, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_list_privileges(principal_name, principal_type, hiveObject)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_list_privileges(principal_name, principal_type, hiveObject)
  }
}

ThriftHiveMetastoreClient.prototype.send_list_privileges = function(principal_name, principal_type, hiveObject) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('list_privileges', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_list_privileges_args()
  args.principal_name = principal_name
  args.principal_type = principal_type
  args.hiveObject = hiveObject
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_list_privileges = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_list_privileges_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('list_privileges failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.grant_privileges = function(privileges, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_grant_privileges(privileges)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_grant_privileges(privileges)
  }
}

ThriftHiveMetastoreClient.prototype.send_grant_privileges = function(privileges) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('grant_privileges', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_grant_privileges_args()
  args.privileges = privileges
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_grant_privileges = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_grant_privileges_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('grant_privileges failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.revoke_privileges = function(privileges, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_revoke_privileges(privileges)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_revoke_privileges(privileges)
  }
}

ThriftHiveMetastoreClient.prototype.send_revoke_privileges = function(privileges) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('revoke_privileges', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_revoke_privileges_args()
  args.privileges = privileges
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_revoke_privileges = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_revoke_privileges_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('revoke_privileges failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.grant_revoke_privileges = function(request, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_grant_revoke_privileges(request)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_grant_revoke_privileges(request)
  }
}

ThriftHiveMetastoreClient.prototype.send_grant_revoke_privileges = function(request) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('grant_revoke_privileges', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_grant_revoke_privileges_args()
  args.request = request
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_grant_revoke_privileges = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_grant_revoke_privileges_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('grant_revoke_privileges failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.set_ugi = function(user_name, group_names, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_set_ugi(user_name, group_names)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_set_ugi(user_name, group_names)
  }
}

ThriftHiveMetastoreClient.prototype.send_set_ugi = function(user_name, group_names) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('set_ugi', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_set_ugi_args()
  args.user_name = user_name
  args.group_names = group_names
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_set_ugi = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_set_ugi_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('set_ugi failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_delegation_token = function(token_owner, renewer_kerberos_principal_name, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_delegation_token(token_owner, renewer_kerberos_principal_name)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_delegation_token(token_owner, renewer_kerberos_principal_name)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_delegation_token = function(token_owner, renewer_kerberos_principal_name) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_delegation_token', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_delegation_token_args()
  args.token_owner = token_owner
  args.renewer_kerberos_principal_name = renewer_kerberos_principal_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_delegation_token = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_delegation_token_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_delegation_token failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.renew_delegation_token = function(token_str_form, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_renew_delegation_token(token_str_form)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_renew_delegation_token(token_str_form)
  }
}

ThriftHiveMetastoreClient.prototype.send_renew_delegation_token = function(token_str_form) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('renew_delegation_token', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_renew_delegation_token_args()
  args.token_str_form = token_str_form
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_renew_delegation_token = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_renew_delegation_token_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('renew_delegation_token failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.cancel_delegation_token = function(token_str_form, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_cancel_delegation_token(token_str_form)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_cancel_delegation_token(token_str_form)
  }
}

ThriftHiveMetastoreClient.prototype.send_cancel_delegation_token = function(token_str_form) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('cancel_delegation_token', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_cancel_delegation_token_args()
  args.token_str_form = token_str_form
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_cancel_delegation_token = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_cancel_delegation_token_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.add_token = function(token_identifier, delegation_token, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_add_token(token_identifier, delegation_token)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_add_token(token_identifier, delegation_token)
  }
}

ThriftHiveMetastoreClient.prototype.send_add_token = function(token_identifier, delegation_token) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('add_token', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_add_token_args()
  args.token_identifier = token_identifier
  args.delegation_token = delegation_token
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_add_token = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_add_token_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('add_token failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.remove_token = function(token_identifier, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_remove_token(token_identifier)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_remove_token(token_identifier)
  }
}

ThriftHiveMetastoreClient.prototype.send_remove_token = function(token_identifier) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('remove_token', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_remove_token_args()
  args.token_identifier = token_identifier
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_remove_token = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_remove_token_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('remove_token failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_token = function(token_identifier, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_token(token_identifier)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_token(token_identifier)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_token = function(token_identifier) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_token', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_token_args()
  args.token_identifier = token_identifier
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_token = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_token_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_token failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_all_token_identifiers = function(callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_all_token_identifiers()
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_all_token_identifiers()
  }
}

ThriftHiveMetastoreClient.prototype.send_get_all_token_identifiers = function() {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_all_token_identifiers', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_all_token_identifiers_args()
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_all_token_identifiers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_all_token_identifiers_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_all_token_identifiers failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.add_master_key = function(key, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_add_master_key(key)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_add_master_key(key)
  }
}

ThriftHiveMetastoreClient.prototype.send_add_master_key = function(key) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('add_master_key', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_add_master_key_args()
  args.key = key
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_add_master_key = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_add_master_key_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('add_master_key failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.update_master_key = function(seq_number, key, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_update_master_key(seq_number, key)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_update_master_key(seq_number, key)
  }
}

ThriftHiveMetastoreClient.prototype.send_update_master_key = function(seq_number, key) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('update_master_key', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_update_master_key_args()
  args.seq_number = seq_number
  args.key = key
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_update_master_key = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_update_master_key_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.remove_master_key = function(key_seq, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_remove_master_key(key_seq)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_remove_master_key(key_seq)
  }
}

ThriftHiveMetastoreClient.prototype.send_remove_master_key = function(key_seq) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('remove_master_key', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_remove_master_key_args()
  args.key_seq = key_seq
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_remove_master_key = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_remove_master_key_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('remove_master_key failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_master_keys = function(callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_master_keys()
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_master_keys()
  }
}

ThriftHiveMetastoreClient.prototype.send_get_master_keys = function() {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_master_keys', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_master_keys_args()
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_master_keys = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_master_keys_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_master_keys failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_open_txns = function(callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_open_txns()
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_open_txns()
  }
}

ThriftHiveMetastoreClient.prototype.send_get_open_txns = function() {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_open_txns', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_open_txns_args()
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_open_txns = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_open_txns_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_open_txns failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_open_txns_info = function(callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_open_txns_info()
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_open_txns_info()
  }
}

ThriftHiveMetastoreClient.prototype.send_get_open_txns_info = function() {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_open_txns_info', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_open_txns_info_args()
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_open_txns_info = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_open_txns_info_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_open_txns_info failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.open_txns = function(rqst, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_open_txns(rqst)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_open_txns(rqst)
  }
}

ThriftHiveMetastoreClient.prototype.send_open_txns = function(rqst) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('open_txns', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_open_txns_args()
  args.rqst = rqst
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_open_txns = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_open_txns_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('open_txns failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.abort_txn = function(rqst, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_abort_txn(rqst)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_abort_txn(rqst)
  }
}

ThriftHiveMetastoreClient.prototype.send_abort_txn = function(rqst) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('abort_txn', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_abort_txn_args()
  args.rqst = rqst
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_abort_txn = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_abort_txn_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.abort_txns = function(rqst, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_abort_txns(rqst)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_abort_txns(rqst)
  }
}

ThriftHiveMetastoreClient.prototype.send_abort_txns = function(rqst) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('abort_txns', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_abort_txns_args()
  args.rqst = rqst
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_abort_txns = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_abort_txns_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.commit_txn = function(rqst, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_commit_txn(rqst)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_commit_txn(rqst)
  }
}

ThriftHiveMetastoreClient.prototype.send_commit_txn = function(rqst) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('commit_txn', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_commit_txn_args()
  args.rqst = rqst
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_commit_txn = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_commit_txn_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.lock = function(rqst, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_lock(rqst)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_lock(rqst)
  }
}

ThriftHiveMetastoreClient.prototype.send_lock = function(rqst) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('lock', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_lock_args()
  args.rqst = rqst
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_lock = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_lock_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('lock failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.check_lock = function(rqst, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_check_lock(rqst)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_check_lock(rqst)
  }
}

ThriftHiveMetastoreClient.prototype.send_check_lock = function(rqst) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('check_lock', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_check_lock_args()
  args.rqst = rqst
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_check_lock = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_check_lock_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('check_lock failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.unlock = function(rqst, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_unlock(rqst)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_unlock(rqst)
  }
}

ThriftHiveMetastoreClient.prototype.send_unlock = function(rqst) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('unlock', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_unlock_args()
  args.rqst = rqst
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_unlock = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_unlock_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.show_locks = function(rqst, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_show_locks(rqst)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_show_locks(rqst)
  }
}

ThriftHiveMetastoreClient.prototype.send_show_locks = function(rqst) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('show_locks', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_show_locks_args()
  args.rqst = rqst
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_show_locks = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_show_locks_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('show_locks failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.heartbeat = function(ids, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_heartbeat(ids)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_heartbeat(ids)
  }
}

ThriftHiveMetastoreClient.prototype.send_heartbeat = function(ids) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('heartbeat', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_heartbeat_args()
  args.ids = ids
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_heartbeat = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_heartbeat_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  if (null !== result.o3) {
    return callback(result.o3)
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.heartbeat_txn_range = function(txns, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_heartbeat_txn_range(txns)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_heartbeat_txn_range(txns)
  }
}

ThriftHiveMetastoreClient.prototype.send_heartbeat_txn_range = function(txns) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('heartbeat_txn_range', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_heartbeat_txn_range_args()
  args.txns = txns
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_heartbeat_txn_range = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_heartbeat_txn_range_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('heartbeat_txn_range failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.compact = function(rqst, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_compact(rqst)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_compact(rqst)
  }
}

ThriftHiveMetastoreClient.prototype.send_compact = function(rqst) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('compact', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_compact_args()
  args.rqst = rqst
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_compact = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_compact_result()
  result.read(input)
  input.readMessageEnd()

  callback(null)
}
ThriftHiveMetastoreClient.prototype.show_compact = function(rqst, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_show_compact(rqst)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_show_compact(rqst)
  }
}

ThriftHiveMetastoreClient.prototype.send_show_compact = function(rqst) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('show_compact', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_show_compact_args()
  args.rqst = rqst
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_show_compact = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_show_compact_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('show_compact failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.add_dynamic_partitions = function(rqst, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_add_dynamic_partitions(rqst)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_add_dynamic_partitions(rqst)
  }
}

ThriftHiveMetastoreClient.prototype.send_add_dynamic_partitions = function(rqst) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('add_dynamic_partitions', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_add_dynamic_partitions_args()
  args.rqst = rqst
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_add_dynamic_partitions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_add_dynamic_partitions_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.o1) {
    return callback(result.o1)
  }
  if (null !== result.o2) {
    return callback(result.o2)
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.get_next_notification = function(rqst, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_next_notification(rqst)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_next_notification(rqst)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_next_notification = function(rqst) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_next_notification', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_next_notification_args()
  args.rqst = rqst
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_next_notification = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_next_notification_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_next_notification failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_current_notificationEventId = function(callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_current_notificationEventId()
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_current_notificationEventId()
  }
}

ThriftHiveMetastoreClient.prototype.send_get_current_notificationEventId = function() {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_current_notificationEventId', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_current_notificationEventId_args()
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_current_notificationEventId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_current_notificationEventId_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_current_notificationEventId failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.fire_listener_event = function(rqst, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_fire_listener_event(rqst)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_fire_listener_event(rqst)
  }
}

ThriftHiveMetastoreClient.prototype.send_fire_listener_event = function(rqst) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('fire_listener_event', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_fire_listener_event_args()
  args.rqst = rqst
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_fire_listener_event = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_fire_listener_event_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('fire_listener_event failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.flushCache = function(callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_flushCache()
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_flushCache()
  }
}

ThriftHiveMetastoreClient.prototype.send_flushCache = function() {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('flushCache', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_flushCache_args()
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_flushCache = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_flushCache_result()
  result.read(input)
  input.readMessageEnd()

  callback(null)
}
ThriftHiveMetastoreClient.prototype.get_file_metadata_by_expr = function(req, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_file_metadata_by_expr(req)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_file_metadata_by_expr(req)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_file_metadata_by_expr = function(req) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_file_metadata_by_expr', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_file_metadata_by_expr_args()
  args.req = req
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_file_metadata_by_expr = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_file_metadata_by_expr_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_file_metadata_by_expr failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.get_file_metadata = function(req, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_get_file_metadata(req)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_get_file_metadata(req)
  }
}

ThriftHiveMetastoreClient.prototype.send_get_file_metadata = function(req) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('get_file_metadata', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_get_file_metadata_args()
  args.req = req
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_file_metadata = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_get_file_metadata_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('get_file_metadata failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.put_file_metadata = function(req, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_put_file_metadata(req)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_put_file_metadata(req)
  }
}

ThriftHiveMetastoreClient.prototype.send_put_file_metadata = function(req) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('put_file_metadata', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_put_file_metadata_args()
  args.req = req
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_put_file_metadata = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_put_file_metadata_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('put_file_metadata failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.clear_file_metadata = function(req, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_clear_file_metadata(req)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_clear_file_metadata(req)
  }
}

ThriftHiveMetastoreClient.prototype.send_clear_file_metadata = function(req) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('clear_file_metadata', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_clear_file_metadata_args()
  args.req = req
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_clear_file_metadata = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_clear_file_metadata_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('clear_file_metadata failed: unknown result')
}
ThriftHiveMetastoreClient.prototype.cache_file_metadata = function(req, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    var _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_cache_file_metadata(req)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_cache_file_metadata(req)
  }
}

ThriftHiveMetastoreClient.prototype.send_cache_file_metadata = function(req) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('cache_file_metadata', Thrift.MessageType.CALL, this.seqid())
  var args = new ThriftHiveMetastore_cache_file_metadata_args()
  args.req = req
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_cache_file_metadata = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new ThriftHiveMetastore_cache_file_metadata_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('cache_file_metadata failed: unknown result')
}
var ThriftHiveMetastoreProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
Thrift.inherits(ThriftHiveMetastoreProcessor, FacebookServiceProcessor)
ThriftHiveMetastoreProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin()
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output)
  } else {
    input.skip(Thrift.Type.STRUCT)
    input.readMessageEnd()
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname)
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid)
    x.write(output)
    output.writeMessageEnd()
    output.flush()
  }
}

ThriftHiveMetastoreProcessor.prototype.process_getMetaConf = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_getMetaConf_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.getMetaConf.length === 1) {
    Q.fcall(this._handler.getMetaConf, args.key)
      .then(function(result) {
        var result = new ThriftHiveMetastore_getMetaConf_result({success: result})
        output.writeMessageBegin('getMetaConf', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_getMetaConf_result(err)
          output.writeMessageBegin('getMetaConf', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('getMetaConf', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.getMetaConf(args.key, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_getMetaConf_result((err != null ? err : {success: result}))
        output.writeMessageBegin('getMetaConf', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('getMetaConf', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_setMetaConf = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_setMetaConf_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.setMetaConf.length === 2) {
    Q.fcall(this._handler.setMetaConf, args.key, args.value)
      .then(function(result) {
        var result = new ThriftHiveMetastore_setMetaConf_result({success: result})
        output.writeMessageBegin('setMetaConf', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_setMetaConf_result(err)
          output.writeMessageBegin('setMetaConf', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('setMetaConf', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.setMetaConf(args.key, args.value, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_setMetaConf_result((err != null ? err : {success: result}))
        output.writeMessageBegin('setMetaConf', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('setMetaConf', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_create_database = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_create_database_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.create_database.length === 1) {
    Q.fcall(this._handler.create_database, args.database)
      .then(function(result) {
        var result = new ThriftHiveMetastore_create_database_result({success: result})
        output.writeMessageBegin('create_database', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_create_database_result(err)
          output.writeMessageBegin('create_database', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('create_database', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.create_database(args.database, function (err, result) {
      if (err == null || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_create_database_result((err != null ? err : {success: result}))
        output.writeMessageBegin('create_database', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('create_database', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_database = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_database_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_database.length === 1) {
    Q.fcall(this._handler.get_database, args.name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_database_result({success: result})
        output.writeMessageBegin('get_database', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_get_database_result(err)
          output.writeMessageBegin('get_database', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_database', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_database(args.name, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_get_database_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_database', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_database', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_drop_database = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_database_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.drop_database.length === 3) {
    Q.fcall(this._handler.drop_database, args.name, args.deleteData, args.cascade)
      .then(function(result) {
        var result = new ThriftHiveMetastore_drop_database_result({success: result})
        output.writeMessageBegin('drop_database', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_drop_database_result(err)
          output.writeMessageBegin('drop_database', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('drop_database', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.drop_database(args.name, args.deleteData, args.cascade, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_drop_database_result((err != null ? err : {success: result}))
        output.writeMessageBegin('drop_database', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('drop_database', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_databases = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_databases_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_databases.length === 1) {
    Q.fcall(this._handler.get_databases, args.pattern)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_databases_result({success: result})
        output.writeMessageBegin('get_databases', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_get_databases_result(err)
          output.writeMessageBegin('get_databases', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_databases', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_databases(args.pattern, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_get_databases_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_databases', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_databases', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_all_databases = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_all_databases_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_all_databases.length === 0) {
    Q.fcall(this._handler.get_all_databases)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_all_databases_result({success: result})
        output.writeMessageBegin('get_all_databases', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_get_all_databases_result(err)
          output.writeMessageBegin('get_all_databases', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_all_databases', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_all_databases(function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_get_all_databases_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_all_databases', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_all_databases', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_alter_database = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_database_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.alter_database.length === 2) {
    Q.fcall(this._handler.alter_database, args.dbname, args.db)
      .then(function(result) {
        var result = new ThriftHiveMetastore_alter_database_result({success: result})
        output.writeMessageBegin('alter_database', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          var result = new ThriftHiveMetastore_alter_database_result(err)
          output.writeMessageBegin('alter_database', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('alter_database', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.alter_database(args.dbname, args.db, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        var result = new ThriftHiveMetastore_alter_database_result((err != null ? err : {success: result}))
        output.writeMessageBegin('alter_database', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('alter_database', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_type = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_type_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_type.length === 1) {
    Q.fcall(this._handler.get_type, args.name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_type_result({success: result})
        output.writeMessageBegin('get_type', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          var result = new ThriftHiveMetastore_get_type_result(err)
          output.writeMessageBegin('get_type', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_type', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_type(args.name, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        var result = new ThriftHiveMetastore_get_type_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_type', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_type', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_create_type = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_create_type_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.create_type.length === 1) {
    Q.fcall(this._handler.create_type, args.type)
      .then(function(result) {
        var result = new ThriftHiveMetastore_create_type_result({success: result})
        output.writeMessageBegin('create_type', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_create_type_result(err)
          output.writeMessageBegin('create_type', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('create_type', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.create_type(args.type, function (err, result) {
      if (err == null || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_create_type_result((err != null ? err : {success: result}))
        output.writeMessageBegin('create_type', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('create_type', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_drop_type = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_type_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.drop_type.length === 1) {
    Q.fcall(this._handler.drop_type, args.type)
      .then(function(result) {
        var result = new ThriftHiveMetastore_drop_type_result({success: result})
        output.writeMessageBegin('drop_type', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          var result = new ThriftHiveMetastore_drop_type_result(err)
          output.writeMessageBegin('drop_type', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('drop_type', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.drop_type(args.type, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        var result = new ThriftHiveMetastore_drop_type_result((err != null ? err : {success: result}))
        output.writeMessageBegin('drop_type', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('drop_type', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_type_all = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_type_all_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_type_all.length === 1) {
    Q.fcall(this._handler.get_type_all, args.name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_type_all_result({success: result})
        output.writeMessageBegin('get_type_all', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_get_type_all_result(err)
          output.writeMessageBegin('get_type_all', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_type_all', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_type_all(args.name, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_get_type_all_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_type_all', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_type_all', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_fields = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_fields_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_fields.length === 2) {
    Q.fcall(this._handler.get_fields, args.db_name, args.table_name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_fields_result({success: result})
        output.writeMessageBegin('get_fields', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException || err instanceof ttypes.UnknownTableException || err instanceof ttypes.UnknownDBException) {
          var result = new ThriftHiveMetastore_get_fields_result(err)
          output.writeMessageBegin('get_fields', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_fields', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_fields(args.db_name, args.table_name, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException || err instanceof ttypes.UnknownTableException || err instanceof ttypes.UnknownDBException) {
        var result = new ThriftHiveMetastore_get_fields_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_fields', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_fields', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_fields_with_environment_context = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_fields_with_environment_context_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_fields_with_environment_context.length === 3) {
    Q.fcall(this._handler.get_fields_with_environment_context, args.db_name, args.table_name, args.environment_context)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_fields_with_environment_context_result({success: result})
        output.writeMessageBegin('get_fields_with_environment_context', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException || err instanceof ttypes.UnknownTableException || err instanceof ttypes.UnknownDBException) {
          var result = new ThriftHiveMetastore_get_fields_with_environment_context_result(err)
          output.writeMessageBegin('get_fields_with_environment_context', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_fields_with_environment_context', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_fields_with_environment_context(args.db_name, args.table_name, args.environment_context, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException || err instanceof ttypes.UnknownTableException || err instanceof ttypes.UnknownDBException) {
        var result = new ThriftHiveMetastore_get_fields_with_environment_context_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_fields_with_environment_context', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_fields_with_environment_context', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_schema = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_schema_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_schema.length === 2) {
    Q.fcall(this._handler.get_schema, args.db_name, args.table_name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_schema_result({success: result})
        output.writeMessageBegin('get_schema', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException || err instanceof ttypes.UnknownTableException || err instanceof ttypes.UnknownDBException) {
          var result = new ThriftHiveMetastore_get_schema_result(err)
          output.writeMessageBegin('get_schema', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_schema', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_schema(args.db_name, args.table_name, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException || err instanceof ttypes.UnknownTableException || err instanceof ttypes.UnknownDBException) {
        var result = new ThriftHiveMetastore_get_schema_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_schema', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_schema', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_schema_with_environment_context = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_schema_with_environment_context_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_schema_with_environment_context.length === 3) {
    Q.fcall(this._handler.get_schema_with_environment_context, args.db_name, args.table_name, args.environment_context)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_schema_with_environment_context_result({success: result})
        output.writeMessageBegin('get_schema_with_environment_context', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException || err instanceof ttypes.UnknownTableException || err instanceof ttypes.UnknownDBException) {
          var result = new ThriftHiveMetastore_get_schema_with_environment_context_result(err)
          output.writeMessageBegin('get_schema_with_environment_context', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_schema_with_environment_context', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_schema_with_environment_context(args.db_name, args.table_name, args.environment_context, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException || err instanceof ttypes.UnknownTableException || err instanceof ttypes.UnknownDBException) {
        var result = new ThriftHiveMetastore_get_schema_with_environment_context_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_schema_with_environment_context', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_schema_with_environment_context', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_create_table = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_create_table_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.create_table.length === 1) {
    Q.fcall(this._handler.create_table, args.tbl)
      .then(function(result) {
        var result = new ThriftHiveMetastore_create_table_result({success: result})
        output.writeMessageBegin('create_table', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          var result = new ThriftHiveMetastore_create_table_result(err)
          output.writeMessageBegin('create_table', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('create_table', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.create_table(args.tbl, function (err, result) {
      if (err == null || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        var result = new ThriftHiveMetastore_create_table_result((err != null ? err : {success: result}))
        output.writeMessageBegin('create_table', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('create_table', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_create_table_with_environment_context = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_create_table_with_environment_context_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.create_table_with_environment_context.length === 2) {
    Q.fcall(this._handler.create_table_with_environment_context, args.tbl, args.environment_context)
      .then(function(result) {
        var result = new ThriftHiveMetastore_create_table_with_environment_context_result({success: result})
        output.writeMessageBegin('create_table_with_environment_context', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          var result = new ThriftHiveMetastore_create_table_with_environment_context_result(err)
          output.writeMessageBegin('create_table_with_environment_context', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('create_table_with_environment_context', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.create_table_with_environment_context(args.tbl, args.environment_context, function (err, result) {
      if (err == null || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        var result = new ThriftHiveMetastore_create_table_with_environment_context_result((err != null ? err : {success: result}))
        output.writeMessageBegin('create_table_with_environment_context', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('create_table_with_environment_context', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_create_table_with_constraints = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_create_table_with_constraints_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.create_table_with_constraints.length === 3) {
    Q.fcall(this._handler.create_table_with_constraints, args.tbl, args.primaryKeys, args.foreignKeys)
      .then(function(result) {
        var result = new ThriftHiveMetastore_create_table_with_constraints_result({success: result})
        output.writeMessageBegin('create_table_with_constraints', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          var result = new ThriftHiveMetastore_create_table_with_constraints_result(err)
          output.writeMessageBegin('create_table_with_constraints', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('create_table_with_constraints', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.create_table_with_constraints(args.tbl, args.primaryKeys, args.foreignKeys, function (err, result) {
      if (err == null || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        var result = new ThriftHiveMetastore_create_table_with_constraints_result((err != null ? err : {success: result}))
        output.writeMessageBegin('create_table_with_constraints', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('create_table_with_constraints', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_drop_constraint = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_constraint_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.drop_constraint.length === 1) {
    Q.fcall(this._handler.drop_constraint, args.req)
      .then(function(result) {
        var result = new ThriftHiveMetastore_drop_constraint_result({success: result})
        output.writeMessageBegin('drop_constraint', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_drop_constraint_result(err)
          output.writeMessageBegin('drop_constraint', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('drop_constraint', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.drop_constraint(args.req, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_drop_constraint_result((err != null ? err : {success: result}))
        output.writeMessageBegin('drop_constraint', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('drop_constraint', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_add_primary_key = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_add_primary_key_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.add_primary_key.length === 1) {
    Q.fcall(this._handler.add_primary_key, args.req)
      .then(function(result) {
        var result = new ThriftHiveMetastore_add_primary_key_result({success: result})
        output.writeMessageBegin('add_primary_key', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_add_primary_key_result(err)
          output.writeMessageBegin('add_primary_key', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('add_primary_key', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.add_primary_key(args.req, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_add_primary_key_result((err != null ? err : {success: result}))
        output.writeMessageBegin('add_primary_key', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('add_primary_key', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_add_foreign_key = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_add_foreign_key_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.add_foreign_key.length === 1) {
    Q.fcall(this._handler.add_foreign_key, args.req)
      .then(function(result) {
        var result = new ThriftHiveMetastore_add_foreign_key_result({success: result})
        output.writeMessageBegin('add_foreign_key', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_add_foreign_key_result(err)
          output.writeMessageBegin('add_foreign_key', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('add_foreign_key', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.add_foreign_key(args.req, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_add_foreign_key_result((err != null ? err : {success: result}))
        output.writeMessageBegin('add_foreign_key', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('add_foreign_key', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_drop_table = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_table_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.drop_table.length === 3) {
    Q.fcall(this._handler.drop_table, args.dbname, args.name, args.deleteData)
      .then(function(result) {
        var result = new ThriftHiveMetastore_drop_table_result({success: result})
        output.writeMessageBegin('drop_table', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_drop_table_result(err)
          output.writeMessageBegin('drop_table', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('drop_table', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.drop_table(args.dbname, args.name, args.deleteData, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_drop_table_result((err != null ? err : {success: result}))
        output.writeMessageBegin('drop_table', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('drop_table', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_drop_table_with_environment_context = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_table_with_environment_context_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.drop_table_with_environment_context.length === 4) {
    Q.fcall(this._handler.drop_table_with_environment_context, args.dbname, args.name, args.deleteData, args.environment_context)
      .then(function(result) {
        var result = new ThriftHiveMetastore_drop_table_with_environment_context_result({success: result})
        output.writeMessageBegin('drop_table_with_environment_context', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_drop_table_with_environment_context_result(err)
          output.writeMessageBegin('drop_table_with_environment_context', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('drop_table_with_environment_context', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.drop_table_with_environment_context(args.dbname, args.name, args.deleteData, args.environment_context, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_drop_table_with_environment_context_result((err != null ? err : {success: result}))
        output.writeMessageBegin('drop_table_with_environment_context', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('drop_table_with_environment_context', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_tables = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_tables_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_tables.length === 2) {
    Q.fcall(this._handler.get_tables, args.db_name, args.pattern)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_tables_result({success: result})
        output.writeMessageBegin('get_tables', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_get_tables_result(err)
          output.writeMessageBegin('get_tables', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_tables', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_tables(args.db_name, args.pattern, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_get_tables_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_tables', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_tables', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_table_meta = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_table_meta_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_table_meta.length === 3) {
    Q.fcall(this._handler.get_table_meta, args.db_patterns, args.tbl_patterns, args.tbl_types)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_table_meta_result({success: result})
        output.writeMessageBegin('get_table_meta', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_get_table_meta_result(err)
          output.writeMessageBegin('get_table_meta', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_table_meta', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_table_meta(args.db_patterns, args.tbl_patterns, args.tbl_types, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_get_table_meta_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_table_meta', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_table_meta', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_all_tables = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_all_tables_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_all_tables.length === 1) {
    Q.fcall(this._handler.get_all_tables, args.db_name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_all_tables_result({success: result})
        output.writeMessageBegin('get_all_tables', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_get_all_tables_result(err)
          output.writeMessageBegin('get_all_tables', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_all_tables', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_all_tables(args.db_name, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_get_all_tables_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_all_tables', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_all_tables', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_table = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_table_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_table.length === 2) {
    Q.fcall(this._handler.get_table, args.dbname, args.tbl_name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_table_result({success: result})
        output.writeMessageBegin('get_table', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          var result = new ThriftHiveMetastore_get_table_result(err)
          output.writeMessageBegin('get_table', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_table', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_table(args.dbname, args.tbl_name, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        var result = new ThriftHiveMetastore_get_table_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_table', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_table', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_table_objects_by_name = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_table_objects_by_name_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_table_objects_by_name.length === 2) {
    Q.fcall(this._handler.get_table_objects_by_name, args.dbname, args.tbl_names)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_table_objects_by_name_result({success: result})
        output.writeMessageBegin('get_table_objects_by_name', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException || err instanceof ttypes.InvalidOperationException || err instanceof ttypes.UnknownDBException) {
          var result = new ThriftHiveMetastore_get_table_objects_by_name_result(err)
          output.writeMessageBegin('get_table_objects_by_name', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_table_objects_by_name', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_table_objects_by_name(args.dbname, args.tbl_names, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException || err instanceof ttypes.InvalidOperationException || err instanceof ttypes.UnknownDBException) {
        var result = new ThriftHiveMetastore_get_table_objects_by_name_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_table_objects_by_name', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_table_objects_by_name', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_table_names_by_filter = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_table_names_by_filter_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_table_names_by_filter.length === 3) {
    Q.fcall(this._handler.get_table_names_by_filter, args.dbname, args.filter, args.max_tables)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_table_names_by_filter_result({success: result})
        output.writeMessageBegin('get_table_names_by_filter', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException || err instanceof ttypes.InvalidOperationException || err instanceof ttypes.UnknownDBException) {
          var result = new ThriftHiveMetastore_get_table_names_by_filter_result(err)
          output.writeMessageBegin('get_table_names_by_filter', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_table_names_by_filter', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_table_names_by_filter(args.dbname, args.filter, args.max_tables, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException || err instanceof ttypes.InvalidOperationException || err instanceof ttypes.UnknownDBException) {
        var result = new ThriftHiveMetastore_get_table_names_by_filter_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_table_names_by_filter', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_table_names_by_filter', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_alter_table = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_table_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.alter_table.length === 3) {
    Q.fcall(this._handler.alter_table, args.dbname, args.tbl_name, args.new_tbl)
      .then(function(result) {
        var result = new ThriftHiveMetastore_alter_table_result({success: result})
        output.writeMessageBegin('alter_table', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_alter_table_result(err)
          output.writeMessageBegin('alter_table', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('alter_table', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.alter_table(args.dbname, args.tbl_name, args.new_tbl, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_alter_table_result((err != null ? err : {success: result}))
        output.writeMessageBegin('alter_table', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('alter_table', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_alter_table_with_environment_context = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_table_with_environment_context_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.alter_table_with_environment_context.length === 4) {
    Q.fcall(this._handler.alter_table_with_environment_context, args.dbname, args.tbl_name, args.new_tbl, args.environment_context)
      .then(function(result) {
        var result = new ThriftHiveMetastore_alter_table_with_environment_context_result({success: result})
        output.writeMessageBegin('alter_table_with_environment_context', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_alter_table_with_environment_context_result(err)
          output.writeMessageBegin('alter_table_with_environment_context', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('alter_table_with_environment_context', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.alter_table_with_environment_context(args.dbname, args.tbl_name, args.new_tbl, args.environment_context, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_alter_table_with_environment_context_result((err != null ? err : {success: result}))
        output.writeMessageBegin('alter_table_with_environment_context', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('alter_table_with_environment_context', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_alter_table_with_cascade = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_table_with_cascade_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.alter_table_with_cascade.length === 4) {
    Q.fcall(this._handler.alter_table_with_cascade, args.dbname, args.tbl_name, args.new_tbl, args.cascade)
      .then(function(result) {
        var result = new ThriftHiveMetastore_alter_table_with_cascade_result({success: result})
        output.writeMessageBegin('alter_table_with_cascade', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_alter_table_with_cascade_result(err)
          output.writeMessageBegin('alter_table_with_cascade', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('alter_table_with_cascade', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.alter_table_with_cascade(args.dbname, args.tbl_name, args.new_tbl, args.cascade, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_alter_table_with_cascade_result((err != null ? err : {success: result}))
        output.writeMessageBegin('alter_table_with_cascade', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('alter_table_with_cascade', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_add_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_add_partition_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.add_partition.length === 1) {
    Q.fcall(this._handler.add_partition, args.new_part)
      .then(function(result) {
        var result = new ThriftHiveMetastore_add_partition_result({success: result})
        output.writeMessageBegin('add_partition', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.InvalidObjectException || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_add_partition_result(err)
          output.writeMessageBegin('add_partition', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('add_partition', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.add_partition(args.new_part, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_add_partition_result((err != null ? err : {success: result}))
        output.writeMessageBegin('add_partition', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('add_partition', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_add_partition_with_environment_context = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_add_partition_with_environment_context_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.add_partition_with_environment_context.length === 2) {
    Q.fcall(this._handler.add_partition_with_environment_context, args.new_part, args.environment_context)
      .then(function(result) {
        var result = new ThriftHiveMetastore_add_partition_with_environment_context_result({success: result})
        output.writeMessageBegin('add_partition_with_environment_context', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.InvalidObjectException || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_add_partition_with_environment_context_result(err)
          output.writeMessageBegin('add_partition_with_environment_context', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('add_partition_with_environment_context', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.add_partition_with_environment_context(args.new_part, args.environment_context, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_add_partition_with_environment_context_result((err != null ? err : {success: result}))
        output.writeMessageBegin('add_partition_with_environment_context', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('add_partition_with_environment_context', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_add_partitions = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_add_partitions_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.add_partitions.length === 1) {
    Q.fcall(this._handler.add_partitions, args.new_parts)
      .then(function(result) {
        var result = new ThriftHiveMetastore_add_partitions_result({success: result})
        output.writeMessageBegin('add_partitions', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.InvalidObjectException || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_add_partitions_result(err)
          output.writeMessageBegin('add_partitions', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('add_partitions', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.add_partitions(args.new_parts, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_add_partitions_result((err != null ? err : {success: result}))
        output.writeMessageBegin('add_partitions', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('add_partitions', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_add_partitions_pspec = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_add_partitions_pspec_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.add_partitions_pspec.length === 1) {
    Q.fcall(this._handler.add_partitions_pspec, args.new_parts)
      .then(function(result) {
        var result = new ThriftHiveMetastore_add_partitions_pspec_result({success: result})
        output.writeMessageBegin('add_partitions_pspec', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.InvalidObjectException || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_add_partitions_pspec_result(err)
          output.writeMessageBegin('add_partitions_pspec', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('add_partitions_pspec', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.add_partitions_pspec(args.new_parts, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_add_partitions_pspec_result((err != null ? err : {success: result}))
        output.writeMessageBegin('add_partitions_pspec', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('add_partitions_pspec', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_append_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_append_partition_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.append_partition.length === 3) {
    Q.fcall(this._handler.append_partition, args.db_name, args.tbl_name, args.part_vals)
      .then(function(result) {
        var result = new ThriftHiveMetastore_append_partition_result({success: result})
        output.writeMessageBegin('append_partition', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.InvalidObjectException || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_append_partition_result(err)
          output.writeMessageBegin('append_partition', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('append_partition', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.append_partition(args.db_name, args.tbl_name, args.part_vals, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_append_partition_result((err != null ? err : {success: result}))
        output.writeMessageBegin('append_partition', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('append_partition', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_add_partitions_req = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_add_partitions_req_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.add_partitions_req.length === 1) {
    Q.fcall(this._handler.add_partitions_req, args.request)
      .then(function(result) {
        var result = new ThriftHiveMetastore_add_partitions_req_result({success: result})
        output.writeMessageBegin('add_partitions_req', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.InvalidObjectException || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_add_partitions_req_result(err)
          output.writeMessageBegin('add_partitions_req', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('add_partitions_req', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.add_partitions_req(args.request, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_add_partitions_req_result((err != null ? err : {success: result}))
        output.writeMessageBegin('add_partitions_req', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('add_partitions_req', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_append_partition_with_environment_context = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_append_partition_with_environment_context_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.append_partition_with_environment_context.length === 4) {
    Q.fcall(this._handler.append_partition_with_environment_context, args.db_name, args.tbl_name, args.part_vals, args.environment_context)
      .then(function(result) {
        var result = new ThriftHiveMetastore_append_partition_with_environment_context_result({success: result})
        output.writeMessageBegin('append_partition_with_environment_context', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.InvalidObjectException || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_append_partition_with_environment_context_result(err)
          output.writeMessageBegin('append_partition_with_environment_context', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('append_partition_with_environment_context', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.append_partition_with_environment_context(args.db_name, args.tbl_name, args.part_vals, args.environment_context, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_append_partition_with_environment_context_result((err != null ? err : {success: result}))
        output.writeMessageBegin('append_partition_with_environment_context', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('append_partition_with_environment_context', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_append_partition_by_name = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_append_partition_by_name_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.append_partition_by_name.length === 3) {
    Q.fcall(this._handler.append_partition_by_name, args.db_name, args.tbl_name, args.part_name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_append_partition_by_name_result({success: result})
        output.writeMessageBegin('append_partition_by_name', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.InvalidObjectException || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_append_partition_by_name_result(err)
          output.writeMessageBegin('append_partition_by_name', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('append_partition_by_name', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.append_partition_by_name(args.db_name, args.tbl_name, args.part_name, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_append_partition_by_name_result((err != null ? err : {success: result}))
        output.writeMessageBegin('append_partition_by_name', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('append_partition_by_name', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_append_partition_by_name_with_environment_context = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_append_partition_by_name_with_environment_context_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.append_partition_by_name_with_environment_context.length === 4) {
    Q.fcall(this._handler.append_partition_by_name_with_environment_context, args.db_name, args.tbl_name, args.part_name, args.environment_context)
      .then(function(result) {
        var result = new ThriftHiveMetastore_append_partition_by_name_with_environment_context_result({success: result})
        output.writeMessageBegin('append_partition_by_name_with_environment_context', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.InvalidObjectException || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_append_partition_by_name_with_environment_context_result(err)
          output.writeMessageBegin('append_partition_by_name_with_environment_context', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('append_partition_by_name_with_environment_context', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.append_partition_by_name_with_environment_context(args.db_name, args.tbl_name, args.part_name, args.environment_context, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_append_partition_by_name_with_environment_context_result((err != null ? err : {success: result}))
        output.writeMessageBegin('append_partition_by_name_with_environment_context', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('append_partition_by_name_with_environment_context', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_drop_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_partition_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.drop_partition.length === 4) {
    Q.fcall(this._handler.drop_partition, args.db_name, args.tbl_name, args.part_vals, args.deleteData)
      .then(function(result) {
        var result = new ThriftHiveMetastore_drop_partition_result({success: result})
        output.writeMessageBegin('drop_partition', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_drop_partition_result(err)
          output.writeMessageBegin('drop_partition', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('drop_partition', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.drop_partition(args.db_name, args.tbl_name, args.part_vals, args.deleteData, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_drop_partition_result((err != null ? err : {success: result}))
        output.writeMessageBegin('drop_partition', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('drop_partition', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_drop_partition_with_environment_context = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_partition_with_environment_context_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.drop_partition_with_environment_context.length === 5) {
    Q.fcall(this._handler.drop_partition_with_environment_context, args.db_name, args.tbl_name, args.part_vals, args.deleteData, args.environment_context)
      .then(function(result) {
        var result = new ThriftHiveMetastore_drop_partition_with_environment_context_result({success: result})
        output.writeMessageBegin('drop_partition_with_environment_context', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_drop_partition_with_environment_context_result(err)
          output.writeMessageBegin('drop_partition_with_environment_context', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('drop_partition_with_environment_context', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.drop_partition_with_environment_context(args.db_name, args.tbl_name, args.part_vals, args.deleteData, args.environment_context, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_drop_partition_with_environment_context_result((err != null ? err : {success: result}))
        output.writeMessageBegin('drop_partition_with_environment_context', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('drop_partition_with_environment_context', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_drop_partition_by_name = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_partition_by_name_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.drop_partition_by_name.length === 4) {
    Q.fcall(this._handler.drop_partition_by_name, args.db_name, args.tbl_name, args.part_name, args.deleteData)
      .then(function(result) {
        var result = new ThriftHiveMetastore_drop_partition_by_name_result({success: result})
        output.writeMessageBegin('drop_partition_by_name', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_drop_partition_by_name_result(err)
          output.writeMessageBegin('drop_partition_by_name', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('drop_partition_by_name', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.drop_partition_by_name(args.db_name, args.tbl_name, args.part_name, args.deleteData, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_drop_partition_by_name_result((err != null ? err : {success: result}))
        output.writeMessageBegin('drop_partition_by_name', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('drop_partition_by_name', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_drop_partition_by_name_with_environment_context = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_partition_by_name_with_environment_context_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.drop_partition_by_name_with_environment_context.length === 5) {
    Q.fcall(this._handler.drop_partition_by_name_with_environment_context, args.db_name, args.tbl_name, args.part_name, args.deleteData, args.environment_context)
      .then(function(result) {
        var result = new ThriftHiveMetastore_drop_partition_by_name_with_environment_context_result({success: result})
        output.writeMessageBegin('drop_partition_by_name_with_environment_context', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_drop_partition_by_name_with_environment_context_result(err)
          output.writeMessageBegin('drop_partition_by_name_with_environment_context', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('drop_partition_by_name_with_environment_context', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.drop_partition_by_name_with_environment_context(args.db_name, args.tbl_name, args.part_name, args.deleteData, args.environment_context, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_drop_partition_by_name_with_environment_context_result((err != null ? err : {success: result}))
        output.writeMessageBegin('drop_partition_by_name_with_environment_context', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('drop_partition_by_name_with_environment_context', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_drop_partitions_req = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_partitions_req_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.drop_partitions_req.length === 1) {
    Q.fcall(this._handler.drop_partitions_req, args.req)
      .then(function(result) {
        var result = new ThriftHiveMetastore_drop_partitions_req_result({success: result})
        output.writeMessageBegin('drop_partitions_req', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_drop_partitions_req_result(err)
          output.writeMessageBegin('drop_partitions_req', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('drop_partitions_req', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.drop_partitions_req(args.req, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_drop_partitions_req_result((err != null ? err : {success: result}))
        output.writeMessageBegin('drop_partitions_req', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('drop_partitions_req', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partition_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_partition.length === 3) {
    Q.fcall(this._handler.get_partition, args.db_name, args.tbl_name, args.part_vals)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_partition_result({success: result})
        output.writeMessageBegin('get_partition', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          var result = new ThriftHiveMetastore_get_partition_result(err)
          output.writeMessageBegin('get_partition', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_partition', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_partition(args.db_name, args.tbl_name, args.part_vals, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        var result = new ThriftHiveMetastore_get_partition_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_partition', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_partition', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_exchange_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_exchange_partition_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.exchange_partition.length === 5) {
    Q.fcall(this._handler.exchange_partition, args.partitionSpecs, args.source_db, args.source_table_name, args.dest_db, args.dest_table_name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_exchange_partition_result({success: result})
        output.writeMessageBegin('exchange_partition', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.InvalidInputException) {
          var result = new ThriftHiveMetastore_exchange_partition_result(err)
          output.writeMessageBegin('exchange_partition', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('exchange_partition', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.exchange_partition(args.partitionSpecs, args.source_db, args.source_table_name, args.dest_db, args.dest_table_name, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.InvalidInputException) {
        var result = new ThriftHiveMetastore_exchange_partition_result((err != null ? err : {success: result}))
        output.writeMessageBegin('exchange_partition', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('exchange_partition', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_exchange_partitions = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_exchange_partitions_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.exchange_partitions.length === 5) {
    Q.fcall(this._handler.exchange_partitions, args.partitionSpecs, args.source_db, args.source_table_name, args.dest_db, args.dest_table_name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_exchange_partitions_result({success: result})
        output.writeMessageBegin('exchange_partitions', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.InvalidInputException) {
          var result = new ThriftHiveMetastore_exchange_partitions_result(err)
          output.writeMessageBegin('exchange_partitions', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('exchange_partitions', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.exchange_partitions(args.partitionSpecs, args.source_db, args.source_table_name, args.dest_db, args.dest_table_name, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.InvalidInputException) {
        var result = new ThriftHiveMetastore_exchange_partitions_result((err != null ? err : {success: result}))
        output.writeMessageBegin('exchange_partitions', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('exchange_partitions', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_partition_with_auth = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partition_with_auth_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_partition_with_auth.length === 5) {
    Q.fcall(this._handler.get_partition_with_auth, args.db_name, args.tbl_name, args.part_vals, args.user_name, args.group_names)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_partition_with_auth_result({success: result})
        output.writeMessageBegin('get_partition_with_auth', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          var result = new ThriftHiveMetastore_get_partition_with_auth_result(err)
          output.writeMessageBegin('get_partition_with_auth', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_partition_with_auth', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_partition_with_auth(args.db_name, args.tbl_name, args.part_vals, args.user_name, args.group_names, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        var result = new ThriftHiveMetastore_get_partition_with_auth_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_partition_with_auth', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_partition_with_auth', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_partition_by_name = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partition_by_name_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_partition_by_name.length === 3) {
    Q.fcall(this._handler.get_partition_by_name, args.db_name, args.tbl_name, args.part_name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_partition_by_name_result({success: result})
        output.writeMessageBegin('get_partition_by_name', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          var result = new ThriftHiveMetastore_get_partition_by_name_result(err)
          output.writeMessageBegin('get_partition_by_name', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_partition_by_name', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_partition_by_name(args.db_name, args.tbl_name, args.part_name, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        var result = new ThriftHiveMetastore_get_partition_by_name_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_partition_by_name', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_partition_by_name', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_partitions = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_partitions.length === 3) {
    Q.fcall(this._handler.get_partitions, args.db_name, args.tbl_name, args.max_parts)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_partitions_result({success: result})
        output.writeMessageBegin('get_partitions', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_get_partitions_result(err)
          output.writeMessageBegin('get_partitions', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_partitions', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_partitions(args.db_name, args.tbl_name, args.max_parts, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_get_partitions_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_partitions', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_partitions', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_partitions_with_auth = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_with_auth_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_partitions_with_auth.length === 5) {
    Q.fcall(this._handler.get_partitions_with_auth, args.db_name, args.tbl_name, args.max_parts, args.user_name, args.group_names)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_partitions_with_auth_result({success: result})
        output.writeMessageBegin('get_partitions_with_auth', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_get_partitions_with_auth_result(err)
          output.writeMessageBegin('get_partitions_with_auth', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_partitions_with_auth', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_partitions_with_auth(args.db_name, args.tbl_name, args.max_parts, args.user_name, args.group_names, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_get_partitions_with_auth_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_partitions_with_auth', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_partitions_with_auth', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_partitions_pspec = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_pspec_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_partitions_pspec.length === 3) {
    Q.fcall(this._handler.get_partitions_pspec, args.db_name, args.tbl_name, args.max_parts)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_partitions_pspec_result({success: result})
        output.writeMessageBegin('get_partitions_pspec', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_get_partitions_pspec_result(err)
          output.writeMessageBegin('get_partitions_pspec', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_partitions_pspec', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_partitions_pspec(args.db_name, args.tbl_name, args.max_parts, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_get_partitions_pspec_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_partitions_pspec', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_partitions_pspec', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_partition_names = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partition_names_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_partition_names.length === 3) {
    Q.fcall(this._handler.get_partition_names, args.db_name, args.tbl_name, args.max_parts)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_partition_names_result({success: result})
        output.writeMessageBegin('get_partition_names', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_get_partition_names_result(err)
          output.writeMessageBegin('get_partition_names', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_partition_names', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_partition_names(args.db_name, args.tbl_name, args.max_parts, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_get_partition_names_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_partition_names', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_partition_names', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_partitions_ps = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_ps_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_partitions_ps.length === 4) {
    Q.fcall(this._handler.get_partitions_ps, args.db_name, args.tbl_name, args.part_vals, args.max_parts)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_partitions_ps_result({success: result})
        output.writeMessageBegin('get_partitions_ps', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          var result = new ThriftHiveMetastore_get_partitions_ps_result(err)
          output.writeMessageBegin('get_partitions_ps', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_partitions_ps', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_partitions_ps(args.db_name, args.tbl_name, args.part_vals, args.max_parts, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        var result = new ThriftHiveMetastore_get_partitions_ps_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_partitions_ps', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_partitions_ps', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_partitions_ps_with_auth = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_ps_with_auth_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_partitions_ps_with_auth.length === 6) {
    Q.fcall(this._handler.get_partitions_ps_with_auth, args.db_name, args.tbl_name, args.part_vals, args.max_parts, args.user_name, args.group_names)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_partitions_ps_with_auth_result({success: result})
        output.writeMessageBegin('get_partitions_ps_with_auth', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_get_partitions_ps_with_auth_result(err)
          output.writeMessageBegin('get_partitions_ps_with_auth', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_partitions_ps_with_auth', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_partitions_ps_with_auth(args.db_name, args.tbl_name, args.part_vals, args.max_parts, args.user_name, args.group_names, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_get_partitions_ps_with_auth_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_partitions_ps_with_auth', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_partitions_ps_with_auth', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_partition_names_ps = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partition_names_ps_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_partition_names_ps.length === 4) {
    Q.fcall(this._handler.get_partition_names_ps, args.db_name, args.tbl_name, args.part_vals, args.max_parts)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_partition_names_ps_result({success: result})
        output.writeMessageBegin('get_partition_names_ps', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          var result = new ThriftHiveMetastore_get_partition_names_ps_result(err)
          output.writeMessageBegin('get_partition_names_ps', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_partition_names_ps', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_partition_names_ps(args.db_name, args.tbl_name, args.part_vals, args.max_parts, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        var result = new ThriftHiveMetastore_get_partition_names_ps_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_partition_names_ps', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_partition_names_ps', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_partitions_by_filter = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_by_filter_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_partitions_by_filter.length === 4) {
    Q.fcall(this._handler.get_partitions_by_filter, args.db_name, args.tbl_name, args.filter, args.max_parts)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_partitions_by_filter_result({success: result})
        output.writeMessageBegin('get_partitions_by_filter', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          var result = new ThriftHiveMetastore_get_partitions_by_filter_result(err)
          output.writeMessageBegin('get_partitions_by_filter', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_partitions_by_filter', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_partitions_by_filter(args.db_name, args.tbl_name, args.filter, args.max_parts, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        var result = new ThriftHiveMetastore_get_partitions_by_filter_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_partitions_by_filter', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_partitions_by_filter', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_part_specs_by_filter = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_part_specs_by_filter_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_part_specs_by_filter.length === 4) {
    Q.fcall(this._handler.get_part_specs_by_filter, args.db_name, args.tbl_name, args.filter, args.max_parts)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_part_specs_by_filter_result({success: result})
        output.writeMessageBegin('get_part_specs_by_filter', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          var result = new ThriftHiveMetastore_get_part_specs_by_filter_result(err)
          output.writeMessageBegin('get_part_specs_by_filter', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_part_specs_by_filter', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_part_specs_by_filter(args.db_name, args.tbl_name, args.filter, args.max_parts, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        var result = new ThriftHiveMetastore_get_part_specs_by_filter_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_part_specs_by_filter', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_part_specs_by_filter', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_partitions_by_expr = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_by_expr_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_partitions_by_expr.length === 1) {
    Q.fcall(this._handler.get_partitions_by_expr, args.req)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_partitions_by_expr_result({success: result})
        output.writeMessageBegin('get_partitions_by_expr', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          var result = new ThriftHiveMetastore_get_partitions_by_expr_result(err)
          output.writeMessageBegin('get_partitions_by_expr', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_partitions_by_expr', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_partitions_by_expr(args.req, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        var result = new ThriftHiveMetastore_get_partitions_by_expr_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_partitions_by_expr', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_partitions_by_expr', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_num_partitions_by_filter = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_num_partitions_by_filter_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_num_partitions_by_filter.length === 3) {
    Q.fcall(this._handler.get_num_partitions_by_filter, args.db_name, args.tbl_name, args.filter)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_num_partitions_by_filter_result({success: result})
        output.writeMessageBegin('get_num_partitions_by_filter', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          var result = new ThriftHiveMetastore_get_num_partitions_by_filter_result(err)
          output.writeMessageBegin('get_num_partitions_by_filter', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_num_partitions_by_filter', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_num_partitions_by_filter(args.db_name, args.tbl_name, args.filter, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        var result = new ThriftHiveMetastore_get_num_partitions_by_filter_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_num_partitions_by_filter', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_num_partitions_by_filter', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_partitions_by_names = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_by_names_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_partitions_by_names.length === 3) {
    Q.fcall(this._handler.get_partitions_by_names, args.db_name, args.tbl_name, args.names)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_partitions_by_names_result({success: result})
        output.writeMessageBegin('get_partitions_by_names', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          var result = new ThriftHiveMetastore_get_partitions_by_names_result(err)
          output.writeMessageBegin('get_partitions_by_names', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_partitions_by_names', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_partitions_by_names(args.db_name, args.tbl_name, args.names, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        var result = new ThriftHiveMetastore_get_partitions_by_names_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_partitions_by_names', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_partitions_by_names', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_alter_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_partition_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.alter_partition.length === 3) {
    Q.fcall(this._handler.alter_partition, args.db_name, args.tbl_name, args.new_part)
      .then(function(result) {
        var result = new ThriftHiveMetastore_alter_partition_result({success: result})
        output.writeMessageBegin('alter_partition', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_alter_partition_result(err)
          output.writeMessageBegin('alter_partition', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('alter_partition', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.alter_partition(args.db_name, args.tbl_name, args.new_part, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_alter_partition_result((err != null ? err : {success: result}))
        output.writeMessageBegin('alter_partition', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('alter_partition', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_alter_partitions = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_partitions_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.alter_partitions.length === 3) {
    Q.fcall(this._handler.alter_partitions, args.db_name, args.tbl_name, args.new_parts)
      .then(function(result) {
        var result = new ThriftHiveMetastore_alter_partitions_result({success: result})
        output.writeMessageBegin('alter_partitions', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_alter_partitions_result(err)
          output.writeMessageBegin('alter_partitions', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('alter_partitions', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.alter_partitions(args.db_name, args.tbl_name, args.new_parts, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_alter_partitions_result((err != null ? err : {success: result}))
        output.writeMessageBegin('alter_partitions', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('alter_partitions', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_alter_partitions_with_environment_context = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_partitions_with_environment_context_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.alter_partitions_with_environment_context.length === 4) {
    Q.fcall(this._handler.alter_partitions_with_environment_context, args.db_name, args.tbl_name, args.new_parts, args.environment_context)
      .then(function(result) {
        var result = new ThriftHiveMetastore_alter_partitions_with_environment_context_result({success: result})
        output.writeMessageBegin('alter_partitions_with_environment_context', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_alter_partitions_with_environment_context_result(err)
          output.writeMessageBegin('alter_partitions_with_environment_context', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('alter_partitions_with_environment_context', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.alter_partitions_with_environment_context(args.db_name, args.tbl_name, args.new_parts, args.environment_context, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_alter_partitions_with_environment_context_result((err != null ? err : {success: result}))
        output.writeMessageBegin('alter_partitions_with_environment_context', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('alter_partitions_with_environment_context', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_alter_partition_with_environment_context = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_partition_with_environment_context_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.alter_partition_with_environment_context.length === 4) {
    Q.fcall(this._handler.alter_partition_with_environment_context, args.db_name, args.tbl_name, args.new_part, args.environment_context)
      .then(function(result) {
        var result = new ThriftHiveMetastore_alter_partition_with_environment_context_result({success: result})
        output.writeMessageBegin('alter_partition_with_environment_context', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_alter_partition_with_environment_context_result(err)
          output.writeMessageBegin('alter_partition_with_environment_context', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('alter_partition_with_environment_context', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.alter_partition_with_environment_context(args.db_name, args.tbl_name, args.new_part, args.environment_context, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_alter_partition_with_environment_context_result((err != null ? err : {success: result}))
        output.writeMessageBegin('alter_partition_with_environment_context', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('alter_partition_with_environment_context', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_rename_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_rename_partition_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.rename_partition.length === 4) {
    Q.fcall(this._handler.rename_partition, args.db_name, args.tbl_name, args.part_vals, args.new_part)
      .then(function(result) {
        var result = new ThriftHiveMetastore_rename_partition_result({success: result})
        output.writeMessageBegin('rename_partition', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_rename_partition_result(err)
          output.writeMessageBegin('rename_partition', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('rename_partition', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.rename_partition(args.db_name, args.tbl_name, args.part_vals, args.new_part, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_rename_partition_result((err != null ? err : {success: result}))
        output.writeMessageBegin('rename_partition', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('rename_partition', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_partition_name_has_valid_characters = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_partition_name_has_valid_characters_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.partition_name_has_valid_characters.length === 2) {
    Q.fcall(this._handler.partition_name_has_valid_characters, args.part_vals, args.throw_exception)
      .then(function(result) {
        var result = new ThriftHiveMetastore_partition_name_has_valid_characters_result({success: result})
        output.writeMessageBegin('partition_name_has_valid_characters', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_partition_name_has_valid_characters_result(err)
          output.writeMessageBegin('partition_name_has_valid_characters', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('partition_name_has_valid_characters', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.partition_name_has_valid_characters(args.part_vals, args.throw_exception, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_partition_name_has_valid_characters_result((err != null ? err : {success: result}))
        output.writeMessageBegin('partition_name_has_valid_characters', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('partition_name_has_valid_characters', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_config_value = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_config_value_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_config_value.length === 2) {
    Q.fcall(this._handler.get_config_value, args.name, args.defaultValue)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_config_value_result({success: result})
        output.writeMessageBegin('get_config_value', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.ConfigValSecurityException) {
          var result = new ThriftHiveMetastore_get_config_value_result(err)
          output.writeMessageBegin('get_config_value', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_config_value', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_config_value(args.name, args.defaultValue, function (err, result) {
      if (err == null || err instanceof ttypes.ConfigValSecurityException) {
        var result = new ThriftHiveMetastore_get_config_value_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_config_value', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_config_value', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_partition_name_to_vals = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_partition_name_to_vals_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.partition_name_to_vals.length === 1) {
    Q.fcall(this._handler.partition_name_to_vals, args.part_name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_partition_name_to_vals_result({success: result})
        output.writeMessageBegin('partition_name_to_vals', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_partition_name_to_vals_result(err)
          output.writeMessageBegin('partition_name_to_vals', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('partition_name_to_vals', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.partition_name_to_vals(args.part_name, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_partition_name_to_vals_result((err != null ? err : {success: result}))
        output.writeMessageBegin('partition_name_to_vals', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('partition_name_to_vals', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_partition_name_to_spec = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_partition_name_to_spec_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.partition_name_to_spec.length === 1) {
    Q.fcall(this._handler.partition_name_to_spec, args.part_name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_partition_name_to_spec_result({success: result})
        output.writeMessageBegin('partition_name_to_spec', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_partition_name_to_spec_result(err)
          output.writeMessageBegin('partition_name_to_spec', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('partition_name_to_spec', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.partition_name_to_spec(args.part_name, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_partition_name_to_spec_result((err != null ? err : {success: result}))
        output.writeMessageBegin('partition_name_to_spec', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('partition_name_to_spec', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_markPartitionForEvent = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_markPartitionForEvent_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.markPartitionForEvent.length === 4) {
    Q.fcall(this._handler.markPartitionForEvent, args.db_name, args.tbl_name, args.part_vals, args.eventType)
      .then(function(result) {
        var result = new ThriftHiveMetastore_markPartitionForEvent_result({success: result})
        output.writeMessageBegin('markPartitionForEvent', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.UnknownDBException || err instanceof ttypes.UnknownTableException || err instanceof ttypes.UnknownPartitionException || err instanceof ttypes.InvalidPartitionException) {
          var result = new ThriftHiveMetastore_markPartitionForEvent_result(err)
          output.writeMessageBegin('markPartitionForEvent', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('markPartitionForEvent', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.markPartitionForEvent(args.db_name, args.tbl_name, args.part_vals, args.eventType, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.UnknownDBException || err instanceof ttypes.UnknownTableException || err instanceof ttypes.UnknownPartitionException || err instanceof ttypes.InvalidPartitionException) {
        var result = new ThriftHiveMetastore_markPartitionForEvent_result((err != null ? err : {success: result}))
        output.writeMessageBegin('markPartitionForEvent', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('markPartitionForEvent', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_isPartitionMarkedForEvent = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_isPartitionMarkedForEvent_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.isPartitionMarkedForEvent.length === 4) {
    Q.fcall(this._handler.isPartitionMarkedForEvent, args.db_name, args.tbl_name, args.part_vals, args.eventType)
      .then(function(result) {
        var result = new ThriftHiveMetastore_isPartitionMarkedForEvent_result({success: result})
        output.writeMessageBegin('isPartitionMarkedForEvent', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.UnknownDBException || err instanceof ttypes.UnknownTableException || err instanceof ttypes.UnknownPartitionException || err instanceof ttypes.InvalidPartitionException) {
          var result = new ThriftHiveMetastore_isPartitionMarkedForEvent_result(err)
          output.writeMessageBegin('isPartitionMarkedForEvent', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('isPartitionMarkedForEvent', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.isPartitionMarkedForEvent(args.db_name, args.tbl_name, args.part_vals, args.eventType, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.UnknownDBException || err instanceof ttypes.UnknownTableException || err instanceof ttypes.UnknownPartitionException || err instanceof ttypes.InvalidPartitionException) {
        var result = new ThriftHiveMetastore_isPartitionMarkedForEvent_result((err != null ? err : {success: result}))
        output.writeMessageBegin('isPartitionMarkedForEvent', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('isPartitionMarkedForEvent', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_add_index = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_add_index_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.add_index.length === 2) {
    Q.fcall(this._handler.add_index, args.new_index, args.index_table)
      .then(function(result) {
        var result = new ThriftHiveMetastore_add_index_result({success: result})
        output.writeMessageBegin('add_index', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.InvalidObjectException || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_add_index_result(err)
          output.writeMessageBegin('add_index', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('add_index', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.add_index(args.new_index, args.index_table, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_add_index_result((err != null ? err : {success: result}))
        output.writeMessageBegin('add_index', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('add_index', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_alter_index = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_index_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.alter_index.length === 4) {
    Q.fcall(this._handler.alter_index, args.dbname, args.base_tbl_name, args.idx_name, args.new_idx)
      .then(function(result) {
        var result = new ThriftHiveMetastore_alter_index_result({success: result})
        output.writeMessageBegin('alter_index', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_alter_index_result(err)
          output.writeMessageBegin('alter_index', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('alter_index', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.alter_index(args.dbname, args.base_tbl_name, args.idx_name, args.new_idx, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_alter_index_result((err != null ? err : {success: result}))
        output.writeMessageBegin('alter_index', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('alter_index', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_drop_index_by_name = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_index_by_name_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.drop_index_by_name.length === 4) {
    Q.fcall(this._handler.drop_index_by_name, args.db_name, args.tbl_name, args.index_name, args.deleteData)
      .then(function(result) {
        var result = new ThriftHiveMetastore_drop_index_by_name_result({success: result})
        output.writeMessageBegin('drop_index_by_name', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_drop_index_by_name_result(err)
          output.writeMessageBegin('drop_index_by_name', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('drop_index_by_name', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.drop_index_by_name(args.db_name, args.tbl_name, args.index_name, args.deleteData, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_drop_index_by_name_result((err != null ? err : {success: result}))
        output.writeMessageBegin('drop_index_by_name', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('drop_index_by_name', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_index_by_name = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_index_by_name_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_index_by_name.length === 3) {
    Q.fcall(this._handler.get_index_by_name, args.db_name, args.tbl_name, args.index_name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_index_by_name_result({success: result})
        output.writeMessageBegin('get_index_by_name', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          var result = new ThriftHiveMetastore_get_index_by_name_result(err)
          output.writeMessageBegin('get_index_by_name', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_index_by_name', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_index_by_name(args.db_name, args.tbl_name, args.index_name, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        var result = new ThriftHiveMetastore_get_index_by_name_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_index_by_name', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_index_by_name', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_indexes = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_indexes_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_indexes.length === 3) {
    Q.fcall(this._handler.get_indexes, args.db_name, args.tbl_name, args.max_indexes)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_indexes_result({success: result})
        output.writeMessageBegin('get_indexes', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_get_indexes_result(err)
          output.writeMessageBegin('get_indexes', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_indexes', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_indexes(args.db_name, args.tbl_name, args.max_indexes, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_get_indexes_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_indexes', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_indexes', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_index_names = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_index_names_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_index_names.length === 3) {
    Q.fcall(this._handler.get_index_names, args.db_name, args.tbl_name, args.max_indexes)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_index_names_result({success: result})
        output.writeMessageBegin('get_index_names', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_get_index_names_result(err)
          output.writeMessageBegin('get_index_names', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_index_names', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_index_names(args.db_name, args.tbl_name, args.max_indexes, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_get_index_names_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_index_names', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_index_names', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_primary_keys = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_primary_keys_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_primary_keys.length === 1) {
    Q.fcall(this._handler.get_primary_keys, args.request)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_primary_keys_result({success: result})
        output.writeMessageBegin('get_primary_keys', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          var result = new ThriftHiveMetastore_get_primary_keys_result(err)
          output.writeMessageBegin('get_primary_keys', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_primary_keys', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_primary_keys(args.request, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        var result = new ThriftHiveMetastore_get_primary_keys_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_primary_keys', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_primary_keys', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_foreign_keys = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_foreign_keys_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_foreign_keys.length === 1) {
    Q.fcall(this._handler.get_foreign_keys, args.request)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_foreign_keys_result({success: result})
        output.writeMessageBegin('get_foreign_keys', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          var result = new ThriftHiveMetastore_get_foreign_keys_result(err)
          output.writeMessageBegin('get_foreign_keys', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_foreign_keys', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_foreign_keys(args.request, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        var result = new ThriftHiveMetastore_get_foreign_keys_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_foreign_keys', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_foreign_keys', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_update_table_column_statistics = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_update_table_column_statistics_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.update_table_column_statistics.length === 1) {
    Q.fcall(this._handler.update_table_column_statistics, args.stats_obj)
      .then(function(result) {
        var result = new ThriftHiveMetastore_update_table_column_statistics_result({success: result})
        output.writeMessageBegin('update_table_column_statistics', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.InvalidInputException) {
          var result = new ThriftHiveMetastore_update_table_column_statistics_result(err)
          output.writeMessageBegin('update_table_column_statistics', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('update_table_column_statistics', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.update_table_column_statistics(args.stats_obj, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.InvalidInputException) {
        var result = new ThriftHiveMetastore_update_table_column_statistics_result((err != null ? err : {success: result}))
        output.writeMessageBegin('update_table_column_statistics', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('update_table_column_statistics', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_update_partition_column_statistics = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_update_partition_column_statistics_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.update_partition_column_statistics.length === 1) {
    Q.fcall(this._handler.update_partition_column_statistics, args.stats_obj)
      .then(function(result) {
        var result = new ThriftHiveMetastore_update_partition_column_statistics_result({success: result})
        output.writeMessageBegin('update_partition_column_statistics', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.InvalidInputException) {
          var result = new ThriftHiveMetastore_update_partition_column_statistics_result(err)
          output.writeMessageBegin('update_partition_column_statistics', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('update_partition_column_statistics', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.update_partition_column_statistics(args.stats_obj, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.InvalidInputException) {
        var result = new ThriftHiveMetastore_update_partition_column_statistics_result((err != null ? err : {success: result}))
        output.writeMessageBegin('update_partition_column_statistics', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('update_partition_column_statistics', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_table_column_statistics = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_table_column_statistics_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_table_column_statistics.length === 3) {
    Q.fcall(this._handler.get_table_column_statistics, args.db_name, args.tbl_name, args.col_name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_table_column_statistics_result({success: result})
        output.writeMessageBegin('get_table_column_statistics', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.InvalidInputException || err instanceof ttypes.InvalidObjectException) {
          var result = new ThriftHiveMetastore_get_table_column_statistics_result(err)
          output.writeMessageBegin('get_table_column_statistics', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_table_column_statistics', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_table_column_statistics(args.db_name, args.tbl_name, args.col_name, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.InvalidInputException || err instanceof ttypes.InvalidObjectException) {
        var result = new ThriftHiveMetastore_get_table_column_statistics_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_table_column_statistics', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_table_column_statistics', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_partition_column_statistics = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partition_column_statistics_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_partition_column_statistics.length === 4) {
    Q.fcall(this._handler.get_partition_column_statistics, args.db_name, args.tbl_name, args.part_name, args.col_name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_partition_column_statistics_result({success: result})
        output.writeMessageBegin('get_partition_column_statistics', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.InvalidInputException || err instanceof ttypes.InvalidObjectException) {
          var result = new ThriftHiveMetastore_get_partition_column_statistics_result(err)
          output.writeMessageBegin('get_partition_column_statistics', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_partition_column_statistics', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_partition_column_statistics(args.db_name, args.tbl_name, args.part_name, args.col_name, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.InvalidInputException || err instanceof ttypes.InvalidObjectException) {
        var result = new ThriftHiveMetastore_get_partition_column_statistics_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_partition_column_statistics', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_partition_column_statistics', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_table_statistics_req = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_table_statistics_req_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_table_statistics_req.length === 1) {
    Q.fcall(this._handler.get_table_statistics_req, args.request)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_table_statistics_req_result({success: result})
        output.writeMessageBegin('get_table_statistics_req', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_get_table_statistics_req_result(err)
          output.writeMessageBegin('get_table_statistics_req', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_table_statistics_req', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_table_statistics_req(args.request, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_get_table_statistics_req_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_table_statistics_req', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_table_statistics_req', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_partitions_statistics_req = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_statistics_req_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_partitions_statistics_req.length === 1) {
    Q.fcall(this._handler.get_partitions_statistics_req, args.request)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_partitions_statistics_req_result({success: result})
        output.writeMessageBegin('get_partitions_statistics_req', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_get_partitions_statistics_req_result(err)
          output.writeMessageBegin('get_partitions_statistics_req', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_partitions_statistics_req', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_partitions_statistics_req(args.request, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_get_partitions_statistics_req_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_partitions_statistics_req', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_partitions_statistics_req', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_aggr_stats_for = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_aggr_stats_for_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_aggr_stats_for.length === 1) {
    Q.fcall(this._handler.get_aggr_stats_for, args.request)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_aggr_stats_for_result({success: result})
        output.writeMessageBegin('get_aggr_stats_for', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_get_aggr_stats_for_result(err)
          output.writeMessageBegin('get_aggr_stats_for', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_aggr_stats_for', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_aggr_stats_for(args.request, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_get_aggr_stats_for_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_aggr_stats_for', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_aggr_stats_for', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_set_aggr_stats_for = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_set_aggr_stats_for_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.set_aggr_stats_for.length === 1) {
    Q.fcall(this._handler.set_aggr_stats_for, args.request)
      .then(function(result) {
        var result = new ThriftHiveMetastore_set_aggr_stats_for_result({success: result})
        output.writeMessageBegin('set_aggr_stats_for', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.InvalidInputException) {
          var result = new ThriftHiveMetastore_set_aggr_stats_for_result(err)
          output.writeMessageBegin('set_aggr_stats_for', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('set_aggr_stats_for', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.set_aggr_stats_for(args.request, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.InvalidInputException) {
        var result = new ThriftHiveMetastore_set_aggr_stats_for_result((err != null ? err : {success: result}))
        output.writeMessageBegin('set_aggr_stats_for', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('set_aggr_stats_for', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_delete_partition_column_statistics = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_delete_partition_column_statistics_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.delete_partition_column_statistics.length === 4) {
    Q.fcall(this._handler.delete_partition_column_statistics, args.db_name, args.tbl_name, args.part_name, args.col_name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_delete_partition_column_statistics_result({success: result})
        output.writeMessageBegin('delete_partition_column_statistics', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.InvalidInputException) {
          var result = new ThriftHiveMetastore_delete_partition_column_statistics_result(err)
          output.writeMessageBegin('delete_partition_column_statistics', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('delete_partition_column_statistics', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.delete_partition_column_statistics(args.db_name, args.tbl_name, args.part_name, args.col_name, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.InvalidInputException) {
        var result = new ThriftHiveMetastore_delete_partition_column_statistics_result((err != null ? err : {success: result}))
        output.writeMessageBegin('delete_partition_column_statistics', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('delete_partition_column_statistics', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_delete_table_column_statistics = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_delete_table_column_statistics_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.delete_table_column_statistics.length === 3) {
    Q.fcall(this._handler.delete_table_column_statistics, args.db_name, args.tbl_name, args.col_name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_delete_table_column_statistics_result({success: result})
        output.writeMessageBegin('delete_table_column_statistics', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.InvalidInputException) {
          var result = new ThriftHiveMetastore_delete_table_column_statistics_result(err)
          output.writeMessageBegin('delete_table_column_statistics', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('delete_table_column_statistics', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.delete_table_column_statistics(args.db_name, args.tbl_name, args.col_name, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.InvalidInputException) {
        var result = new ThriftHiveMetastore_delete_table_column_statistics_result((err != null ? err : {success: result}))
        output.writeMessageBegin('delete_table_column_statistics', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('delete_table_column_statistics', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_create_function = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_create_function_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.create_function.length === 1) {
    Q.fcall(this._handler.create_function, args.func)
      .then(function(result) {
        var result = new ThriftHiveMetastore_create_function_result({success: result})
        output.writeMessageBegin('create_function', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          var result = new ThriftHiveMetastore_create_function_result(err)
          output.writeMessageBegin('create_function', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('create_function', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.create_function(args.func, function (err, result) {
      if (err == null || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        var result = new ThriftHiveMetastore_create_function_result((err != null ? err : {success: result}))
        output.writeMessageBegin('create_function', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('create_function', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_drop_function = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_function_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.drop_function.length === 2) {
    Q.fcall(this._handler.drop_function, args.dbName, args.funcName)
      .then(function(result) {
        var result = new ThriftHiveMetastore_drop_function_result({success: result})
        output.writeMessageBegin('drop_function', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_drop_function_result(err)
          output.writeMessageBegin('drop_function', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('drop_function', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.drop_function(args.dbName, args.funcName, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_drop_function_result((err != null ? err : {success: result}))
        output.writeMessageBegin('drop_function', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('drop_function', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_alter_function = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_function_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.alter_function.length === 3) {
    Q.fcall(this._handler.alter_function, args.dbName, args.funcName, args.newFunc)
      .then(function(result) {
        var result = new ThriftHiveMetastore_alter_function_result({success: result})
        output.writeMessageBegin('alter_function', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_alter_function_result(err)
          output.writeMessageBegin('alter_function', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('alter_function', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.alter_function(args.dbName, args.funcName, args.newFunc, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_alter_function_result((err != null ? err : {success: result}))
        output.writeMessageBegin('alter_function', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('alter_function', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_functions = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_functions_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_functions.length === 2) {
    Q.fcall(this._handler.get_functions, args.dbName, args.pattern)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_functions_result({success: result})
        output.writeMessageBegin('get_functions', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_get_functions_result(err)
          output.writeMessageBegin('get_functions', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_functions', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_functions(args.dbName, args.pattern, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_get_functions_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_functions', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_functions', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_function = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_function_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_function.length === 2) {
    Q.fcall(this._handler.get_function, args.dbName, args.funcName)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_function_result({success: result})
        output.writeMessageBegin('get_function', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          var result = new ThriftHiveMetastore_get_function_result(err)
          output.writeMessageBegin('get_function', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_function', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_function(args.dbName, args.funcName, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        var result = new ThriftHiveMetastore_get_function_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_function', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_function', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_all_functions = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_all_functions_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_all_functions.length === 0) {
    Q.fcall(this._handler.get_all_functions)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_all_functions_result({success: result})
        output.writeMessageBegin('get_all_functions', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_get_all_functions_result(err)
          output.writeMessageBegin('get_all_functions', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_all_functions', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_all_functions(function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_get_all_functions_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_all_functions', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_all_functions', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_create_role = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_create_role_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.create_role.length === 1) {
    Q.fcall(this._handler.create_role, args.role)
      .then(function(result) {
        var result = new ThriftHiveMetastore_create_role_result({success: result})
        output.writeMessageBegin('create_role', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_create_role_result(err)
          output.writeMessageBegin('create_role', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('create_role', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.create_role(args.role, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_create_role_result((err != null ? err : {success: result}))
        output.writeMessageBegin('create_role', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('create_role', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_drop_role = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_role_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.drop_role.length === 1) {
    Q.fcall(this._handler.drop_role, args.role_name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_drop_role_result({success: result})
        output.writeMessageBegin('drop_role', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_drop_role_result(err)
          output.writeMessageBegin('drop_role', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('drop_role', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.drop_role(args.role_name, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_drop_role_result((err != null ? err : {success: result}))
        output.writeMessageBegin('drop_role', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('drop_role', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_role_names = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_role_names_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_role_names.length === 0) {
    Q.fcall(this._handler.get_role_names)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_role_names_result({success: result})
        output.writeMessageBegin('get_role_names', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_get_role_names_result(err)
          output.writeMessageBegin('get_role_names', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_role_names', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_role_names(function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_get_role_names_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_role_names', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_role_names', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_grant_role = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_grant_role_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.grant_role.length === 6) {
    Q.fcall(this._handler.grant_role, args.role_name, args.principal_name, args.principal_type, args.grantor, args.grantorType, args.grant_option)
      .then(function(result) {
        var result = new ThriftHiveMetastore_grant_role_result({success: result})
        output.writeMessageBegin('grant_role', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_grant_role_result(err)
          output.writeMessageBegin('grant_role', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('grant_role', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.grant_role(args.role_name, args.principal_name, args.principal_type, args.grantor, args.grantorType, args.grant_option, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_grant_role_result((err != null ? err : {success: result}))
        output.writeMessageBegin('grant_role', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('grant_role', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_revoke_role = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_revoke_role_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.revoke_role.length === 3) {
    Q.fcall(this._handler.revoke_role, args.role_name, args.principal_name, args.principal_type)
      .then(function(result) {
        var result = new ThriftHiveMetastore_revoke_role_result({success: result})
        output.writeMessageBegin('revoke_role', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_revoke_role_result(err)
          output.writeMessageBegin('revoke_role', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('revoke_role', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.revoke_role(args.role_name, args.principal_name, args.principal_type, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_revoke_role_result((err != null ? err : {success: result}))
        output.writeMessageBegin('revoke_role', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('revoke_role', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_list_roles = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_list_roles_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.list_roles.length === 2) {
    Q.fcall(this._handler.list_roles, args.principal_name, args.principal_type)
      .then(function(result) {
        var result = new ThriftHiveMetastore_list_roles_result({success: result})
        output.writeMessageBegin('list_roles', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_list_roles_result(err)
          output.writeMessageBegin('list_roles', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('list_roles', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.list_roles(args.principal_name, args.principal_type, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_list_roles_result((err != null ? err : {success: result}))
        output.writeMessageBegin('list_roles', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('list_roles', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_grant_revoke_role = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_grant_revoke_role_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.grant_revoke_role.length === 1) {
    Q.fcall(this._handler.grant_revoke_role, args.request)
      .then(function(result) {
        var result = new ThriftHiveMetastore_grant_revoke_role_result({success: result})
        output.writeMessageBegin('grant_revoke_role', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_grant_revoke_role_result(err)
          output.writeMessageBegin('grant_revoke_role', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('grant_revoke_role', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.grant_revoke_role(args.request, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_grant_revoke_role_result((err != null ? err : {success: result}))
        output.writeMessageBegin('grant_revoke_role', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('grant_revoke_role', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_principals_in_role = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_principals_in_role_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_principals_in_role.length === 1) {
    Q.fcall(this._handler.get_principals_in_role, args.request)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_principals_in_role_result({success: result})
        output.writeMessageBegin('get_principals_in_role', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_get_principals_in_role_result(err)
          output.writeMessageBegin('get_principals_in_role', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_principals_in_role', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_principals_in_role(args.request, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_get_principals_in_role_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_principals_in_role', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_principals_in_role', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_role_grants_for_principal = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_role_grants_for_principal_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_role_grants_for_principal.length === 1) {
    Q.fcall(this._handler.get_role_grants_for_principal, args.request)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_role_grants_for_principal_result({success: result})
        output.writeMessageBegin('get_role_grants_for_principal', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_get_role_grants_for_principal_result(err)
          output.writeMessageBegin('get_role_grants_for_principal', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_role_grants_for_principal', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_role_grants_for_principal(args.request, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_get_role_grants_for_principal_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_role_grants_for_principal', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_role_grants_for_principal', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_privilege_set = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_privilege_set_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_privilege_set.length === 3) {
    Q.fcall(this._handler.get_privilege_set, args.hiveObject, args.user_name, args.group_names)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_privilege_set_result({success: result})
        output.writeMessageBegin('get_privilege_set', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_get_privilege_set_result(err)
          output.writeMessageBegin('get_privilege_set', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_privilege_set', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_privilege_set(args.hiveObject, args.user_name, args.group_names, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_get_privilege_set_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_privilege_set', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_privilege_set', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_list_privileges = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_list_privileges_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.list_privileges.length === 3) {
    Q.fcall(this._handler.list_privileges, args.principal_name, args.principal_type, args.hiveObject)
      .then(function(result) {
        var result = new ThriftHiveMetastore_list_privileges_result({success: result})
        output.writeMessageBegin('list_privileges', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_list_privileges_result(err)
          output.writeMessageBegin('list_privileges', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('list_privileges', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.list_privileges(args.principal_name, args.principal_type, args.hiveObject, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_list_privileges_result((err != null ? err : {success: result}))
        output.writeMessageBegin('list_privileges', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('list_privileges', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_grant_privileges = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_grant_privileges_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.grant_privileges.length === 1) {
    Q.fcall(this._handler.grant_privileges, args.privileges)
      .then(function(result) {
        var result = new ThriftHiveMetastore_grant_privileges_result({success: result})
        output.writeMessageBegin('grant_privileges', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_grant_privileges_result(err)
          output.writeMessageBegin('grant_privileges', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('grant_privileges', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.grant_privileges(args.privileges, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_grant_privileges_result((err != null ? err : {success: result}))
        output.writeMessageBegin('grant_privileges', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('grant_privileges', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_revoke_privileges = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_revoke_privileges_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.revoke_privileges.length === 1) {
    Q.fcall(this._handler.revoke_privileges, args.privileges)
      .then(function(result) {
        var result = new ThriftHiveMetastore_revoke_privileges_result({success: result})
        output.writeMessageBegin('revoke_privileges', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_revoke_privileges_result(err)
          output.writeMessageBegin('revoke_privileges', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('revoke_privileges', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.revoke_privileges(args.privileges, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_revoke_privileges_result((err != null ? err : {success: result}))
        output.writeMessageBegin('revoke_privileges', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('revoke_privileges', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_grant_revoke_privileges = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_grant_revoke_privileges_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.grant_revoke_privileges.length === 1) {
    Q.fcall(this._handler.grant_revoke_privileges, args.request)
      .then(function(result) {
        var result = new ThriftHiveMetastore_grant_revoke_privileges_result({success: result})
        output.writeMessageBegin('grant_revoke_privileges', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_grant_revoke_privileges_result(err)
          output.writeMessageBegin('grant_revoke_privileges', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('grant_revoke_privileges', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.grant_revoke_privileges(args.request, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_grant_revoke_privileges_result((err != null ? err : {success: result}))
        output.writeMessageBegin('grant_revoke_privileges', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('grant_revoke_privileges', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_set_ugi = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_set_ugi_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.set_ugi.length === 2) {
    Q.fcall(this._handler.set_ugi, args.user_name, args.group_names)
      .then(function(result) {
        var result = new ThriftHiveMetastore_set_ugi_result({success: result})
        output.writeMessageBegin('set_ugi', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_set_ugi_result(err)
          output.writeMessageBegin('set_ugi', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('set_ugi', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.set_ugi(args.user_name, args.group_names, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_set_ugi_result((err != null ? err : {success: result}))
        output.writeMessageBegin('set_ugi', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('set_ugi', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_delegation_token = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_delegation_token_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_delegation_token.length === 2) {
    Q.fcall(this._handler.get_delegation_token, args.token_owner, args.renewer_kerberos_principal_name)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_delegation_token_result({success: result})
        output.writeMessageBegin('get_delegation_token', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_get_delegation_token_result(err)
          output.writeMessageBegin('get_delegation_token', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('get_delegation_token', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_delegation_token(args.token_owner, args.renewer_kerberos_principal_name, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_get_delegation_token_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_delegation_token', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_delegation_token', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_renew_delegation_token = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_renew_delegation_token_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.renew_delegation_token.length === 1) {
    Q.fcall(this._handler.renew_delegation_token, args.token_str_form)
      .then(function(result) {
        var result = new ThriftHiveMetastore_renew_delegation_token_result({success: result})
        output.writeMessageBegin('renew_delegation_token', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_renew_delegation_token_result(err)
          output.writeMessageBegin('renew_delegation_token', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('renew_delegation_token', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.renew_delegation_token(args.token_str_form, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_renew_delegation_token_result((err != null ? err : {success: result}))
        output.writeMessageBegin('renew_delegation_token', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('renew_delegation_token', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_cancel_delegation_token = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_cancel_delegation_token_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.cancel_delegation_token.length === 1) {
    Q.fcall(this._handler.cancel_delegation_token, args.token_str_form)
      .then(function(result) {
        var result = new ThriftHiveMetastore_cancel_delegation_token_result({success: result})
        output.writeMessageBegin('cancel_delegation_token', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_cancel_delegation_token_result(err)
          output.writeMessageBegin('cancel_delegation_token', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('cancel_delegation_token', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.cancel_delegation_token(args.token_str_form, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_cancel_delegation_token_result((err != null ? err : {success: result}))
        output.writeMessageBegin('cancel_delegation_token', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('cancel_delegation_token', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_add_token = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_add_token_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.add_token.length === 2) {
    Q.fcall(this._handler.add_token, args.token_identifier, args.delegation_token)
      .then(function(result) {
        var result = new ThriftHiveMetastore_add_token_result({success: result})
        output.writeMessageBegin('add_token', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('add_token', Thrift.MessageType.EXCEPTION, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.add_token(args.token_identifier, args.delegation_token, function (err, result) {
      if (err == null) {
        var result = new ThriftHiveMetastore_add_token_result((err != null ? err : {success: result}))
        output.writeMessageBegin('add_token', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('add_token', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_remove_token = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_remove_token_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.remove_token.length === 1) {
    Q.fcall(this._handler.remove_token, args.token_identifier)
      .then(function(result) {
        var result = new ThriftHiveMetastore_remove_token_result({success: result})
        output.writeMessageBegin('remove_token', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('remove_token', Thrift.MessageType.EXCEPTION, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.remove_token(args.token_identifier, function (err, result) {
      if (err == null) {
        var result = new ThriftHiveMetastore_remove_token_result((err != null ? err : {success: result}))
        output.writeMessageBegin('remove_token', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('remove_token', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_token = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_token_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_token.length === 1) {
    Q.fcall(this._handler.get_token, args.token_identifier)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_token_result({success: result})
        output.writeMessageBegin('get_token', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_token', Thrift.MessageType.EXCEPTION, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_token(args.token_identifier, function (err, result) {
      if (err == null) {
        var result = new ThriftHiveMetastore_get_token_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_token', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_token', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_all_token_identifiers = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_all_token_identifiers_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_all_token_identifiers.length === 0) {
    Q.fcall(this._handler.get_all_token_identifiers)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_all_token_identifiers_result({success: result})
        output.writeMessageBegin('get_all_token_identifiers', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_all_token_identifiers', Thrift.MessageType.EXCEPTION, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_all_token_identifiers(function (err, result) {
      if (err == null) {
        var result = new ThriftHiveMetastore_get_all_token_identifiers_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_all_token_identifiers', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_all_token_identifiers', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_add_master_key = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_add_master_key_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.add_master_key.length === 1) {
    Q.fcall(this._handler.add_master_key, args.key)
      .then(function(result) {
        var result = new ThriftHiveMetastore_add_master_key_result({success: result})
        output.writeMessageBegin('add_master_key', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_add_master_key_result(err)
          output.writeMessageBegin('add_master_key', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('add_master_key', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.add_master_key(args.key, function (err, result) {
      if (err == null || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_add_master_key_result((err != null ? err : {success: result}))
        output.writeMessageBegin('add_master_key', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('add_master_key', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_update_master_key = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_update_master_key_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.update_master_key.length === 2) {
    Q.fcall(this._handler.update_master_key, args.seq_number, args.key)
      .then(function(result) {
        var result = new ThriftHiveMetastore_update_master_key_result({success: result})
        output.writeMessageBegin('update_master_key', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
          var result = new ThriftHiveMetastore_update_master_key_result(err)
          output.writeMessageBegin('update_master_key', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('update_master_key', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.update_master_key(args.seq_number, args.key, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
        var result = new ThriftHiveMetastore_update_master_key_result((err != null ? err : {success: result}))
        output.writeMessageBegin('update_master_key', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('update_master_key', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_remove_master_key = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_remove_master_key_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.remove_master_key.length === 1) {
    Q.fcall(this._handler.remove_master_key, args.key_seq)
      .then(function(result) {
        var result = new ThriftHiveMetastore_remove_master_key_result({success: result})
        output.writeMessageBegin('remove_master_key', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('remove_master_key', Thrift.MessageType.EXCEPTION, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.remove_master_key(args.key_seq, function (err, result) {
      if (err == null) {
        var result = new ThriftHiveMetastore_remove_master_key_result((err != null ? err : {success: result}))
        output.writeMessageBegin('remove_master_key', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('remove_master_key', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_master_keys = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_master_keys_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_master_keys.length === 0) {
    Q.fcall(this._handler.get_master_keys)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_master_keys_result({success: result})
        output.writeMessageBegin('get_master_keys', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_master_keys', Thrift.MessageType.EXCEPTION, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_master_keys(function (err, result) {
      if (err == null) {
        var result = new ThriftHiveMetastore_get_master_keys_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_master_keys', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_master_keys', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_open_txns = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_open_txns_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_open_txns.length === 0) {
    Q.fcall(this._handler.get_open_txns)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_open_txns_result({success: result})
        output.writeMessageBegin('get_open_txns', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_open_txns', Thrift.MessageType.EXCEPTION, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_open_txns(function (err, result) {
      if (err == null) {
        var result = new ThriftHiveMetastore_get_open_txns_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_open_txns', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_open_txns', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_open_txns_info = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_open_txns_info_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_open_txns_info.length === 0) {
    Q.fcall(this._handler.get_open_txns_info)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_open_txns_info_result({success: result})
        output.writeMessageBegin('get_open_txns_info', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_open_txns_info', Thrift.MessageType.EXCEPTION, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_open_txns_info(function (err, result) {
      if (err == null) {
        var result = new ThriftHiveMetastore_get_open_txns_info_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_open_txns_info', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_open_txns_info', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_open_txns = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_open_txns_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.open_txns.length === 1) {
    Q.fcall(this._handler.open_txns, args.rqst)
      .then(function(result) {
        var result = new ThriftHiveMetastore_open_txns_result({success: result})
        output.writeMessageBegin('open_txns', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('open_txns', Thrift.MessageType.EXCEPTION, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.open_txns(args.rqst, function (err, result) {
      if (err == null) {
        var result = new ThriftHiveMetastore_open_txns_result((err != null ? err : {success: result}))
        output.writeMessageBegin('open_txns', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('open_txns', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_abort_txn = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_abort_txn_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.abort_txn.length === 1) {
    Q.fcall(this._handler.abort_txn, args.rqst)
      .then(function(result) {
        var result = new ThriftHiveMetastore_abort_txn_result({success: result})
        output.writeMessageBegin('abort_txn', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchTxnException) {
          var result = new ThriftHiveMetastore_abort_txn_result(err)
          output.writeMessageBegin('abort_txn', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('abort_txn', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.abort_txn(args.rqst, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchTxnException) {
        var result = new ThriftHiveMetastore_abort_txn_result((err != null ? err : {success: result}))
        output.writeMessageBegin('abort_txn', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('abort_txn', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_abort_txns = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_abort_txns_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.abort_txns.length === 1) {
    Q.fcall(this._handler.abort_txns, args.rqst)
      .then(function(result) {
        var result = new ThriftHiveMetastore_abort_txns_result({success: result})
        output.writeMessageBegin('abort_txns', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchTxnException) {
          var result = new ThriftHiveMetastore_abort_txns_result(err)
          output.writeMessageBegin('abort_txns', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('abort_txns', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.abort_txns(args.rqst, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchTxnException) {
        var result = new ThriftHiveMetastore_abort_txns_result((err != null ? err : {success: result}))
        output.writeMessageBegin('abort_txns', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('abort_txns', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_commit_txn = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_commit_txn_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.commit_txn.length === 1) {
    Q.fcall(this._handler.commit_txn, args.rqst)
      .then(function(result) {
        var result = new ThriftHiveMetastore_commit_txn_result({success: result})
        output.writeMessageBegin('commit_txn', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchTxnException || err instanceof ttypes.TxnAbortedException) {
          var result = new ThriftHiveMetastore_commit_txn_result(err)
          output.writeMessageBegin('commit_txn', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('commit_txn', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.commit_txn(args.rqst, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchTxnException || err instanceof ttypes.TxnAbortedException) {
        var result = new ThriftHiveMetastore_commit_txn_result((err != null ? err : {success: result}))
        output.writeMessageBegin('commit_txn', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('commit_txn', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_lock = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_lock_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.lock.length === 1) {
    Q.fcall(this._handler.lock, args.rqst)
      .then(function(result) {
        var result = new ThriftHiveMetastore_lock_result({success: result})
        output.writeMessageBegin('lock', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchTxnException || err instanceof ttypes.TxnAbortedException) {
          var result = new ThriftHiveMetastore_lock_result(err)
          output.writeMessageBegin('lock', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('lock', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.lock(args.rqst, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchTxnException || err instanceof ttypes.TxnAbortedException) {
        var result = new ThriftHiveMetastore_lock_result((err != null ? err : {success: result}))
        output.writeMessageBegin('lock', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('lock', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_check_lock = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_check_lock_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.check_lock.length === 1) {
    Q.fcall(this._handler.check_lock, args.rqst)
      .then(function(result) {
        var result = new ThriftHiveMetastore_check_lock_result({success: result})
        output.writeMessageBegin('check_lock', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchTxnException || err instanceof ttypes.TxnAbortedException || err instanceof ttypes.NoSuchLockException) {
          var result = new ThriftHiveMetastore_check_lock_result(err)
          output.writeMessageBegin('check_lock', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('check_lock', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.check_lock(args.rqst, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchTxnException || err instanceof ttypes.TxnAbortedException || err instanceof ttypes.NoSuchLockException) {
        var result = new ThriftHiveMetastore_check_lock_result((err != null ? err : {success: result}))
        output.writeMessageBegin('check_lock', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('check_lock', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_unlock = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_unlock_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.unlock.length === 1) {
    Q.fcall(this._handler.unlock, args.rqst)
      .then(function(result) {
        var result = new ThriftHiveMetastore_unlock_result({success: result})
        output.writeMessageBegin('unlock', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchLockException || err instanceof ttypes.TxnOpenException) {
          var result = new ThriftHiveMetastore_unlock_result(err)
          output.writeMessageBegin('unlock', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('unlock', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.unlock(args.rqst, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchLockException || err instanceof ttypes.TxnOpenException) {
        var result = new ThriftHiveMetastore_unlock_result((err != null ? err : {success: result}))
        output.writeMessageBegin('unlock', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('unlock', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_show_locks = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_show_locks_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.show_locks.length === 1) {
    Q.fcall(this._handler.show_locks, args.rqst)
      .then(function(result) {
        var result = new ThriftHiveMetastore_show_locks_result({success: result})
        output.writeMessageBegin('show_locks', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('show_locks', Thrift.MessageType.EXCEPTION, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.show_locks(args.rqst, function (err, result) {
      if (err == null) {
        var result = new ThriftHiveMetastore_show_locks_result((err != null ? err : {success: result}))
        output.writeMessageBegin('show_locks', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('show_locks', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_heartbeat = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_heartbeat_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.heartbeat.length === 1) {
    Q.fcall(this._handler.heartbeat, args.ids)
      .then(function(result) {
        var result = new ThriftHiveMetastore_heartbeat_result({success: result})
        output.writeMessageBegin('heartbeat', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchLockException || err instanceof ttypes.NoSuchTxnException || err instanceof ttypes.TxnAbortedException) {
          var result = new ThriftHiveMetastore_heartbeat_result(err)
          output.writeMessageBegin('heartbeat', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('heartbeat', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.heartbeat(args.ids, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchLockException || err instanceof ttypes.NoSuchTxnException || err instanceof ttypes.TxnAbortedException) {
        var result = new ThriftHiveMetastore_heartbeat_result((err != null ? err : {success: result}))
        output.writeMessageBegin('heartbeat', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('heartbeat', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_heartbeat_txn_range = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_heartbeat_txn_range_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.heartbeat_txn_range.length === 1) {
    Q.fcall(this._handler.heartbeat_txn_range, args.txns)
      .then(function(result) {
        var result = new ThriftHiveMetastore_heartbeat_txn_range_result({success: result})
        output.writeMessageBegin('heartbeat_txn_range', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('heartbeat_txn_range', Thrift.MessageType.EXCEPTION, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.heartbeat_txn_range(args.txns, function (err, result) {
      if (err == null) {
        var result = new ThriftHiveMetastore_heartbeat_txn_range_result((err != null ? err : {success: result}))
        output.writeMessageBegin('heartbeat_txn_range', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('heartbeat_txn_range', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_compact = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_compact_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.compact.length === 1) {
    Q.fcall(this._handler.compact, args.rqst)
      .then(function(result) {
        var result = new ThriftHiveMetastore_compact_result({success: result})
        output.writeMessageBegin('compact', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('compact', Thrift.MessageType.EXCEPTION, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.compact(args.rqst, function (err, result) {
      if (err == null) {
        var result = new ThriftHiveMetastore_compact_result((err != null ? err : {success: result}))
        output.writeMessageBegin('compact', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('compact', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_show_compact = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_show_compact_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.show_compact.length === 1) {
    Q.fcall(this._handler.show_compact, args.rqst)
      .then(function(result) {
        var result = new ThriftHiveMetastore_show_compact_result({success: result})
        output.writeMessageBegin('show_compact', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('show_compact', Thrift.MessageType.EXCEPTION, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.show_compact(args.rqst, function (err, result) {
      if (err == null) {
        var result = new ThriftHiveMetastore_show_compact_result((err != null ? err : {success: result}))
        output.writeMessageBegin('show_compact', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('show_compact', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_add_dynamic_partitions = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_add_dynamic_partitions_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.add_dynamic_partitions.length === 1) {
    Q.fcall(this._handler.add_dynamic_partitions, args.rqst)
      .then(function(result) {
        var result = new ThriftHiveMetastore_add_dynamic_partitions_result({success: result})
        output.writeMessageBegin('add_dynamic_partitions', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        if (err instanceof ttypes.NoSuchTxnException || err instanceof ttypes.TxnAbortedException) {
          var result = new ThriftHiveMetastore_add_dynamic_partitions_result(err)
          output.writeMessageBegin('add_dynamic_partitions', Thrift.MessageType.REPLY, seqid)
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
          output.writeMessageBegin('add_dynamic_partitions', Thrift.MessageType.EXCEPTION, seqid)
        }
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.add_dynamic_partitions(args.rqst, function (err, result) {
      if (err == null || err instanceof ttypes.NoSuchTxnException || err instanceof ttypes.TxnAbortedException) {
        var result = new ThriftHiveMetastore_add_dynamic_partitions_result((err != null ? err : {success: result}))
        output.writeMessageBegin('add_dynamic_partitions', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('add_dynamic_partitions', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_next_notification = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_next_notification_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_next_notification.length === 1) {
    Q.fcall(this._handler.get_next_notification, args.rqst)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_next_notification_result({success: result})
        output.writeMessageBegin('get_next_notification', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_next_notification', Thrift.MessageType.EXCEPTION, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_next_notification(args.rqst, function (err, result) {
      if (err == null) {
        var result = new ThriftHiveMetastore_get_next_notification_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_next_notification', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_next_notification', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_current_notificationEventId = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_current_notificationEventId_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_current_notificationEventId.length === 0) {
    Q.fcall(this._handler.get_current_notificationEventId)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_current_notificationEventId_result({success: result})
        output.writeMessageBegin('get_current_notificationEventId', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_current_notificationEventId', Thrift.MessageType.EXCEPTION, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_current_notificationEventId(function (err, result) {
      if (err == null) {
        var result = new ThriftHiveMetastore_get_current_notificationEventId_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_current_notificationEventId', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_current_notificationEventId', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_fire_listener_event = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_fire_listener_event_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.fire_listener_event.length === 1) {
    Q.fcall(this._handler.fire_listener_event, args.rqst)
      .then(function(result) {
        var result = new ThriftHiveMetastore_fire_listener_event_result({success: result})
        output.writeMessageBegin('fire_listener_event', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('fire_listener_event', Thrift.MessageType.EXCEPTION, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.fire_listener_event(args.rqst, function (err, result) {
      if (err == null) {
        var result = new ThriftHiveMetastore_fire_listener_event_result((err != null ? err : {success: result}))
        output.writeMessageBegin('fire_listener_event', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('fire_listener_event', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_flushCache = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_flushCache_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.flushCache.length === 0) {
    Q.fcall(this._handler.flushCache)
      .then(function(result) {
        var result = new ThriftHiveMetastore_flushCache_result({success: result})
        output.writeMessageBegin('flushCache', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('flushCache', Thrift.MessageType.EXCEPTION, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.flushCache(function (err, result) {
      if (err == null) {
        var result = new ThriftHiveMetastore_flushCache_result((err != null ? err : {success: result}))
        output.writeMessageBegin('flushCache', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('flushCache', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_file_metadata_by_expr = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_file_metadata_by_expr_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_file_metadata_by_expr.length === 1) {
    Q.fcall(this._handler.get_file_metadata_by_expr, args.req)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_file_metadata_by_expr_result({success: result})
        output.writeMessageBegin('get_file_metadata_by_expr', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_file_metadata_by_expr', Thrift.MessageType.EXCEPTION, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_file_metadata_by_expr(args.req, function (err, result) {
      if (err == null) {
        var result = new ThriftHiveMetastore_get_file_metadata_by_expr_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_file_metadata_by_expr', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_file_metadata_by_expr', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_get_file_metadata = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_file_metadata_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.get_file_metadata.length === 1) {
    Q.fcall(this._handler.get_file_metadata, args.req)
      .then(function(result) {
        var result = new ThriftHiveMetastore_get_file_metadata_result({success: result})
        output.writeMessageBegin('get_file_metadata', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_file_metadata', Thrift.MessageType.EXCEPTION, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.get_file_metadata(args.req, function (err, result) {
      if (err == null) {
        var result = new ThriftHiveMetastore_get_file_metadata_result((err != null ? err : {success: result}))
        output.writeMessageBegin('get_file_metadata', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('get_file_metadata', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_put_file_metadata = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_put_file_metadata_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.put_file_metadata.length === 1) {
    Q.fcall(this._handler.put_file_metadata, args.req)
      .then(function(result) {
        var result = new ThriftHiveMetastore_put_file_metadata_result({success: result})
        output.writeMessageBegin('put_file_metadata', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('put_file_metadata', Thrift.MessageType.EXCEPTION, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.put_file_metadata(args.req, function (err, result) {
      if (err == null) {
        var result = new ThriftHiveMetastore_put_file_metadata_result((err != null ? err : {success: result}))
        output.writeMessageBegin('put_file_metadata', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('put_file_metadata', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_clear_file_metadata = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_clear_file_metadata_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.clear_file_metadata.length === 1) {
    Q.fcall(this._handler.clear_file_metadata, args.req)
      .then(function(result) {
        var result = new ThriftHiveMetastore_clear_file_metadata_result({success: result})
        output.writeMessageBegin('clear_file_metadata', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('clear_file_metadata', Thrift.MessageType.EXCEPTION, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.clear_file_metadata(args.req, function (err, result) {
      if (err == null) {
        var result = new ThriftHiveMetastore_clear_file_metadata_result((err != null ? err : {success: result}))
        output.writeMessageBegin('clear_file_metadata', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('clear_file_metadata', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

ThriftHiveMetastoreProcessor.prototype.process_cache_file_metadata = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_cache_file_metadata_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.cache_file_metadata.length === 1) {
    Q.fcall(this._handler.cache_file_metadata, args.req)
      .then(function(result) {
        var result = new ThriftHiveMetastore_cache_file_metadata_result({success: result})
        output.writeMessageBegin('cache_file_metadata', Thrift.MessageType.REPLY, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('cache_file_metadata', Thrift.MessageType.EXCEPTION, seqid)
        result.write(output)
        output.writeMessageEnd()
        output.flush()
      })
  } else {
    this._handler.cache_file_metadata(args.req, function (err, result) {
      if (err == null) {
        var result = new ThriftHiveMetastore_cache_file_metadata_result((err != null ? err : {success: result}))
        output.writeMessageBegin('cache_file_metadata', Thrift.MessageType.REPLY, seqid)
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('cache_file_metadata', Thrift.MessageType.EXCEPTION, seqid)
      }
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

