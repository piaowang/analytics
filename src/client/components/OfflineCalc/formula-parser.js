// 通过 formula.grammar 在 https://pegjs.org/online 生成

module.exports = /*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
  (function() {
    'use strict'
    
    function peg$subclass(child, parent) {
      function ctor() { this.constructor = child }
      ctor.prototype = parent.prototype
      child.prototype = new ctor()
    }
    
    function peg$SyntaxError(message, expected, found, location) {
      this.message  = message
      this.expected = expected
      this.found    = found
      this.location = location
      this.name     = 'SyntaxError'
      
      if (typeof Error.captureStackTrace === 'function') {
        Error.captureStackTrace(this, peg$SyntaxError)
      }
    }
    
    peg$subclass(peg$SyntaxError, Error)
    
    peg$SyntaxError.buildMessage = function(expected, found) {
      var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return '"' + literalEscape(expectation.text) + '"'
        },
        
        'class': function(expectation) {
          var escapedParts = '',
            i
          
          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + '-' + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i])
          }
          
          return '[' + (expectation.inverted ? '^' : '') + escapedParts + ']'
        },
        
        any: function(expectation) {
          return 'any character'
        },
        
        end: function(expectation) {
          return 'end of input'
        },
        
        other: function(expectation) {
          return expectation.description
        }
      }
      
      function hex(ch) {
        return ch.charCodeAt(0).toString(16).toUpperCase()
      }
      
      function literalEscape(s) {
        return s
          .replace(/\\/g, '\\\\')
          .replace(/"/g,  '\\"')
          .replace(/\0/g, '\\0')
          .replace(/\t/g, '\\t')
          .replace(/\n/g, '\\n')
          .replace(/\r/g, '\\r')
          .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch) })
          .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch) })
      }
      
      function classEscape(s) {
        return s
          .replace(/\\/g, '\\\\')
          .replace(/\]/g, '\\]')
          .replace(/\^/g, '\\^')
          .replace(/-/g,  '\\-')
          .replace(/\0/g, '\\0')
          .replace(/\t/g, '\\t')
          .replace(/\n/g, '\\n')
          .replace(/\r/g, '\\r')
          .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch) })
          .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch) })
      }
      
      function describeExpectation(expectation) {
        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation)
      }
      
      function describeExpected(expected) {
        var descriptions = new Array(expected.length),
          i, j
        
        for (i = 0; i < expected.length; i++) {
          descriptions[i] = describeExpectation(expected[i])
        }
        
        descriptions.sort()
        
        if (descriptions.length > 0) {
          for (i = 1, j = 1; i < descriptions.length; i++) {
            if (descriptions[i - 1] !== descriptions[i]) {
              descriptions[j] = descriptions[i]
              j++
            }
          }
          descriptions.length = j
        }
        
        switch (descriptions.length) {
          case 1:
            return descriptions[0]
          
          case 2:
            return descriptions[0] + ' or ' + descriptions[1]
          
          default:
            return descriptions.slice(0, -1).join(', ')
              + ', or '
              + descriptions[descriptions.length - 1]
        }
      }
      
      function describeFound(found) {
        return found ? '"' + literalEscape(found) + '"' : 'end of input'
      }
      
      return 'Expected ' + describeExpected(expected) + ' but ' + describeFound(found) + ' found.'
    }
    
    function peg$parse(input, options) {
      options = options !== void 0 ? options : {}
      
      var peg$FAILED = {},
        
        peg$startRuleFunctions = { Expression: peg$parseExpression },
        peg$startRuleFunction  = peg$parseExpression,
        
        peg$c0 = '+',
        peg$c1 = peg$literalExpectation('+', false),
        peg$c2 = '-',
        peg$c3 = peg$literalExpectation('-', false),
        peg$c4 = function(head, tail) {
          //console.log("+-", head, tail)
          return tail.reduce((result, element) => {
            let [ws, op, ws2, el] = element
            return { op, left: result, right: el }
          }, head)
        },
        peg$c5 = '*',
        peg$c6 = peg$literalExpectation('*', false),
        peg$c7 = '/',
        peg$c8 = peg$literalExpectation('/', false),
        peg$c9 = function(head, tail) {
          //console.log("*/", head, tail)
          return tail.reduce((result, element) => {
            let [ws, op, ws2, el] = element
            return { op, left: result, right: el }
          }, head)
        },
        peg$c10 = '(',
        peg$c11 = peg$literalExpectation('(', false),
        peg$c12 = ')',
        peg$c13 = peg$literalExpectation(')', false),
        peg$c14 = function(expr) { return expr },
        peg$c15 = peg$otherExpectation('whitespace'),
        peg$c16 = /^[ \t\n\r]/,
        peg$c17 = peg$classExpectation([' ', '\t', '\n', '\r'], false, false),
        peg$c18 = /^[0-9a-z_]/i,
        peg$c19 = peg$classExpectation([['0', '9'], ['a', 'z'], '_'], false, true),
        peg$c20 = /^[^)]/,
        peg$c21 = peg$classExpectation([')'], true, false),
        peg$c22 = function(funcName, args) {
          return {
            op: 'call',
            left: funcName.join(''),
            right: eval('((...args) => args)(' + args.join('') + ')')
          }
        },
        peg$c23 = peg$otherExpectation('number'),
        peg$c24 = function() { return parseFloat(text()) },
        peg$c25 = '.',
        peg$c26 = peg$literalExpectation('.', false),
        peg$c27 = /^[1-9]/,
        peg$c28 = peg$classExpectation([['1', '9']], false, false),
        peg$c29 = /^[eE]/,
        peg$c30 = peg$classExpectation(['e', 'E'], false, false),
        peg$c31 = '0',
        peg$c32 = peg$literalExpectation('0', false),
        peg$c33 = peg$otherExpectation('string'),
        peg$c34 = function(chars) { return chars.join('') },
        peg$c35 = '"',
        peg$c36 = peg$literalExpectation('"', false),
        peg$c37 = '\\',
        peg$c38 = peg$literalExpectation('\\', false),
        peg$c39 = 'b',
        peg$c40 = peg$literalExpectation('b', false),
        peg$c41 = function() { return '\b' },
        peg$c42 = 'f',
        peg$c43 = peg$literalExpectation('f', false),
        peg$c44 = function() { return '\f' },
        peg$c45 = 'n',
        peg$c46 = peg$literalExpectation('n', false),
        peg$c47 = function() { return '\n' },
        peg$c48 = 'r',
        peg$c49 = peg$literalExpectation('r', false),
        peg$c50 = function() { return '\r' },
        peg$c51 = 't',
        peg$c52 = peg$literalExpectation('t', false),
        peg$c53 = function() { return '\t' },
        peg$c54 = 'u',
        peg$c55 = peg$literalExpectation('u', false),
        peg$c56 = function(digits) {
          return String.fromCharCode(parseInt(digits, 16))
        },
        peg$c57 = function(sequence) { return sequence },
        peg$c58 = /^[^\0-\x1F"\\]/,
        peg$c59 = peg$classExpectation([['\0', '\x1F'], '"', '\\'], true, false),
        peg$c60 = /^[0-9]/,
        peg$c61 = peg$classExpectation([['0', '9']], false, false),
        peg$c62 = /^[0-9a-f]/i,
        peg$c63 = peg$classExpectation([['0', '9'], ['a', 'f']], false, true),
        
        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,
        
        peg$result
      
      if ('startRule' in options) {
        if (!(options.startRule in peg$startRuleFunctions)) {
          throw new Error('Can\'t start parsing from rule "' + options.startRule + '".')
        }
        
        peg$startRuleFunction = peg$startRuleFunctions[options.startRule]
      }
      
      function text() {
        return input.substring(peg$savedPos, peg$currPos)
      }
      
      function location() {
        return peg$computeLocation(peg$savedPos, peg$currPos)
      }
      
      function expected(description, location) {
        location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)
        
        throw peg$buildStructuredError(
          [peg$otherExpectation(description)],
          input.substring(peg$savedPos, peg$currPos),
          location
        )
      }
      
      function error(message, location) {
        location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)
        
        throw peg$buildSimpleError(message, location)
      }
      
      function peg$literalExpectation(text, ignoreCase) {
        return { type: 'literal', text: text, ignoreCase: ignoreCase }
      }
      
      function peg$classExpectation(parts, inverted, ignoreCase) {
        return { type: 'class', parts: parts, inverted: inverted, ignoreCase: ignoreCase }
      }
      
      function peg$anyExpectation() {
        return { type: 'any' }
      }
      
      function peg$endExpectation() {
        return { type: 'end' }
      }
      
      function peg$otherExpectation(description) {
        return { type: 'other', description: description }
      }
      
      function peg$computePosDetails(pos) {
        var details = peg$posDetailsCache[pos], p
        
        if (details) {
          return details
        } else {
          p = pos - 1
          while (!peg$posDetailsCache[p]) {
            p--
          }
          
          details = peg$posDetailsCache[p]
          details = {
            line:   details.line,
            column: details.column
          }
          
          while (p < pos) {
            if (input.charCodeAt(p) === 10) {
              details.line++
              details.column = 1
            } else {
              details.column++
            }
            
            p++
          }
          
          peg$posDetailsCache[pos] = details
          return details
        }
      }
      
      function peg$computeLocation(startPos, endPos) {
        var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos)
        
        return {
          start: {
            offset: startPos,
            line:   startPosDetails.line,
            column: startPosDetails.column
          },
          end: {
            offset: endPos,
            line:   endPosDetails.line,
            column: endPosDetails.column
          }
        }
      }
      
      function peg$fail(expected) {
        if (peg$currPos < peg$maxFailPos) { return }
        
        if (peg$currPos > peg$maxFailPos) {
          peg$maxFailPos = peg$currPos
          peg$maxFailExpected = []
        }
        
        peg$maxFailExpected.push(expected)
      }
      
      function peg$buildSimpleError(message, location) {
        return new peg$SyntaxError(message, null, null, location)
      }
      
      function peg$buildStructuredError(expected, found, location) {
        return new peg$SyntaxError(
          peg$SyntaxError.buildMessage(expected, found),
          expected,
          found,
          location
        )
      }
      
      function peg$parseExpression() {
        var s0, s1, s2, s3, s4, s5, s6, s7
        
        s0 = peg$currPos
        s1 = peg$parseTerm()
        if (s1 !== peg$FAILED) {
          s2 = []
          s3 = peg$currPos
          s4 = peg$parse_()
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 43) {
              s5 = peg$c0
              peg$currPos++
            } else {
              s5 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c1) }
            }
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s5 = peg$c2
                peg$currPos++
              } else {
                s5 = peg$FAILED
                if (peg$silentFails === 0) { peg$fail(peg$c3) }
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_()
              if (s6 !== peg$FAILED) {
                s7 = peg$parseTerm()
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7]
                  s3 = s4
                } else {
                  peg$currPos = s3
                  s3 = peg$FAILED
                }
              } else {
                peg$currPos = s3
                s3 = peg$FAILED
              }
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3)
            s3 = peg$currPos
            s4 = peg$parse_()
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 43) {
                s5 = peg$c0
                peg$currPos++
              } else {
                s5 = peg$FAILED
                if (peg$silentFails === 0) { peg$fail(peg$c1) }
              }
              if (s5 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 45) {
                  s5 = peg$c2
                  peg$currPos++
                } else {
                  s5 = peg$FAILED
                  if (peg$silentFails === 0) { peg$fail(peg$c3) }
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_()
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseTerm()
                  if (s7 !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7]
                    s3 = s4
                  } else {
                    peg$currPos = s3
                    s3 = peg$FAILED
                  }
                } else {
                  peg$currPos = s3
                  s3 = peg$FAILED
                }
              } else {
                peg$currPos = s3
                s3 = peg$FAILED
              }
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c4(s1, s2)
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
        
        return s0
      }
      
      function peg$parseTerm() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8
        
        s0 = peg$currPos
        s1 = peg$parse_()
        if (s1 !== peg$FAILED) {
          s2 = peg$parseFactor()
          if (s2 !== peg$FAILED) {
            s3 = []
            s4 = peg$currPos
            s5 = peg$parse_()
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 42) {
                s6 = peg$c5
                peg$currPos++
              } else {
                s6 = peg$FAILED
                if (peg$silentFails === 0) { peg$fail(peg$c6) }
              }
              if (s6 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 47) {
                  s6 = peg$c7
                  peg$currPos++
                } else {
                  s6 = peg$FAILED
                  if (peg$silentFails === 0) { peg$fail(peg$c8) }
                }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_()
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseFactor()
                  if (s8 !== peg$FAILED) {
                    s5 = [s5, s6, s7, s8]
                    s4 = s5
                  } else {
                    peg$currPos = s4
                    s4 = peg$FAILED
                  }
                } else {
                  peg$currPos = s4
                  s4 = peg$FAILED
                }
              } else {
                peg$currPos = s4
                s4 = peg$FAILED
              }
            } else {
              peg$currPos = s4
              s4 = peg$FAILED
            }
            while (s4 !== peg$FAILED) {
              s3.push(s4)
              s4 = peg$currPos
              s5 = peg$parse_()
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 42) {
                  s6 = peg$c5
                  peg$currPos++
                } else {
                  s6 = peg$FAILED
                  if (peg$silentFails === 0) { peg$fail(peg$c6) }
                }
                if (s6 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 47) {
                    s6 = peg$c7
                    peg$currPos++
                  } else {
                    s6 = peg$FAILED
                    if (peg$silentFails === 0) { peg$fail(peg$c8) }
                  }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_()
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseFactor()
                    if (s8 !== peg$FAILED) {
                      s5 = [s5, s6, s7, s8]
                      s4 = s5
                    } else {
                      peg$currPos = s4
                      s4 = peg$FAILED
                    }
                  } else {
                    peg$currPos = s4
                    s4 = peg$FAILED
                  }
                } else {
                  peg$currPos = s4
                  s4 = peg$FAILED
                }
              } else {
                peg$currPos = s4
                s4 = peg$FAILED
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_()
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c9(s2, s3)
                s0 = s1
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
        
        return s0
      }
      
      function peg$parseFactor() {
        var s0, s1, s2, s3, s4, s5
        
        s0 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c10
          peg$currPos++
        } else {
          s1 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c11) }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_()
          if (s2 !== peg$FAILED) {
            s3 = peg$parseExpression()
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_()
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s5 = peg$c12
                  peg$currPos++
                } else {
                  s5 = peg$FAILED
                  if (peg$silentFails === 0) { peg$fail(peg$c13) }
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0
                  s1 = peg$c14(s3)
                  s0 = s1
                } else {
                  peg$currPos = s0
                  s0 = peg$FAILED
                }
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseNumber()
          if (s0 === peg$FAILED) {
            s0 = peg$parseString()
            if (s0 === peg$FAILED) {
              s0 = peg$parseFunctionCall()
            }
          }
        }
        
        return s0
      }
      
      function peg$parse_() {
        var s0, s1
        
        peg$silentFails++
        s0 = []
        if (peg$c16.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s1 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c17) }
        }
        while (s1 !== peg$FAILED) {
          s0.push(s1)
          if (peg$c16.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos)
            peg$currPos++
          } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c17) }
          }
        }
        peg$silentFails--
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c15) }
        }
        
        return s0
      }
      
      function peg$parseFunctionCall() {
        var s0, s1, s2, s3, s4, s5, s6
        
        s0 = peg$currPos
        s1 = []
        if (peg$c18.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s2 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c19) }
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2)
            if (peg$c18.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos)
              peg$currPos++
            } else {
              s2 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c19) }
            }
          }
        } else {
          s1 = peg$FAILED
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s2 = peg$c10
            peg$currPos++
          } else {
            s2 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c11) }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_()
            if (s3 !== peg$FAILED) {
              s4 = []
              if (peg$c20.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos)
                peg$currPos++
              } else {
                s5 = peg$FAILED
                if (peg$silentFails === 0) { peg$fail(peg$c21) }
              }
              if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                  s4.push(s5)
                  if (peg$c20.test(input.charAt(peg$currPos))) {
                    s5 = input.charAt(peg$currPos)
                    peg$currPos++
                  } else {
                    s5 = peg$FAILED
                    if (peg$silentFails === 0) { peg$fail(peg$c21) }
                  }
                }
              } else {
                s4 = peg$FAILED
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_()
                if (s5 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s6 = peg$c12
                    peg$currPos++
                  } else {
                    s6 = peg$FAILED
                    if (peg$silentFails === 0) { peg$fail(peg$c13) }
                  }
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s0
                    s1 = peg$c22(s1, s4)
                    s0 = s1
                  } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                  }
                } else {
                  peg$currPos = s0
                  s0 = peg$FAILED
                }
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
        
        return s0
      }
      
      function peg$parseNumber() {
        var s0, s1, s2, s3, s4
        
        peg$silentFails++
        s0 = peg$currPos
        s1 = peg$parseminus()
        if (s1 === peg$FAILED) {
          s1 = null
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseint()
          if (s2 !== peg$FAILED) {
            s3 = peg$parsefrac()
            if (s3 === peg$FAILED) {
              s3 = null
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseexp()
              if (s4 === peg$FAILED) {
                s4 = null
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c24()
                s0 = s1
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
        peg$silentFails--
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c23) }
        }
        
        return s0
      }
      
      function peg$parsedecimal_point() {
        var s0
        
        if (input.charCodeAt(peg$currPos) === 46) {
          s0 = peg$c25
          peg$currPos++
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c26) }
        }
        
        return s0
      }
      
      function peg$parsedigit1_9() {
        var s0
        
        if (peg$c27.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c28) }
        }
        
        return s0
      }
      
      function peg$parsee() {
        var s0
        
        if (peg$c29.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c30) }
        }
        
        return s0
      }
      
      function peg$parseexp() {
        var s0, s1, s2, s3, s4
        
        s0 = peg$currPos
        s1 = peg$parsee()
        if (s1 !== peg$FAILED) {
          s2 = peg$parseminus()
          if (s2 === peg$FAILED) {
            s2 = peg$parseplus()
          }
          if (s2 === peg$FAILED) {
            s2 = null
          }
          if (s2 !== peg$FAILED) {
            s3 = []
            s4 = peg$parseDIGIT()
            if (s4 !== peg$FAILED) {
              while (s4 !== peg$FAILED) {
                s3.push(s4)
                s4 = peg$parseDIGIT()
              }
            } else {
              s3 = peg$FAILED
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3]
              s0 = s1
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
        
        return s0
      }
      
      function peg$parsefrac() {
        var s0, s1, s2, s3
        
        s0 = peg$currPos
        s1 = peg$parsedecimal_point()
        if (s1 !== peg$FAILED) {
          s2 = []
          s3 = peg$parseDIGIT()
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3)
              s3 = peg$parseDIGIT()
            }
          } else {
            s2 = peg$FAILED
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2]
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
        
        return s0
      }
      
      function peg$parseint() {
        var s0, s1, s2, s3
        
        s0 = peg$parsezero()
        if (s0 === peg$FAILED) {
          s0 = peg$currPos
          s1 = peg$parsedigit1_9()
          if (s1 !== peg$FAILED) {
            s2 = []
            s3 = peg$parseDIGIT()
            while (s3 !== peg$FAILED) {
              s2.push(s3)
              s3 = peg$parseDIGIT()
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2]
              s0 = s1
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        }
        
        return s0
      }
      
      function peg$parseminus() {
        var s0
        
        if (input.charCodeAt(peg$currPos) === 45) {
          s0 = peg$c2
          peg$currPos++
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c3) }
        }
        
        return s0
      }
      
      function peg$parseplus() {
        var s0
        
        if (input.charCodeAt(peg$currPos) === 43) {
          s0 = peg$c0
          peg$currPos++
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c1) }
        }
        
        return s0
      }
      
      function peg$parsezero() {
        var s0
        
        if (input.charCodeAt(peg$currPos) === 48) {
          s0 = peg$c31
          peg$currPos++
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c32) }
        }
        
        return s0
      }
      
      function peg$parseString() {
        var s0, s1, s2, s3
        
        peg$silentFails++
        s0 = peg$currPos
        s1 = peg$parsequotation_mark()
        if (s1 !== peg$FAILED) {
          s2 = []
          s3 = peg$parsechar()
          while (s3 !== peg$FAILED) {
            s2.push(s3)
            s3 = peg$parsechar()
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsequotation_mark()
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0
              s1 = peg$c34(s2)
              s0 = s1
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
        peg$silentFails--
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c33) }
        }
        
        return s0
      }
      
      function peg$parsechar() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9
        
        s0 = peg$parseunescaped()
        if (s0 === peg$FAILED) {
          s0 = peg$currPos
          s1 = peg$parseescape()
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s2 = peg$c35
              peg$currPos++
            } else {
              s2 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c36) }
            }
            if (s2 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 92) {
                s2 = peg$c37
                peg$currPos++
              } else {
                s2 = peg$FAILED
                if (peg$silentFails === 0) { peg$fail(peg$c38) }
              }
              if (s2 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 47) {
                  s2 = peg$c7
                  peg$currPos++
                } else {
                  s2 = peg$FAILED
                  if (peg$silentFails === 0) { peg$fail(peg$c8) }
                }
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos
                  if (input.charCodeAt(peg$currPos) === 98) {
                    s3 = peg$c39
                    peg$currPos++
                  } else {
                    s3 = peg$FAILED
                    if (peg$silentFails === 0) { peg$fail(peg$c40) }
                  }
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s2
                    s3 = peg$c41()
                  }
                  s2 = s3
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos
                    if (input.charCodeAt(peg$currPos) === 102) {
                      s3 = peg$c42
                      peg$currPos++
                    } else {
                      s3 = peg$FAILED
                      if (peg$silentFails === 0) { peg$fail(peg$c43) }
                    }
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s2
                      s3 = peg$c44()
                    }
                    s2 = s3
                    if (s2 === peg$FAILED) {
                      s2 = peg$currPos
                      if (input.charCodeAt(peg$currPos) === 110) {
                        s3 = peg$c45
                        peg$currPos++
                      } else {
                        s3 = peg$FAILED
                        if (peg$silentFails === 0) { peg$fail(peg$c46) }
                      }
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s2
                        s3 = peg$c47()
                      }
                      s2 = s3
                      if (s2 === peg$FAILED) {
                        s2 = peg$currPos
                        if (input.charCodeAt(peg$currPos) === 114) {
                          s3 = peg$c48
                          peg$currPos++
                        } else {
                          s3 = peg$FAILED
                          if (peg$silentFails === 0) { peg$fail(peg$c49) }
                        }
                        if (s3 !== peg$FAILED) {
                          peg$savedPos = s2
                          s3 = peg$c50()
                        }
                        s2 = s3
                        if (s2 === peg$FAILED) {
                          s2 = peg$currPos
                          if (input.charCodeAt(peg$currPos) === 116) {
                            s3 = peg$c51
                            peg$currPos++
                          } else {
                            s3 = peg$FAILED
                            if (peg$silentFails === 0) { peg$fail(peg$c52) }
                          }
                          if (s3 !== peg$FAILED) {
                            peg$savedPos = s2
                            s3 = peg$c53()
                          }
                          s2 = s3
                          if (s2 === peg$FAILED) {
                            s2 = peg$currPos
                            if (input.charCodeAt(peg$currPos) === 117) {
                              s3 = peg$c54
                              peg$currPos++
                            } else {
                              s3 = peg$FAILED
                              if (peg$silentFails === 0) { peg$fail(peg$c55) }
                            }
                            if (s3 !== peg$FAILED) {
                              s4 = peg$currPos
                              s5 = peg$currPos
                              s6 = peg$parseHEXDIG()
                              if (s6 !== peg$FAILED) {
                                s7 = peg$parseHEXDIG()
                                if (s7 !== peg$FAILED) {
                                  s8 = peg$parseHEXDIG()
                                  if (s8 !== peg$FAILED) {
                                    s9 = peg$parseHEXDIG()
                                    if (s9 !== peg$FAILED) {
                                      s6 = [s6, s7, s8, s9]
                                      s5 = s6
                                    } else {
                                      peg$currPos = s5
                                      s5 = peg$FAILED
                                    }
                                  } else {
                                    peg$currPos = s5
                                    s5 = peg$FAILED
                                  }
                                } else {
                                  peg$currPos = s5
                                  s5 = peg$FAILED
                                }
                              } else {
                                peg$currPos = s5
                                s5 = peg$FAILED
                              }
                              if (s5 !== peg$FAILED) {
                                s4 = input.substring(s4, peg$currPos)
                              } else {
                                s4 = s5
                              }
                              if (s4 !== peg$FAILED) {
                                peg$savedPos = s2
                                s3 = peg$c56(s4)
                                s2 = s3
                              } else {
                                peg$currPos = s2
                                s2 = peg$FAILED
                              }
                            } else {
                              peg$currPos = s2
                              s2 = peg$FAILED
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0
              s1 = peg$c57(s2)
              s0 = s1
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        }
        
        return s0
      }
      
      function peg$parseescape() {
        var s0
        
        if (input.charCodeAt(peg$currPos) === 92) {
          s0 = peg$c37
          peg$currPos++
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c38) }
        }
        
        return s0
      }
      
      function peg$parsequotation_mark() {
        var s0
        
        if (input.charCodeAt(peg$currPos) === 34) {
          s0 = peg$c35
          peg$currPos++
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c36) }
        }
        
        return s0
      }
      
      function peg$parseunescaped() {
        var s0
        
        if (peg$c58.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c59) }
        }
        
        return s0
      }
      
      function peg$parseDIGIT() {
        var s0
        
        if (peg$c60.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c61) }
        }
        
        return s0
      }
      
      function peg$parseHEXDIG() {
        var s0
        
        if (peg$c62.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c63) }
        }
        
        return s0
      }
      
      peg$result = peg$startRuleFunction()
      
      if (peg$result !== peg$FAILED && peg$currPos === input.length) {
        return peg$result
      } else {
        if (peg$result !== peg$FAILED && peg$currPos < input.length) {
          peg$fail(peg$endExpectation())
        }
        
        throw peg$buildStructuredError(
          peg$maxFailExpected,
          peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
          peg$maxFailPos < input.length
            ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
            : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
        )
      }
    }
    
    return {
      SyntaxError: peg$SyntaxError,
      parse:       peg$parse
    }
  })()
