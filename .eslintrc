{
  "env": {
    "browser": true,
    "commonjs": true,
    "es6": true,
    "node": true
  },
  "globals": {
    "debug": true,
    "window": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:import/recommended",
    "plugin:promise/recommended",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
    "prettier",
    "prettier/react",
    "prettier/standard"
  ],
  "parser": "@babel/eslint-parser",
  "plugins": ["@babel", "react", "react-hooks", "prettier"],
  "parserOptions": {
    "ecmaVersion": 7,
    "ecmaFeatures": {
      // lambda表达式
      "arrowFunctions": true,
      // 解构赋值
      "destructuring": true,
      // class
      "classes": true,
      // http://es6.ruanyifeng.com/#docs/function#函数参数的默认值
      "defaultParams": true,
      // 块级作用域，允许使用let const
      "blockBindings": true,
      // 允许使用模块，模块内默认严格模式
      "modules": true,
      // 允许字面量定义对象时，用表达式做属性名
      // http://es6.ruanyifeng.com/#docs/object#属性名表达式
      "objectLiteralComputedProperties": true,
      // 解决使用修饰器，export导致 eslint 报错问题
      "legacyDecorators": true,
      // 允许对象字面量方法名简写
      /*var o = { 
        method() { 
          return "Hello!"; 
        } 
     }; 

     等同于 
 
     var o = { 
       method: function() { 
         return "Hello!"; 
       } 
     }; 
    */
      "objectLiteralShorthandMethods": true,
      /* 
      对象字面量属性名简写
      var foo = 'bar'; 
      var baz = {foo}; 
      baz // {foo: "bar"} 

      // 等同于 
      var baz = {foo: foo}; 
    */
      "objectLiteralShorthandProperties": true,
      // http://es6.ruanyifeng.com/#docs/function#rest参数
      "restParams": true,
      // http://es6.ruanyifeng.com/#docs/function#扩展运算符
      "spread": true,
      // http://es6.ruanyifeng.com/#docs/iterator#for---of循环
      "forOf": true,
      // http://es6.ruanyifeng.com/#docs/generator
      "generators": true,
      // http://es6.ruanyifeng.com/#docs/string#模板字符串
      "templateStrings": true,
      "superInFunctions": true,
      // http://es6.ruanyifeng.com/#docs/object#对象的扩展运算符
      "experimentalObjectRestSpread": true,
      "experimentalDecorators": true,
      "jsx": true
    },
    "sourceType": "module"
  },
  "rules": {
    "import/prefer-default-export": 0,
    "import/no-unresolved": 0,
    "no-multiple-empty-lines": "warn",
    "import/extensions": 0,
    "padded-blocks": 0,
    "no-useless-constructor": 0,
    // lerna管理npm包时, 子工程packages.json使用的包可能被提取到根目录里管理, 开启此rule会提示找不到包
    "import/no-extraneous-dependencies": 0,
    "node/no-extraneous-import": 0,
    "arrow-body-style": 0,
    "indent": "off",
    "react/prop-types": 0,
    // 文件末尾强制换行
    "eol-last": 1,
    // 使用 === 替代 ==
    "eqeqeq": [1, "allow-null"],
    // 控制逗号在行尾出现还是在行首出现
    // http://eslint.org/docs/rules/comma-style
    "comma-style": [1, "last"],
    "linebreak-style": [1, "unix"],
    "quotes": [1, "single"],
    "semi": [1, "never"],
    "no-extra-semi": 0,
    "semi-spacing": 0,
    "no-alert": 0,
    "no-array-constructor": 1,
    "no-caller": 1,
    "no-catch-shadow": 0,
    "no-cond-assign": 1,
    "no-console": 0,
    "no-constant-condition": 0,
    "no-continue": 0,
    "no-control-regex": 1,
    "no-debugger": 1,
    "no-delete-var": 1,
    "no-mixed-spaces-and-tabs": 1,
    "no-unused-vars": 1,
    "comma-dangle": 1,
    /* 尽量使用 es6 的 React 组件写法 */
    "react/prefer-es6-class": 1,
    "react/react-in-jsx-scope": 0,
    /* 一个 jsx 文件只能包含一个组件（忽略无状态的组件） */
    "react/no-multi-comp": 0,
    /* 如果一个组件无状态，则建议写成纯函数组件 */
    "react/prefer-stateless-function": [0, { "ignorePureComponents": false }],
    /* 文件名命名规范 */
    "react/jsx-pascal-case": 1,
    /* 标签对齐规范 */
    "react/jsx-closing-bracket-location": 1,
    /* 双引号规范 */
    "jsx-quotes": [1, "prefer-single"],
    /* 双大括号内留白一个空格 */
    "react/jsx-curly-spacing": 1,
    /* <dom check={true} /> 应为 <dom check /> */
    "react/jsx-boolean-value": 1,
    /* 没加上：jsx-a11y/img-has-alt jsx-a11y/img-redundant-alt jsx-a11y/aria-role jsx-a11y/no-access-key */
    "react/no-string-refs": 0,
    /* 返回组件的时候使用括号 */
    "react/jsx-wrap-multilines": 1,
    /* 无子组件的 dom 应该使用闭合写法 */
    "react/self-closing-comp": 1,
    /* 不要在组件内使用 bind 和 箭头函数 */
    "react/jsx-no-bind": [1, { "allowArrowFunctions": true }],
    /* render 需要 return */
    "react/require-render-return": 1,
    /* 组件方法内的排序 */
    "react/sort-comp": 1,
    "react/jsx-uses-vars": 1,
    "react/jsx-no-undef": 1,
    "react/display-name": 0,
    // 使用hook时, 最好参考官方最佳实践， react-hooks/exhaustive-deps 不够成熟，先MARK
    "react-hooks/rules-of-hooks": 2
  }
}
